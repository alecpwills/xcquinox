/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/pyscf/dft/libxc.py:772: UserWarning: Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, the same to the B3LYP functional in Gaussian and ORCA (issue 1480). To restore the VWN5 definition, you can put the setting "B3LYP_WITH_VWN5 = True" in pyscf_conf.py
  warnings.warn('Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, '
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4054eb0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4054eb0> in UKS object of <class 'pyscf.dft.uks.UKS'>
SINGLE NETFILE MATCH FOUND. DESERIALIZING...
WARNING: External module "mldftdat" required for non-local descriptor use.
<pyscf.gto.mole.Mole object at 0x7ffcf4054eb0> [['P', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf40542b0> [['N', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf40571c0> [['H', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf4055de0> [['Li', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf4057a90> [['O', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf40557b0> [['Cl', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf4055180> [['Al', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf4054e80> [['S', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffcf4056260> [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf4057ac0> [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf40573a0> [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf4054850> [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]] 3
<pyscf.gto.mole.Mole object at 0x7ffcf4054880> [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]] 3
<pyscf.gto.mole.Mole object at 0x7ffcf40549a0> [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf4056560> [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf40560b0> [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf4054f70> [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]] 4
<pyscf.gto.mole.Mole object at 0x7ffcf4056d70> [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf4056a10> [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf40563b0> [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf4056f20> [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf4057f10> [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]] 4
<pyscf.gto.mole.Mole object at 0x7ffcf40554b0> [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]] 4
<pyscf.gto.mole.Mole object at 0x7ffcf4057670> [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]] 2
<pyscf.gto.mole.Mole object at 0x7ffcf4055480> [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]] 5
<pyscf.gto.mole.Mole object at 0x7ffcf432dcc0> [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]] 3
<pyscf.gto.mole.Mole object at 0x7ffcf432c7f0> [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]] 5
mol:  [['P', array([0., 0., 0.])]]
converged SCF energy = -341.104145992717  <S^2> = 3.7502984  2S+1 = 4.0001492
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf40542b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf40542b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-1.02664228e-02 -2.75034931e-03 -4.08118845e-03 ... -7.11656185e+00
 -7.11656185e+00 -7.11656185e+00] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.67994866e-11, dtype=float64), Array(1059.62286844, dtype=float64))
rho0_b = (Array(4.43047991e-14, dtype=float64), Array(1059.87616936, dtype=float64))
gamma_a = (Array(5.28031237e-21, dtype=float64), Array(9.20660135e+08, dtype=float64))
gamma_b = (Array(8.5144319e-27, dtype=float64), Array(9.21228364e+08, dtype=float64))
gamma_ab = (Array(-8.14145379e-18, dtype=float64), Array(9.20944206e+08, dtype=float64))
tau_a = (Array(1.80944571e-11, dtype=float64), Array(117315.47918142, dtype=float64))
tau_b = (Array(2.4091098e-14, dtype=float64), Array(117138.81600436, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['N', array([0., 0., 0.])]]
converged SCF energy = -54.5289742046674  <S^2> = 3.7524945  2S+1 = 4.0012471
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf40571c0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf40571c0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5016, 22)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 5016), rho_b.shape=(6, 5016)
exc with xc_func = [-5.96866333e-03 -2.51798664e-03 -5.83130694e-04 ... -3.21815546e+00
 -3.21815546e+00 -3.21815546e+00] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5016, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.01250672e-10, dtype=float64), Array(98.02349249, dtype=float64))
rho0_b = (Array(7.96767579e-13, dtype=float64), Array(98.07082061, dtype=float64))
gamma_a = (Array(7.38523929e-20, dtype=float64), Array(1678679.86597091, dtype=float64))
gamma_b = (Array(5.20206274e-24, dtype=float64), Array(1685178.28025284, dtype=float64))
gamma_ab = (Array(6.19826412e-22, dtype=float64), Array(1681925.93464514, dtype=float64))
tau_a = (Array(9.19823844e-11, dtype=float64), Array(2392.4769597, dtype=float64))
tau_b = (Array(8.16119858e-13, dtype=float64), Array(2377.12659072, dtype=float64))
retrho shape: (5016, 9)
refexc shape: (5016,)
mol:  [['H', array([0., 0., 0.])]]
converged SCF energy = -0.499812984008539  <S^2> = 0.75  2S+1 = 2
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4055de0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4055de0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 7, 7)
ao.shape (10, 2440, 7)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 2440), rho_b.shape=(6, 2440)
exc with xc_func = [-5.68454141e-03 -2.30635934e-03 -4.18219349e-04 ... -4.64908450e-01
 -4.64908450e-01 -4.64908450e-01] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 7, 7)
ao_eval.shape=(4, 2440, 7)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.6658391e-11, dtype=float64), Array(0.29561959, dtype=float64))
rho0_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_a = (Array(4.73133914e-21, dtype=float64), Array(0.26449368, dtype=float64))
gamma_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_ab = (Array(0., dtype=float64), Array(0., dtype=float64))
tau_a = (Array(1.61332065e-11, dtype=float64), Array(0.13786571, dtype=float64))
tau_b = (Array(0., dtype=float64), Array(0., dtype=float64))
retrho shape: (2440, 9)
refexc shape: (2440,)
mol:  [['Li', array([0., 0., 0.])]]
converged SCF energy = -7.46006188627842  <S^2> = 0.75000049  2S+1 = 2.0000005
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4057a90> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4057a90> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 4592, 22)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 4592), rho_b.shape=(6, 4592)
exc with xc_func = [-0.01101611 -0.00387793 -0.00387793 ... -0.02008958 -1.30290729
 -1.30290729] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 4592, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.98682912e-08, dtype=float64), Array(6.61008772, dtype=float64))
rho0_b = (Array(5.00919173e-12, dtype=float64), Array(6.40126477, dtype=float64))
gamma_a = (Array(8.7831563e-16, dtype=float64), Array(1337.91712145, dtype=float64))
gamma_b = (Array(4.51852966e-22, dtype=float64), Array(1252.60460758, dtype=float64))
gamma_ab = (Array(-7.10811059e-13, dtype=float64), Array(1294.55828409, dtype=float64))
tau_a = (Array(3.70309247e-09, dtype=float64), Array(28.9347713, dtype=float64))
tau_b = (Array(2.38827694e-13, dtype=float64), Array(27.96947733, dtype=float64))
retrho shape: (4592, 9)
refexc shape: (4592,)
mol:  [['O', array([0., 0., 0.])]]
converged SCF energy = -75.0033776292397  <S^2> = 2.0027452  2S+1 = 3.0018295
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf40557b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf40557b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5040, 22)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 5040), rho_b.shape=(6, 5040)
exc with xc_func = [-2.95235805e-03 -9.12072145e-04 -1.26527618e-04 ... -3.69610830e+00
 -3.69610830e+00 -3.69610830e+00] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5040, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.72352312e-13, dtype=float64), Array(148.53261503, dtype=float64))
rho0_b = (Array(1.00170867e-15, dtype=float64), Array(148.5462869, dtype=float64))
gamma_a = (Array(5.88125949e-24, dtype=float64), Array(4945157.45683401, dtype=float64))
gamma_b = (Array(1.9081012e-29, dtype=float64), Array(4956870.77456516, dtype=float64))
gamma_ab = (Array(9.17704857e-27, dtype=float64), Array(4950939.65024506, dtype=float64))
tau_a = (Array(1.10321024e-12, dtype=float64), Array(4773.97069784, dtype=float64))
tau_b = (Array(1.44548914e-14, dtype=float64), Array(4747.12476134, dtype=float64))
retrho shape: (5040, 9)
refexc shape: (5040,)
mol:  [['Cl', array([0., 0., 0.])]]
converged SCF energy = -459.957577121472  <S^2> = 0.7516194  2S+1 = 2.0016187
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4055180> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4055180> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6152, 30)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 6152), rho_b.shape=(6, 6152)
exc with xc_func = [-3.17784892e-03 -2.84837505e-03 -1.56740764e-03 ... -8.09938668e+00
 -8.09938668e+00 -8.09938668e+00] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6152, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.25692987e-11, dtype=float64), Array(1561.90471271, dtype=float64))
rho0_b = (Array(3.10255402e-13, dtype=float64), Array(1561.95787319, dtype=float64))
gamma_a = (Array(1.30503172e-20, dtype=float64), Array(2.7317145e+09, dtype=float64))
gamma_b = (Array(6.43344974e-25, dtype=float64), Array(2.73215916e+09, dtype=float64))
gamma_ab = (Array(-1.32971847e-17, dtype=float64), Array(2.73193368e+09, dtype=float64))
tau_a = (Array(3.15226256e-11, dtype=float64), Array(239540.94872572, dtype=float64))
tau_b = (Array(4.5786919e-13, dtype=float64), Array(239371.7571019, dtype=float64))
retrho shape: (6152, 9)
refexc shape: (6152,)
mol:  [['Al', array([0., 0., 0.])]]
converged SCF energy = -242.226560993731  <S^2> = 0.75226415  2S+1 = 2.0022629
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4054e80> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4054e80> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6088, 30)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 6088), rho_b.shape=(6, 6088)
exc with xc_func = [-0.02457526 -0.01727654 -0.01025355 ... -0.00090544 -0.00390747
 -0.00064318] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6088, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.9572521e-12, dtype=float64), Array(679.40140666, dtype=float64))
rho0_b = (Array(5.90720655e-12, dtype=float64), Array(679.49865978, dtype=float64))
gamma_a = (Array(9.7787307e-23, dtype=float64), Array(2.66170711e+08, dtype=float64))
gamma_b = (Array(9.7667365e-23, dtype=float64), Array(2.66254716e+08, dtype=float64))
gamma_ab = (Array(1.07715737e-22, dtype=float64), Array(2.6621271e+08, dtype=float64))
tau_a = (Array(3.69846629e-12, dtype=float64), Array(56081.37751185, dtype=float64))
tau_b = (Array(2.09876298e-12, dtype=float64), Array(56073.2312341, dtype=float64))
retrho shape: (6088, 9)
refexc shape: (6088,)
mol:  [['S', array([0., 0., 0.])]]
converged SCF energy = -397.938786804453  <S^2> = 2.0022329  2S+1 = 3.0014882
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4056260> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4056260> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc with xc_func = [-6.01886915e-03 -2.66197198e-03 -2.59646890e-03 ... -7.60876437e+00
 -7.60876437e+00 -7.60876437e+00] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.90972883e-12, dtype=float64), Array(1294.97546988, dtype=float64))
rho0_b = (Array(9.43472391e-15, dtype=float64), Array(1295.10901134, dtype=float64))
gamma_a = (Array(1.97323708e-23, dtype=float64), Array(1.63838354e+09, dtype=float64))
gamma_b = (Array(5.04838852e-28, dtype=float64), Array(1.63892053e+09, dtype=float64))
gamma_ab = (Array(-2.12767687e-15, dtype=float64), Array(1.63865082e+09, dtype=float64))
tau_a = (Array(1.30113908e-12, dtype=float64), Array(172116.8552657, dtype=float64))
tau_b = (Array(9.82917645e-15, dtype=float64), Array(171895.27166961, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]]
converged SCF energy = -1.16580491182912  <S^2> = 2.220446e-16  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4057ac0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4057ac0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 14, 14)
ao.shape (10, 4776, 14)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 4776), rho_b.shape=(6, 4776)
exc with xc_func = [-7.26417629e-04 -1.18523234e-04 -1.56992376e-03 ... -3.54024005e-01
 -3.54024005e-01 -3.54024005e-01] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 14, 14)
ao_eval.shape=(4, 4776, 14)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.44689399e-13, dtype=float64), Array(0.20861087, dtype=float64))
rho0_b = (Array(1.44689332e-13, dtype=float64), Array(0.20861087, dtype=float64))
gamma_a = (Array(7.72165748e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_b = (Array(7.72165033e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_ab = (Array(7.72165391e-26, dtype=float64), Array(0.17008873, dtype=float64))
tau_a = (Array(6.67089084e-14, dtype=float64), Array(0.12766215, dtype=float64))
tau_b = (Array(6.67088776e-14, dtype=float64), Array(0.12766216, dtype=float64))
retrho shape: (4776, 9)
refexc shape: (4776,)
mol:  [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]]
converged SCF energy = -109.439263799566  <S^2> = 2.1316282e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf40573a0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf40573a0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9848, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 9848), rho_b.shape=(6, 9848)
exc with xc_func = [-0.00073837 -0.00352423 -0.00142303 ... -0.00029281 -0.00029281
 -0.00073837] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9848, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.14686831e-11, dtype=float64), Array(97.7451329, dtype=float64))
rho0_b = (Array(1.14686957e-11, dtype=float64), Array(97.74513282, dtype=float64))
gamma_a = (Array(1.02439634e-21, dtype=float64), Array(1675905.64475681, dtype=float64))
gamma_b = (Array(1.02439863e-21, dtype=float64), Array(1675905.63933656, dtype=float64))
gamma_ab = (Array(1.02439749e-21, dtype=float64), Array(1675905.64204669, dtype=float64))
tau_a = (Array(1.12920136e-11, dtype=float64), Array(2385.36851255, dtype=float64))
tau_b = (Array(1.12920262e-11, dtype=float64), Array(2385.36850635, dtype=float64))
retrho shape: (9848, 9)
refexc shape: (9848,)
mol:  [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]]
converged SCF energy = -107.339357395734  <S^2> = 5.3290705e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4054850> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4054850> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9752, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 9752), rho_b.shape=(6, 9752)
exc with xc_func = [-0.00214641 -0.00173897 -0.00179924 ... -0.00203924 -0.56515366
 -0.56515366] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9752, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.45847479e-10, dtype=float64), Array(213.38344803, dtype=float64))
rho0_b = (Array(6.45847123e-10, dtype=float64), Array(213.38344813, dtype=float64))
gamma_a = (Array(7.30703612e-21, dtype=float64), Array(12045972.15074616, dtype=float64))
gamma_b = (Array(7.30703495e-21, dtype=float64), Array(12045972.15767266, dtype=float64))
gamma_ab = (Array(7.30703553e-21, dtype=float64), Array(12045972.15420941, dtype=float64))
tau_a = (Array(8.2392185e-12, dtype=float64), Array(8296.09746707, dtype=float64))
tau_b = (Array(8.23921436e-12, dtype=float64), Array(8296.09747258, dtype=float64))
retrho shape: (9752, 9)
refexc shape: (9752,)
mol:  [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]]
converged SCF energy = -93.3377924465131  <S^2> = 4.0072656e-10  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4054880> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4054880> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 12256, 51)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 12256), rho_b.shape=(6, 12256)
exc with xc_func = [-1.38296161e-03 -2.66832598e-04 -3.06425201e-04 ... -4.38438767e-01
 -4.38438767e-01 -4.38438767e-01] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 12256, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.47734201e-14, dtype=float64), Array(97.63905609, dtype=float64))
rho0_b = (Array(5.47744418e-14, dtype=float64), Array(97.63905217, dtype=float64))
gamma_a = (Array(2.1109048e-26, dtype=float64), Array(1672514.39746185, dtype=float64))
gamma_b = (Array(2.11098406e-26, dtype=float64), Array(1672514.37036922, dtype=float64))
gamma_ab = (Array(2.11094443e-26, dtype=float64), Array(1672514.38391553, dtype=float64))
tau_a = (Array(4.84017018e-14, dtype=float64), Array(2383.14480496, dtype=float64))
tau_b = (Array(4.84026184e-14, dtype=float64), Array(2383.14461777, dtype=float64))
retrho shape: (12256, 9)
refexc shape: (12256,)
mol:  [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]]
converged SCF energy = -188.456965322844  <S^2> = 1.0658141e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf40549a0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf40549a0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 66, 66)
ao.shape (10, 14920, 66)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 14920), rho_b.shape=(6, 14920)
exc with xc_func = [-1.29084097e-03 -1.15920157e-03 -3.32405285e-03 ... -6.61945569e-05
 -2.73173120e+00 -2.73173120e+00] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 66, 66)
ao_eval.shape=(4, 14920, 66)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.26912701e-14, dtype=float64), Array(148.00725437, dtype=float64))
rho0_b = (Array(2.26912687e-14, dtype=float64), Array(148.00725431, dtype=float64))
gamma_a = (Array(3.64491259e-27, dtype=float64), Array(4932043.35237939, dtype=float64))
gamma_b = (Array(3.64491214e-27, dtype=float64), Array(4932043.3504686, dtype=float64))
gamma_ab = (Array(3.64491237e-27, dtype=float64), Array(4932043.351424, dtype=float64))
tau_a = (Array(2.01975405e-14, dtype=float64), Array(4763.25601495, dtype=float64))
tau_b = (Array(2.01975393e-14, dtype=float64), Array(4763.25601224, dtype=float64))
retrho shape: (14920, 9)
refexc shape: (14920,)
mol:  [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]]
converged SCF energy = -920.005608888959  <S^2> = 5.0448534e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4056560> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4056560> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12208, 60)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 12208), rho_b.shape=(6, 12208)
exc with xc_func = [-0.00376868 -0.00297928 -0.00401079 ... -0.00297928 -0.29073349
 -0.29073349] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12208, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.03699875e-10, dtype=float64), Array(1561.84909056, dtype=float64))
rho0_b = (Array(1.03699908e-10, dtype=float64), Array(1561.84909229, dtype=float64))
gamma_a = (Array(4.91102934e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
gamma_b = (Array(4.91103253e-20, dtype=float64), Array(2.73287725e+09, dtype=float64))
gamma_ab = (Array(4.91103094e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
tau_a = (Array(6.02564479e-11, dtype=float64), Array(239560.02664872, dtype=float64))
tau_b = (Array(6.02564657e-11, dtype=float64), Array(239560.02652209, dtype=float64))
retrho shape: (12208, 9)
refexc shape: (12208,)
mol:  [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]]
converged SCF energy = -199.394370591172  <S^2> = 1.1368684e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf40560b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf40560b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9824, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 9824), rho_b.shape=(6, 9824)
exc with xc_func = [-1.28783793e-03 -2.82669550e-04 -4.34324714e-03 ... -3.64362234e-01
 -3.64362234e-01 -3.64362234e-01] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9824, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.87956275e-12, dtype=float64), Array(213.92658889, dtype=float64))
rho0_b = (Array(2.87956309e-12, dtype=float64), Array(213.9265899, dtype=float64))
gamma_a = (Array(1.17053094e-22, dtype=float64), Array(12130448.41996831, dtype=float64))
gamma_b = (Array(1.17053126e-22, dtype=float64), Array(12130448.47158327, dtype=float64))
gamma_ab = (Array(1.1705311e-22, dtype=float64), Array(12130448.44577579, dtype=float64))
tau_a = (Array(5.2690727e-12, dtype=float64), Array(8330.31451392, dtype=float64))
tau_b = (Array(5.26907329e-12, dtype=float64), Array(8330.31451124, dtype=float64))
retrho shape: (9824, 9)
refexc shape: (9824,)
mol:  [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]]
converged SCF energy = -150.214894432222  <S^2> = 1.0018598  2S+1 = 2.2377308
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4054f70> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4054f70> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9912, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 9912), rho_b.shape=(6, 9912)
exc with xc_func = [-3.14142553e-03 -9.89682958e-04 -1.39986611e-04 ... -4.50036620e-01
 -4.50036620e-01 -4.50036620e-01] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9912, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.87265378e-13, dtype=float64), Array(148.29947116, dtype=float64))
rho0_b = (Array(1.87265243e-13, dtype=float64), Array(148.29947117, dtype=float64))
gamma_a = (Array(4.67808172e-25, dtype=float64), Array(4951708.88712195, dtype=float64))
gamma_b = (Array(4.67807508e-25, dtype=float64), Array(4951708.88747154, dtype=float64))
gamma_ab = (Array(2.14562085e-24, dtype=float64), Array(4951708.88729674, dtype=float64))
tau_a = (Array(3.20126469e-13, dtype=float64), Array(4771.62329622, dtype=float64))
tau_b = (Array(3.20126256e-13, dtype=float64), Array(4771.62329619, dtype=float64))
retrho shape: (9912, 9)
refexc shape: (9912,)
mol:  [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]]
converged SCF energy = -77.2435048346373  <S^2> = 8.8817842e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4056d70> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4056d70> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 58, 58)
ao.shape (10, 15208, 58)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 15208), rho_b.shape=(6, 15208)
exc with xc_func = [-0.00060514 -0.00060514 -0.0032515  ... -0.00031967 -0.00031865
 -0.00031865] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15208, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.13931845e-12, dtype=float64), Array(59.9351633, dtype=float64))
rho0_b = (Array(6.13931316e-12, dtype=float64), Array(59.93516325, dtype=float64))
gamma_a = (Array(1.65925574e-22, dtype=float64), Array(440696.0149324, dtype=float64))
gamma_b = (Array(1.65925309e-22, dtype=float64), Array(440696.01409488, dtype=float64))
gamma_ab = (Array(1.65925441e-22, dtype=float64), Array(440696.01451364, dtype=float64))
tau_a = (Array(3.4327454e-12, dtype=float64), Array(998.29901851, dtype=float64))
tau_b = (Array(3.43274276e-12, dtype=float64), Array(998.29901762, dtype=float64))
retrho shape: (15208, 9)
refexc shape: (15208,)
mol:  [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]]
converged SCF energy = -113.221335689652  <S^2> = 6.5636385e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4056a10> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4056a10> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 10040, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 10040), rho_b.shape=(6, 10040)
exc with xc_func = [-0.00219858 -0.00302532 -0.0063971  ... -0.49935599 -0.49935599
 -0.49935599] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 10040, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.33751683e-14, dtype=float64), Array(148.14285767, dtype=float64))
rho0_b = (Array(4.33752459e-14, dtype=float64), Array(148.14285736, dtype=float64))
gamma_a = (Array(1.33620756e-26, dtype=float64), Array(4935292.34683902, dtype=float64))
gamma_b = (Array(1.33621237e-26, dtype=float64), Array(4935292.34129884, dtype=float64))
gamma_ab = (Array(1.33620996e-26, dtype=float64), Array(4935292.34406893, dtype=float64))
tau_a = (Array(3.85913574e-14, dtype=float64), Array(4761.65762933, dtype=float64))
tau_b = (Array(3.8591427e-14, dtype=float64), Array(4761.65760861, dtype=float64))
retrho shape: (10040, 9)
refexc shape: (10040,)
mol:  [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]]
converged SCF energy = -460.624592374078  <S^2> = 6.2172489e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf40563b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf40563b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 37, 37)
ao.shape (10, 8552, 37)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 8552), rho_b.shape=(6, 8552)
exc with xc_func = [-1.16123674e-03 -2.16564032e-04 -2.58966276e-04 ... -2.38746776e+00
 -2.38746776e+00 -2.38746776e+00] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 37, 37)
ao_eval.shape=(4, 8552, 37)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.16474784e-13, dtype=float64), Array(1561.4701971, dtype=float64))
rho0_b = (Array(1.16474765e-13, dtype=float64), Array(1561.47019709, dtype=float64))
gamma_a = (Array(6.83811728e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_b = (Array(6.83811477e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_ab = (Array(6.83811603e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
tau_a = (Array(7.41738348e-14, dtype=float64), Array(239519.29876293, dtype=float64))
tau_b = (Array(7.41738193e-14, dtype=float64), Array(239519.29876104, dtype=float64))
retrho shape: (8552, 9)
refexc shape: (8552,)
mol:  [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]]
converged SCF energy = -8.04458854018921  <S^2> = 7.5051076e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4056f20> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4056f20> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 29, 29)
ao.shape (10, 6936, 29)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 6936), rho_b.shape=(6, 6936)
exc with xc_func = [-0.00280242 -0.0029288  -0.0029288  ... -0.41296789 -0.41296789
 -0.41296789] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 29, 29)
ao_eval.shape=(4, 6936, 29)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.1956466e-09, dtype=float64), Array(6.49224216, dtype=float64))
rho0_b = (Array(1.19564647e-09, dtype=float64), Array(6.49224223, dtype=float64))
gamma_a = (Array(6.99865839e-19, dtype=float64), Array(1296.00260034, dtype=float64))
gamma_b = (Array(6.99867634e-19, dtype=float64), Array(1296.00262925, dtype=float64))
gamma_ab = (Array(6.99866736e-19, dtype=float64), Array(1296.00261479, dtype=float64))
tau_a = (Array(7.59635231e-11, dtype=float64), Array(28.56238368, dtype=float64))
tau_b = (Array(7.5963734e-11, dtype=float64), Array(28.56238403, dtype=float64))
retrho shape: (6936, 9)
refexc shape: (6936,)
mol:  [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]]
converged SCF energy = -324.340512506578  <S^2> = 1.586109e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4057f10> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4057f10> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 11536, 60)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 11536), rho_b.shape=(6, 11536)
exc with xc_func = [-0.00664296 -0.00664296 -0.00843919 ... -0.00664296 -0.00664296
 -0.00843919] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 11536, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.52246293e-10, dtype=float64), Array(403.20885679, dtype=float64))
rho0_b = (Array(2.52300149e-10, dtype=float64), Array(403.20885662, dtype=float64))
gamma_a = (Array(6.89938397e-19, dtype=float64), Array(74474467.65584913, dtype=float64))
gamma_b = (Array(6.90222033e-19, dtype=float64), Array(74474467.43498132, dtype=float64))
gamma_ab = (Array(6.900802e-19, dtype=float64), Array(74474467.54541522, dtype=float64))
tau_a = (Array(9.39053862e-10, dtype=float64), Array(25611.04602866, dtype=float64))
tau_b = (Array(9.39060981e-10, dtype=float64), Array(25611.04594205, dtype=float64))
retrho shape: (11536, 9)
refexc shape: (11536,)
mol:  [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]]
converged SCF energy = -1622.57507845814  <S^2> = 8.3844043e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf40554b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf40554b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 120, 120)
ao.shape (10, 24512, 120)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 24512), rho_b.shape=(6, 24512)
exc with xc_func = [-9.24417222e-04 -1.96285975e-03 -4.54269418e-03 ... -6.13261799e+00
 -6.13261799e+00 -6.13261799e+00] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 120, 120)
ao_eval.shape=(4, 24512, 120)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.46952787e-13, dtype=float64), Array(1561.49823004, dtype=float64))
rho0_b = (Array(2.46953012e-13, dtype=float64), Array(1561.49822975, dtype=float64))
gamma_a = (Array(3.44377657e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_b = (Array(3.44378235e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_ab = (Array(3.44377946e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
tau_a = (Array(1.76995542e-13, dtype=float64), Array(239490.70443847, dtype=float64))
tau_b = (Array(1.76995676e-13, dtype=float64), Array(239490.70434005, dtype=float64))
retrho shape: (24512, 9)
refexc shape: (24512,)
mol:  [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]]
converged SCF energy = -342.979728469576  <S^2> = 2.5396574e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4057670> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4057670> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 13096, 51)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 13096), rho_b.shape=(6, 13096)
exc with xc_func = [-3.12427620e-03 -1.72805180e-03 -3.47626992e-04 ... -1.45346567e+00
 -1.45346567e+00 -1.45346567e+00] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 13096, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.01629307e-12, dtype=float64), Array(1058.86187873, dtype=float64))
rho0_b = (Array(4.01622475e-12, dtype=float64), Array(1058.86187689, dtype=float64))
gamma_a = (Array(6.24753832e-23, dtype=float64), Array(9.1992722e+08, dtype=float64))
gamma_b = (Array(6.24732653e-23, dtype=float64), Array(9.19927223e+08, dtype=float64))
gamma_ab = (Array(6.24743242e-23, dtype=float64), Array(9.19927221e+08, dtype=float64))
tau_a = (Array(1.97470238e-12, dtype=float64), Array(117220.07289163, dtype=float64))
tau_b = (Array(1.97466879e-12, dtype=float64), Array(117220.07268553, dtype=float64))
retrho shape: (13096, 9)
refexc shape: (13096,)
mol:  [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]]
converged SCF energy = -578.565336553222  <S^2> = 1.0034706  2S+1 = 2.23917
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf4055480> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf4055480> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12384, 60)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 12384), rho_b.shape=(6, 12384)
exc with xc_func = [-0.00093916 -0.00130487 -0.0013049  ... -0.25567959 -0.25567959
 -0.25567959] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12384, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(8.43413523e-12, dtype=float64), Array(856.05047886, dtype=float64))
rho0_b = (Array(8.43413648e-12, dtype=float64), Array(856.05047886, dtype=float64))
gamma_a = (Array(2.88103985e-22, dtype=float64), Array(5.06808639e+08, dtype=float64))
gamma_b = (Array(2.88104073e-22, dtype=float64), Array(5.06808639e+08, dtype=float64))
gamma_ab = (Array(2.93972988e-22, dtype=float64), Array(5.06808639e+08, dtype=float64))
tau_a = (Array(4.29339403e-12, dtype=float64), Array(79367.69480609, dtype=float64))
tau_b = (Array(4.29339471e-12, dtype=float64), Array(79367.69480516, dtype=float64))
retrho shape: (12384, 9)
refexc shape: (12384,)
mol:  [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]]
converged SCF energy = -40.4598214864076  <S^2> = 3.2329694e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf432dcc0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf432dcc0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 50, 50)
ao.shape (10, 13936, 50)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 13936), rho_b.shape=(6, 13936)
exc with xc_func = [-0.00295239 -0.00121221 -0.00020696 ... -0.00027031 -0.00027031
 -0.00027031] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 50, 50)
ao_eval.shape=(4, 13936, 50)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.44212404e-12, dtype=float64), Array(59.76454746, dtype=float64))
rho0_b = (Array(4.44211909e-12, dtype=float64), Array(59.76454814, dtype=float64))
gamma_a = (Array(7.40422815e-23, dtype=float64), Array(437657.06370626, dtype=float64))
gamma_b = (Array(7.40421202e-23, dtype=float64), Array(437657.07271682, dtype=float64))
gamma_ab = (Array(7.40422008e-23, dtype=float64), Array(437657.06821154, dtype=float64))
tau_a = (Array(2.21705267e-12, dtype=float64), Array(994.09544356, dtype=float64))
tau_b = (Array(2.21705041e-12, dtype=float64), Array(994.09545666, dtype=float64))
retrho shape: (13936, 9)
refexc shape: (13936,)
mol:  [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]]
converged SCF energy = -39.0756147483504  <S^2> = 6.2003735e-12  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffcf432c7f0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffcf432c7f0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 36, 36)
ao.shape (10, 9656, 36)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 9656), rho_b.shape=(6, 9656)
exc with xc_func = [-2.63869499e-03 -4.00286742e-04 -1.08589328e-03 ... -9.42413216e-01
 -9.42413216e-01 -9.42413216e-01] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 36, 36)
ao_eval.shape=(4, 9656, 36)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.97325576e-13, dtype=float64), Array(60.29192193, dtype=float64))
rho0_b = (Array(3.97312799e-13, dtype=float64), Array(60.2919211, dtype=float64))
gamma_a = (Array(1.45216607e-24, dtype=float64), Array(446896.79345498, dtype=float64))
gamma_b = (Array(1.45209229e-24, dtype=float64), Array(446896.79069891, dtype=float64))
gamma_ab = (Array(1.45212918e-24, dtype=float64), Array(446896.79207694, dtype=float64))
tau_a = (Array(4.14746853e-13, dtype=float64), Array(1005.74223904, dtype=float64))
tau_b = (Array(4.14752919e-13, dtype=float64), Array(1005.74223364, dtype=float64))
retrho shape: (9656, 9)
refexc shape: (9656,)
mol:  [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]]
converged SCF energy = -291.719272437819  <S^2> = 1.3152146e-11  2S+1 = 1
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
New DM shape: (2, 58, 58)
ao.shape (10, 15256, 58)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
no spin scaling
rho_a.shape=(6, 15256), rho_b.shape=(6, 15256)
exc with xc_func = [-0.00288016 -0.00118216 -0.00020993 ... -0.0002218  -0.0002218
 -0.0002218 ] = 0.25*HF + 0.75*PBE,
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15256, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.5975292e-12, dtype=float64), Array(854.88974535, dtype=float64))
rho0_b = (Array(4.59745479e-12, dtype=float64), Array(854.88973823, dtype=float64))
gamma_a = (Array(7.56370859e-23, dtype=float64), Array(5.05221649e+08, dtype=float64))
gamma_b = (Array(7.56346804e-23, dtype=float64), Array(5.0522164e+08, dtype=float64))
gamma_ab = (Array(7.56358831e-23, dtype=float64), Array(5.05221645e+08, dtype=float64))
tau_a = (Array(2.07913851e-12, dtype=float64), Array(79243.89454595, dtype=float64))
tau_b = (Array(2.07910628e-12, dtype=float64), Array(79243.89351869, dtype=float64))
retrho shape: (15256, 9)
refexc shape: (15256,)
Epoch 0
Step = 0: initializing inp_model and inp_opt_state.
Epoch 0 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-10.083424022147108, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-10.08342402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb7f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304bf6a0; to 'JaxprTracer' at 0x7ffc304bf290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31086740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-3.5766071067605454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-3.57660711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026eca0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1008a930; to 'JaxprTracer' at 0x7ffc1008a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a745930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.15134751133630014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15134751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161980>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06caed0; to 'JaxprTracer' at 0x7ffbd06cad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x486a93c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-83.91710661053169, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-83.91710661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0520580>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb051bfb0; to 'JaxprTracer' at 0x7ffbb051bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c044460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-9.871140977365227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-9.87114098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029eca0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900b5a30; to 'JaxprTracer' at 0x7ffb900b5620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54540460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.925420756751441, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.92542076, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bb80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506f96c0; to 'JaxprTracer' at 0x7ffb506f93f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x593411d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.5549741188691756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55497412, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266c30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e2430; to 'JaxprTracer' at 0x7ffb307e22a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x593873a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-6.832186426146314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-6.83218643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267800>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30559670; to 'JaxprTracer' at 0x7ffb30559620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf6d6ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-3.0642271640749756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-3.06422716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757010>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28628310; to 'JaxprTracer' at 0x7ffb28628770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64944f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7109089407180984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71090894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac1b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03be390; to 'JaxprTracer' at 0x7ffaf03be7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x650c5390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5798263488569034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57982635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eaa30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04d62f0; to 'JaxprTracer' at 0x7ffad04d5da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x690b1430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-1.356781943966095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.35678194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026dc90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab423e700; to 'JaxprTracer' at 0x7ffab423fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fd209d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-9.352989348608023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-9.35298935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161100>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94062c50; to 'JaxprTracer' at 0x7ffa94062d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x740b9210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.29396024588897063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29396025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704065d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70151080; to 'JaxprTracer' at 0x7ffa701514e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x742ded90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-1.796008836007623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.79600884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c6d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa406be3e0; to 'JaxprTracer' at 0x7ffa406be520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x774fee30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-7.566137650233202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-7.56613765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b27d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28794450; to 'JaxprTracer' at 0x7ffa28794590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c1b7cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.459198024155039, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45919802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502649d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e7330; to 'JaxprTracer' at 0x7ff9f07e71a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ff58b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-2.9764067497581608, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-2.97640675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6850>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06443b0; to 'JaxprTracer' at 0x7ff9d06444f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d16cc90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-1.1390334794797565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.13903348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068c170>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4585490; to 'JaxprTracer' at 0x7ff7c4586ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86e70e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10546952073087734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10546952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f1a50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a46654e0; to 'JaxprTracer' at 0x7ff7a4665080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a475c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.9025441664680136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.90254417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02562b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb1c10; to 'JaxprTracer' at 0x7ff713eb1a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87dea8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.799126375055951, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79912638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f4b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713717100; to 'JaxprTracer' at 0x7ff713716f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87cf6f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.3650486796069605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36504868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0669710>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fdb920; to 'JaxprTracer' at 0x7ff712fdb790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91ca2c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.45592395181266054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45592395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711670>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124fddf0; to 'JaxprTracer' at 0x7ff7124fdc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b1b54b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.32871971977152425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32871972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762710>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711cf8360; to 'JaxprTracer' at 0x7ff711cfbfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e19f500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.7136619592264468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71366196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877b720>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c605990; to 'JaxprTracer' at 0x7ff70c6071a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9cb32ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.42529428005670056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42529428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01141a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70be3c4f0; to 'JaxprTracer' at 0x7ff70be3c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3414670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 85.75171901558608
0, epoch_train_loss=85.75171901558608
Epoch 1
Epoch 1 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(6.752597399038614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(6.7525974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124def50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712aadd00; to 'JaxprTracer' at 0x7ff712aadc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b0cf340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(1.4027424873485055, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.40274249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f830>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41c04a0; to 'JaxprTracer' at 0x7ff7a41c2570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85af1fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(0.04131566367797513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.04131566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287786f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d038b970; to 'JaxprTracer' at 0x7ff9d0389490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d5fc760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(33.85293361306196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(33.85293361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405160>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287eef70; to 'JaxprTracer' at 0x7ffa287ef1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aea2220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(3.9519872608594255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(3.95198726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427c5d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700ded40; to 'JaxprTracer' at 0x7ffa700dcf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85421f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.5533104830683309, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.55331048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9530>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa945ea570; to 'JaxprTracer' at 0x7ffa945e8d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77290990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(0.22430913307181052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.22430913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502661a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0249df0; to 'JaxprTracer' at 0x7ffad02497b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f631380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(3.4198395623055564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(3.41983956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679d20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306c8f90; to 'JaxprTracer' at 0x7ffc306ca5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e937fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(1.1971060567880658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.19710606, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1f60>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28100db0; to 'JaxprTracer' at 0x7ffb285cd620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3615e730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(0.24312805826650072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.24312806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828a10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5045cd10; to 'JaxprTracer' at 0x7ffc5045d030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f1b08d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(0.5022283174178256, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.50222832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de450>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70157ab0; to 'JaxprTracer' at 0x7ffb2813b330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60218800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(0.5029765402401337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.50297654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463c8d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706f3e20; to 'JaxprTracer' at 0x7ffb706f1e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b3639b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(4.749643910372079, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(4.74964391, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778870>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90498040; to 'JaxprTracer' at 0x7ffb9049b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x336a20a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(0.196586094571209, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.19658609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026e4d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90498360; to 'JaxprTracer' at 0x7ffbd009bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3606c870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(0.6801043705994594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.68010437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427e360>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04e0b30; to 'JaxprTracer' at 0x7ffbf04e23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89501950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(3.0028501473131297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(3.00285015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e6b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1050cf40; to 'JaxprTracer' at 0x7ffc1050c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b46ecd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(0.13745191554048425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.13745192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502657e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3018b5b0; to 'JaxprTracer' at 0x7ffc3018bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c21e6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(1.216285663463262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.21628566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015cf30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304bffb0; to 'JaxprTracer' at 0x7ffc304befc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32cc0700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.5241533832173447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.52415338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689cb0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca00a49f0; to 'JaxprTracer' at 0x7ffca00a7420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x454c6460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(0.007725321154548224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00772532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066bf90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca05ffe20; to 'JaxprTracer' at 0x7ffca05fc400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dae31d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(0.5056046932820732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.50560469, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160c10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03dd1c0; to 'JaxprTracer' at 0x7ffcb03de5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c871ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.39206290271181565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.3920629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013db90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd049ebb0; to 'JaxprTracer' at 0x7ffcd049f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f365420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(0.15618976250737998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.15618976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712f60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf43a7b00; to 'JaxprTracer' at 0x7ffcf43a7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b178a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(0.2009758615523609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.20097586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c790>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0645710; to 'JaxprTracer' at 0x7ff9d0645300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x536dd3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(0.08675797029611326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.08675797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8580>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c29da0; to 'JaxprTracer' at 0x7ff7c40c94e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63a24d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(0.24313925079792556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.24313925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ae1d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d319e0; to 'JaxprTracer' at 0x7ff711d32750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x747dda60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(0.15217008853878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.15217009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a21b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd010be70; to 'JaxprTracer' at 0x7ffbd010a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3eaa6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 36.463513318079976
1, epoch_train_loss=36.463513318079976
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
Epoch 2
Epoch 2 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.13429189321976756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.13429189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294180>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca06cc130; to 'JaxprTracer' at 0x7ffca06cdd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd6e7ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(0.4988777132986873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.49887771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c7f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb065c4f0; to 'JaxprTracer' at 0x7ffcb065cd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cf2c8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(0.00570286192591644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00570286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d0c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70689fd0; to 'JaxprTracer' at 0x7ffc7068bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31db5580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(12.637968832829332, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(12.63796883, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029d590>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc505e5620; to 'JaxprTracer' at 0x7ffc505e5670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b1b2500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(1.4609360487509822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.46093605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506786b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0701940; to 'JaxprTracer' at 0x7ffbd0700180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c25a6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.12392691999621727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.12392692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eb850>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900edf80; to 'JaxprTracer' at 0x7ffb900edc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f464960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(0.02903311531193661, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.02903312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f600>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e1440; to 'JaxprTracer' at 0x7ffb307e0b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f0848f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.4345106802114766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.43451068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427eb80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50288180; to 'JaxprTracer' at 0x7ffc5028aca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5943ecd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(0.42809025557904534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.42809026, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407603e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307adfd0; to 'JaxprTracer' at 0x7ffb307ade40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb761570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(0.06497830236835293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.0649783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0254f00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0204d10; to 'JaxprTracer' at 0x7ffaf0204810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1858d6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.019327901882738065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0193279, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294150>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c654360; to 'JaxprTracer' at 0x7ff70c6554e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6efe6240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(0.166147386699627, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.16614739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050ec60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94763920; to 'JaxprTracer' at 0x7ffa94760310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c1f7150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(0.3778318274572546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.37783183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013fa00>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa706a4f90; to 'JaxprTracer' at 0x7ffa706a4590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86acbe30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.009429351206309217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00942935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd5130>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94129760; to 'JaxprTracer' at 0x7ffa941294e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c112070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(0.22741189467111267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.22741189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3800>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4056f420; to 'JaxprTracer' at 0x7ffa4052a3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e30b4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(1.1022579150273468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.10225792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502659a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07b93a0; to 'JaxprTracer' at 0x7ff9f07b9a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d252fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(0.030911035753931396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.03091104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068df70>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c473ef20; to 'JaxprTracer' at 0x7ff7c473ff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1717d6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(0.38372781930388383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.38372782, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405a10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c43b4c20; to 'JaxprTracer' at 0x7ff7c4620a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4620c840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.12539366252746592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.12539366, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877b610>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41c2750; to 'JaxprTracer' at 0x7ff7a41c0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a1bed60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.0263131520982296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02631315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616420>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71283cb80; to 'JaxprTracer' at 0x7ff71283fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c35ead0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.02194539248038699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02194539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016d010>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712cdbce0; to 'JaxprTracer' at 0x7ff712cdbe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81b4250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.058763272626348145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.05876327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df660>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10159940; to 'JaxprTracer' at 0x7ffc10158d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56841e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(0.00987699235721592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00987699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05347a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0406480; to 'JaxprTracer' at 0x7ffca0406fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4686bf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(0.01680209505914289, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.0168021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208bd50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07153f0; to 'JaxprTracer' at 0x7ffca0717920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5680eca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(0.011493879825826657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.01149388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb2c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704f4a90; to 'JaxprTracer' at 0x7ffc704f49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x492a3730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(0.07027999236395263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.07027999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06dbe90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c373fb0; to 'JaxprTracer' at 0x7ff70c3731f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa77bbb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(0.021868004722887434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.021868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463ea70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94337fb0; to 'JaxprTracer' at 0x7ff70c66a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa778e980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 13.739769047172448
2, epoch_train_loss=13.739769047172448
Epoch 3
Epoch 3 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03649608581891926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03649609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac820>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41c1a30; to 'JaxprTracer' at 0x7ffcf41c2c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52f8eeb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.033157692313420355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03315769, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a72d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711dafa10; to 'JaxprTracer' at 0x7ff711dacc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3229430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.016272352498911003, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01627235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8e20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04e0310; to 'JaxprTracer' at 0x7ff70c5a91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bed5680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.025288738723504886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02528874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134ba6e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0090ef0; to 'JaxprTracer' at 0x7ff9f00927f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a48f360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.03518100046450961, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.035181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4617250>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4056fb50; to 'JaxprTracer' at 0x7ffa4056d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72953760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.04029529643886883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0402953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40760b80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7010b2e0; to 'JaxprTracer' at 0x7ffa70109850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75d1d4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.03717580439305297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0371758, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07864d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04806d0; to 'JaxprTracer' at 0x7ffad0480ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3278be10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.038312310387418586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03831231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07872f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad01de8e0; to 'JaxprTracer' at 0x7ffad01ddda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66115ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.03210831263004146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03210831, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8970>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad06c2610; to 'JaxprTracer' at 0x7ffad06c1e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x679e46d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.03842685331134479, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03842685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a29c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb283a7ec0; to 'JaxprTracer' at 0x7ffb283a6ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x414cafe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.03380492357012582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03380492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061b250>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501acf90; to 'JaxprTracer' at 0x7ffb501af5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4227c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.037140730736471415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03714073, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4e90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bdc8130; to 'JaxprTracer' at 0x7ff70bdcb100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fba1f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.03834537067855624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03834537, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bbe20>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70089da0; to 'JaxprTracer' at 0x7ffb902d1170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a4819c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.04235341547300084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04235342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537d00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904cd940; to 'JaxprTracer' at 0x7ffb904cc540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38c24fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.040454010760309245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04045401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46142e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0109c10; to 'JaxprTracer' at 0x7ffbd02a6890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c558c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.03827492219691783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03827492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507137c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90186020; to 'JaxprTracer' at 0x7ffbf0597ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x787af640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.03602016287236959, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03602016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296d30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100c80e0; to 'JaxprTracer' at 0x7ffc502ed170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4526f2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.037497830722792676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03749783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f37e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70495800; to 'JaxprTracer' at 0x7ffc704958f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b9e3990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.03883973202350248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03883973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067aa60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07ae200; to 'JaxprTracer' at 0x7ffcb060ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74f64b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.030272441208203153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03027244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068bbe0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0447b50; to 'JaxprTracer' at 0x7ffcb02218a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a545a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.03657381937419865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03657382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1c20>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4086d40; to 'JaxprTracer' at 0x7ffcf4085d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cdbf520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.042188606865438835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04218861, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06689d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf420c0e0; to 'JaxprTracer' at 0x7ffcf420e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x487c0330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.03787701368453841, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03787701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7610>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41c0a40; to 'JaxprTracer' at 0x7ff7a41c0e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa69882e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.040159758929344945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04015976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013f660>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca005efc0; to 'JaxprTracer' at 0x7ffca005c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95333a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.036105367564003614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03610537, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365bf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca067e480; to 'JaxprTracer' at 0x7ffca067ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x629a3790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0353476696896167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03534767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050dc20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0f6fc0; to 'JaxprTracer' at 0x7ff70c0f53a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69f212d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.037215769819588095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03721577, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0680>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9410ed90; to 'JaxprTracer' at 0x7ffa9410f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8360fa10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 3.099017472067337
3, epoch_train_loss=3.099017472067337
Epoch 4
Epoch 4 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03876006853063787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03876007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182acd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a45cdc10; to 'JaxprTracer' at 0x7ff7a45cc630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd4976d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.035080090638604775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03508009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289780>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf417b7e0; to 'JaxprTracer' at 0x7ffcd0457d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x110fa1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.01758735401877064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01758735, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026cfb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048e840; to 'JaxprTracer' at 0x7ffc5048e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4234c7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.026783437250932934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02678344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05356b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102bf100; to 'JaxprTracer' at 0x7ffc102bf2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e2ba470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.037568817796292106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03756882, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029da40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01294e0; to 'JaxprTracer' at 0x7ffbb0128680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf2b9370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.04154424546631563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04154425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266080>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073f7e0; to 'JaxprTracer' at 0x7ffb7073f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67baab10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.039204787757811874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03920479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619f00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50289800; to 'JaxprTracer' at 0x7ffc50289fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f3ba020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03996410101336729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0399641, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706183d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5020c2c0; to 'JaxprTracer' at 0x7ffc5020ce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62921710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.03468377923667752, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03468378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762cf0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0401800; to 'JaxprTracer' at 0x7ffaf04025c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f0c9af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.04114284771255145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04114285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b5b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06d5a30; to 'JaxprTracer' at 0x7ffaf06d5710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56d4b670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.035996124999120166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03599612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182b3e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad01dccc0; to 'JaxprTracer' at 0x7ffad01dda30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d4a7a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.039716152724900776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03971615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288240>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940cf010; to 'JaxprTracer' at 0x7ffa940cd760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cdc4290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.04108268669390592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04108269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026ed10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7051b330; to 'JaxprTracer' at 0x7ffc7051a070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78659f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.04485324079841485, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04485324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd4530>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40782d90; to 'JaxprTracer' at 0x7ffa40781ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a43e070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.0434184390918095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04341844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029cda0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f058ade0; to 'JaxprTracer' at 0x7ff9f058ac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fd8ee80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.04112043651666229, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04112044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679a10>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa285aff60; to 'JaxprTracer' at 0x7ff9f05b6ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x132192d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.03847663214776082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03847663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0f80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0680c70; to 'JaxprTracer' at 0x7ff9d05f0310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25a591f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.03996627553465401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03996628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407d80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71348db20; to 'JaxprTracer' at 0x7ff713f3eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x937b2ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.041071626782520146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04107163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50713ea0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711ac1030; to 'JaxprTracer' at 0x7ff711ac23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c970af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.032273333352048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03227333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4617790>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404f6340; to 'JaxprTracer' at 0x7ffa404f44f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x351aac10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.038673837222462024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03867384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd1f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb041e160; to 'JaxprTracer' at 0x7ffcb041e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50941310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.04462514509083039, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04462515, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088fa0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3033bdd0; to 'JaxprTracer' at 0x7ffc3033b740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1c57390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.04054395324966498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04054395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013dff0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c2a840; to 'JaxprTracer' at 0x7ff713c2b1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c8d4ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.04227436021126616, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04227436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b90a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a441e5c0; to 'JaxprTracer' at 0x7ff7a441d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x403828d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.03891794498296589, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03891794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9860>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02d39c0; to 'JaxprTracer' at 0x7ff9d01512b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96719120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.03786779342816158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03786779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4f20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ca520; to 'JaxprTracer' at 0x7ffc300c9cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ee13a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.03990743616415304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03990744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115320>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5049cdb0; to 'JaxprTracer' at 0x7ffa5049cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70947c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 3.0880952902983583
4, epoch_train_loss=3.0880952902983583
Epoch 5
Epoch 5 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.040619518649555805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04061952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050df00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd040fe70; to 'JaxprTracer' at 0x7ffcd040e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ab9f770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.03656484641756692, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03656485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1950>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca05ff650; to 'JaxprTracer' at 0x7ffca05ff830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a5bf1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.01892764494524451, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01892764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac670>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca03083b0; to 'JaxprTracer' at 0x7ffca030bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a094ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.02849181816638841, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02849182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb130>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0795800; to 'JaxprTracer' at 0x7ff9f0795710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56e3c450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.0391365613312191, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03913656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bb320>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40287fb0; to 'JaxprTracer' at 0x7ffa40286980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60d94760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.044758085760555365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04475809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50710e30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7010a250; to 'JaxprTracer' at 0x7ffa701091c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79832ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.04118755702341563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04118756, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785fb0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44fc1d0; to 'JaxprTracer' at 0x7ffab44fd9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52059050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.042477964759224336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04247796, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07874f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf030d850; to 'JaxprTracer' at 0x7ffbf030cdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c5a8c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.03739950897537984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03739951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9ca0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0397830; to 'JaxprTracer' at 0x7ffaf0396610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x649ac530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.04299679563763488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0429968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b1a30>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300d3970; to 'JaxprTracer' at 0x7ffa503f96c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fd4d9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.03804015076535887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03804015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b42a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30550860; to 'JaxprTracer' at 0x7ffb30551b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63bd8550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.041776447475916, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04177645, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b06e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0360630; to 'JaxprTracer' at 0x7ffbb03632e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x287e0d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.04311518698298111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04311519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702af930>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01549f0; to 'JaxprTracer' at 0x7ffbb0157d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c5413a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.04712398892858254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04712399, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05358f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506fa6b0; to 'JaxprTracer' at 0x7ffb506fb790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x617309f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.045624040772395756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04562404, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088ce0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc305454e0; to 'JaxprTracer' at 0x7ffad04a51c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x795476b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.04308846837609943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04308847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46158c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04b9a30; to 'JaxprTracer' at 0x7ffbd07637e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b660c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.04066519808537846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0406652, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762120>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1012bc40; to 'JaxprTracer' at 0x7ffc10129da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc44b170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.041851304936952285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0418513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061a290>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04dbe20; to 'JaxprTracer' at 0x7ffcd04db420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ef29280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.0437547377866787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04375474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502670c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0148ea0; to 'JaxprTracer' at 0x7ff713716430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x502a6680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.034440234269261655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03444023, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678b80>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4391e90; to 'JaxprTracer' at 0x7ff7a4391e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a8ff0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.040739899549470104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0407399, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a2b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3051acf0; to 'JaxprTracer' at 0x7ffc3051ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86c4d380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.04688664670440413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04688665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06696b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5045cb80; to 'JaxprTracer' at 0x7ffc5045c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ec35850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.043132122239374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04313212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8bc0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ad9710; to 'JaxprTracer' at 0x7ff712adade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92da15d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.04430202299682624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04430202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a73d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0697ce0; to 'JaxprTracer' at 0x7ffaf0696c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x568190b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.041603714192241174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04160371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013ea90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025df80; to 'JaxprTracer' at 0x7ffcb025ede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7227b170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.04021316502747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04021317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162c10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30577650; to 'JaxprTracer' at 0x7ffb305778d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77fdfbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.04253987333272079, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04253987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755030>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa282ee4d0; to 'JaxprTracer' at 0x7ffa282ee340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99e7bd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 3.077549547870361
5, epoch_train_loss=3.077549547870361
Epoch 6
Epoch 6 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.042641662225996295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04264166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd740>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70638f90; to 'JaxprTracer' at 0x7ffc7063ade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x372d6990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.03827965695790706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03827966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a030>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71279a340; to 'JaxprTracer' at 0x7ff712799350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41790210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.02006915530084538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02006916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066bf10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb065e430; to 'JaxprTracer' at 0x7ffcb065d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b134c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.030005807817216016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03000581, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502656c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca06ce980; to 'JaxprTracer' at 0x7ffca06cef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x786d52d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.040886885227857335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04088689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ebb00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02db290; to 'JaxprTracer' at 0x7ffbd02daed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x752aff20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.046897801610808094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0468978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785ae0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70369e90; to 'JaxprTracer' at 0x7ffb703698a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x301c000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.043300704861703385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0433007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9f00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4090450; to 'JaxprTracer' at 0x7ff7c4093a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39b40260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.04449572262309619, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04449572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bb340>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504d5da0; to 'JaxprTracer' at 0x7ffb504d4770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a50cdd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.039857232436536764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03985723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bba20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501f2cf0; to 'JaxprTracer' at 0x7ffb501f3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bcc5e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.04496245619672767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04496246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bfa0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2862ae80; to 'JaxprTracer' at 0x7ff712b4e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3de7edf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.03988354872252954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03988355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dede0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e4310; to 'JaxprTracer' at 0x7ff9f07e7290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55474bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.04386954203336941, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04386954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b650>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712832980; to 'JaxprTracer' at 0x7ff712830e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f9bbc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.04515512170094726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04515512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0669f80>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70639440; to 'JaxprTracer' at 0x7ffa7063bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x544c7450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.04944386710293503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04944387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295660>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb04c0360; to 'JaxprTracer' at 0x7ffbb04c19e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x414bd600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.0477654820743319, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04776548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8d90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a411c400; to 'JaxprTracer' at 0x7ff9d01d30b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9edcb120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.045056532011189296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04505653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4640>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4074b8d0; to 'JaxprTracer' at 0x7ffa4074b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bcda950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.042838992421860365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04283899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50710480>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0438e00; to 'JaxprTracer' at 0x7ff9d04393f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cb4cd70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.04380230068294282, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0438023, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a6f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713773c90; to 'JaxprTracer' at 0x7ff713772bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51ecbf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.04608593836849081, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04608594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9370>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71368cd10; to 'JaxprTracer' at 0x7ff71368e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1321ab70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.036407261444296374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03640726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ae820>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca05feb60; to 'JaxprTracer' at 0x7ffca05fef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75429e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.04288249424265058, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04288249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015ff80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a446d580; to 'JaxprTracer' at 0x7ff7a446ee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84e0aa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.049188812898514206, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04918881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2c40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c42fad90; to 'JaxprTracer' at 0x7ff7c42f93f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a7561e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.04562247725235733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04562248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067aa20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04b2430; to 'JaxprTracer' at 0x7ffcb04b0630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f47ed10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.046488716841409344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04648872, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050df10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30518cc0; to 'JaxprTracer' at 0x7ffc305193a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44f83490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.044102212479014295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04410221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427e3e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0221350; to 'JaxprTracer' at 0x7ffcd0223420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x721dc130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.04248462382123275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04248462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f2c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127d6340; to 'JaxprTracer' at 0x7ff7127d5580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x861b8ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.0450605297148955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04506053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d3e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4065800; to 'JaxprTracer' at 0x7ffb300671f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40016be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 3.0674438637349435
6, epoch_train_loss=3.0674438637349435
Epoch 7
Epoch 7 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.04490766372664374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04490766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40760a40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45eac50; to 'JaxprTracer' at 0x7ff7c45e8f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b331360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.040514552737716196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04051455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46157a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca076f100; to 'JaxprTracer' at 0x7ffca076e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b210870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.021078521710326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02107852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427fca0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287ec4f0; to 'JaxprTracer' at 0x7ffa287ef7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x421fb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.031525470635403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03152547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3080>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0794130; to 'JaxprTracer' at 0x7ff9f07972e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24f07e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.0432677884241873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04326779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e83c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01d32e0; to 'JaxprTracer' at 0x7ff9d01d3380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b273620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.04941635260808246, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04941635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712089870>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7018aca0; to 'JaxprTracer' at 0x7ffa70188040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a249030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.04565758001081669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04565758, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a5e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab425c630; to 'JaxprTracer' at 0x7ffab425d7b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x532a7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.046867054192374684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04686705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a850>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4585d50; to 'JaxprTracer' at 0x7ff7c45840e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d027e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.04212258261513312, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04212258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eb310>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0395e40; to 'JaxprTracer' at 0x7ffaf0394ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f6a3c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.047647867210471845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04764787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757270>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71188d760; to 'JaxprTracer' at 0x7ff71188ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47528170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.042057509862775656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04205751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161510>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706bb9c0; to 'JaxprTracer' at 0x7ffb706ba390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x291f9930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.04644219930747936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0464422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46153b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702bc590; to 'JaxprTracer' at 0x7ffb307d6a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x393928d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.04780812712335491, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04780813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427de70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706f1bc0; to 'JaxprTracer' at 0x7ffb706f3d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x937ff170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.05214362375379863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05214362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0534200>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00d3010; to 'JaxprTracer' at 0x7ffbf00d3380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99e38290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.05050997884223827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05050998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8210>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb012b2e0; to 'JaxprTracer' at 0x7ffa700df5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x207acba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.047706485303078076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04770649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb870>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307d54e0; to 'JaxprTracer' at 0x7ffc307d7d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58c3a6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.045322414997057275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04532241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9480>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7069c0e0; to 'JaxprTracer' at 0x7ffc7069e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56b92210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.046353225308080406, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04635323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5120>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b52a70; to 'JaxprTracer' at 0x7ffcb065ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fccb7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.04863355052120328, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04863355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502677c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c476cae0; to 'JaxprTracer' at 0x7ff7c476e980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aee8120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.03834349659073469, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0383435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c710>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0401490; to 'JaxprTracer' at 0x7ff7a43b98a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99ef10b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.045300806948208164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04530081, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678ef0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712aaf330; to 'JaxprTracer' at 0x7ff712aad8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59da9560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.051875986001606096, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05187599, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5430>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713289da0; to 'JaxprTracer' at 0x7ff71328af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85a19690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.04819448230775613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04819448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295c30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc703277e0; to 'JaxprTracer' at 0x7ffc70327ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8578cf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.049007607143209994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04900761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a3f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5063ae30; to 'JaxprTracer' at 0x7ffc5063b010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90329020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.046660910185594984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04666091, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de500>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4056dc60; to 'JaxprTracer' at 0x7ffa4056d170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dfaa710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.04494418978108883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04494419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02572e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30066430; to 'JaxprTracer' at 0x7ffb30064c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73f8c8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.04761287545622824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04761288, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e050>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141d92b0; to 'JaxprTracer' at 0x7ff7117d3600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cc91310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 3.0556398033330665
7, epoch_train_loss=3.0556398033330665
Epoch 8
Epoch 8 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.004628272709506565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00462827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463c610>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0431260; to 'JaxprTracer' at 0x7ffcd0431e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ef81b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.03836499552127136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.038365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8f50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e49f0; to 'JaxprTracer' at 0x7ff7139e6430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bbedf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.022103431849924537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02210343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dca00>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf414a3e0; to 'JaxprTracer' at 0x7ffcf4149ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f3b20c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.03317164333045126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03317164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536390>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4713ec0; to 'JaxprTracer' at 0x7ffab4711440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59137be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.038784997980208874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.038785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066aba0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02a97b0; to 'JaxprTracer' at 0x7ffbb02a8ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x364652f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.026276811249092362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.02627681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f27b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7075bc90; to 'JaxprTracer' at 0x7ffb7075acf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84b74170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.013824993813121488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01382499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163e20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f52840; to 'JaxprTracer' at 0x7ff712f527a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x407210f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.013734459240911937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.01373446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160860>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30623790; to 'JaxprTracer' at 0x7ffc30623880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40b4ecc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.04441090478743998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0444109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bbee0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504d62f0; to 'JaxprTracer' at 0x7ffb504d6610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e0f3170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.04617423663884415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04617424, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bc10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0713f10; to 'JaxprTracer' at 0x7ffad0713b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6032f5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.03918864097556648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03918864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f220>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b235b0; to 'JaxprTracer' at 0x7ff711b21210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48adc340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.04654821564332602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04654822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07abbc0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa282fbfb0; to 'JaxprTracer' at 0x7ffa282faac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa46769c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.04521861544969476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04521862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dcb40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7039a7f0; to 'JaxprTracer' at 0x7ffa7039b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6915a950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(0.02266914533192879, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.02266915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050eec0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3055bdd0; to 'JaxprTracer' at 0x7ffb305596c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42d2c550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.043014640829370704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04301464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06687f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70099490; to 'JaxprTracer' at 0x7ffa7009bb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d3fb680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.043493922251078995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04349392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265d10>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f0fe0; to 'JaxprTracer' at 0x7ff9d05f04a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28d968d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.046526934267416636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04652693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786050>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fdb5b0; to 'JaxprTracer' at 0x7ff711fdb290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98155240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.04453909750405027, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0445391, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6ba0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124fec00; to 'JaxprTracer' at 0x7ff7a4666ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9587b2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.004128991324081336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.00412899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b9170>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704946d0; to 'JaxprTracer' at 0x7ffc70497bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10730000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.04043231051571566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04043231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679870>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5045ef70; to 'JaxprTracer' at 0x7ffc5045f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86a86db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.026349097499574283, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0263491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702af2d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902aa020; to 'JaxprTracer' at 0x7ffb902aa930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35214380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.01181794509950597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.01181795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1800>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d043a480; to 'JaxprTracer' at 0x7ff9d0438e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fcb9fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.026171964289467615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02617196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a540>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f98a90; to 'JaxprTracer' at 0x7ff712f9bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f804fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.009420256786971276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00942026, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296c20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713771c60; to 'JaxprTracer' at 0x7ff713772ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bbefba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.04850597754142307, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04850598, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688150>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287961b0; to 'JaxprTracer' at 0x7ffa28796020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99aa3050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.04636340506792737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04636341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4617d20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901114e0; to 'JaxprTracer' at 0x7ffb90111940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45575120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.033104600587517526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0331046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407980>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5c31f0; to 'JaxprTracer' at 0x7ff70c5c36f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47dd4a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 3.195005351407413
8, epoch_train_loss=3.195005351407413
Epoch 9
Epoch 9 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.049711949385861494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04971195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678bf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca063abb0; to 'JaxprTracer' at 0x7ffca0639850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7247bde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.04461086801008689, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04461087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407629f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5050aa20; to 'JaxprTracer' at 0x7ffb5050a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4628ed30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.023207030216033077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02320703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050cef0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0109800; to 'JaxprTracer' at 0x7ff7132ca1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x634afbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.03517886485568595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03517886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b500>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f642c0; to 'JaxprTracer' at 0x7ff713f65cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45dd4380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.047864866415158414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04786487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208bd40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0241530; to 'JaxprTracer' at 0x7ffaf0622ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b5a33d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.054936112223840726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05493611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3a30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71253eb60; to 'JaxprTracer' at 0x7ff71253c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d34790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.05058502089263154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05058502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f16d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad043b830; to 'JaxprTracer' at 0x7ffad043b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60b728e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05203538890361262, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05203539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0700>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0644040; to 'JaxprTracer' at 0x7ff9d0644ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61926920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.04646263678988601, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04646264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b9a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28371030; to 'JaxprTracer' at 0x7ffb28371670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1073d270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.05283845561726609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05283846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e280>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502494e0; to 'JaxprTracer' at 0x7ffc5024b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72c8ce60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.046736673036034806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04673667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067b660>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb076c0e0; to 'JaxprTracer' at 0x7ffcb076d760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63bed360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.051497395716381816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0514974, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761cb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb074e9d0; to 'JaxprTracer' at 0x7ffbb074ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3ca4bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.05300032894135454, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05300033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050e370>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0760680; to 'JaxprTracer' at 0x7ffbd07627a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x512153a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.058066937359071216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05806694, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07abb60>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702cbc40; to 'JaxprTracer' at 0x7ffb702c8360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x131d5cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.05603304499920666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05603304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088530>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102af290; to 'JaxprTracer' at 0x7ffa4074b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74816ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.052821305859196, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05282131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a57a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940f9530; to 'JaxprTracer' at 0x7ffb900b4ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45d058b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.05025839230134793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05025839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e96d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf02070b0; to 'JaxprTracer' at 0x7ff711d593a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d6edd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.05141114088843868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05141114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266480>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf072f970; to 'JaxprTracer' at 0x7ffbf072f1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3807a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.054029367240459446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05402937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05375d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0433330; to 'JaxprTracer' at 0x7ffcd0431c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ef7fb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.04264113942846534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04264114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182ac00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50763d80; to 'JaxprTracer' at 0x7ffb50760fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37469610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.05019539899162656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0501954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289740>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c66b790; to 'JaxprTracer' at 0x7ff70c668810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86346eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.05776939113139793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05776939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619c50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40286c00; to 'JaxprTracer' at 0x7ffa40284720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9025e310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.053455595180669266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0534556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9d70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02b4360; to 'JaxprTracer' at 0x7ffbf02b4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x286d2650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.05446945439584535, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05446945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07ab9f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712806890; to 'JaxprTracer' at 0x7ff7128071f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6322e820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.05163983988406875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05163984, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f830>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127d45e0; to 'JaxprTracer' at 0x7ff7127d7790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4435ee30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.049742902771787854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0497429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd6070>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ccd2b0; to 'JaxprTracer' at 0x7ff713ccd3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82c960e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.052780825820657885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05278083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f420>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4623c90; to 'JaxprTracer' at 0x7ffbb02cbab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6973e280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 3.0312247331361615
9, epoch_train_loss=3.0312247331361615
Epoch 10
Epoch 10 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05263931577026897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05263932, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d950>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf403a520; to 'JaxprTracer' at 0x7ffcf4038090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15be84c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.04702076546559711, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04702077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94364b60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca04cefc0; to 'JaxprTracer' at 0x7ffca04cd800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a3b9100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.024559479930370224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02455948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06da610>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41f22f0; to 'JaxprTracer' at 0x7ffcf41f1490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cecf130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.03757913177993576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03757913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828e10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d87510; to 'JaxprTracer' at 0x7ff711d86b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fb26840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.05043378175246202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05043378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6080>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41a7740; to 'JaxprTracer' at 0x7ffcf41a76f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35847d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.05819470847567502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05819471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f2c50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7033ba60; to 'JaxprTracer' at 0x7ffb7033aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ec67970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.05349969325489387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05349969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bbc70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d068cc20; to 'JaxprTracer' at 0x7ff9d068d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37c6ed90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05510913516191785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05510914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9940>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053f380; to 'JaxprTracer' at 0x7ffb9053e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37f94040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.0490485200410433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04904852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8810>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0399940; to 'JaxprTracer' at 0x7ffbb0399490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c0d1920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.05569556045748168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05569556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bd30>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04b9490; to 'JaxprTracer' at 0x7ffcd04b8130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49c83c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.0495755808975062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04957558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015f390>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94063380; to 'JaxprTracer' at 0x7ffa940604f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b573860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.054365470473619705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05436547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367c50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505236a0; to 'JaxprTracer' at 0x7ffb50520130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10bc3890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.0558573870256578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05585739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d9640>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94707ec0; to 'JaxprTracer' at 0x7ffa94704db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aae60a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.06152587687275709, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06152588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067acd0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501adee0; to 'JaxprTracer' at 0x7ffa501adb70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6315a040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.05895414439372524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05895414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4950>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a414fba0; to 'JaxprTracer' at 0x7ff7c473df30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x938aa240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.05551117482169171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05551117, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50264690>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304e2610; to 'JaxprTracer' at 0x7ffa94293970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa734a3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.05310065424887289, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05310065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a2ef0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9049be20; to 'JaxprTracer' at 0x7ffb90498d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76777ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.054246056780770095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05424606, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088880>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30552250; to 'JaxprTracer' at 0x7ffb30553dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b2d02d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.05719671944751433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05719672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1f90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0519620; to 'JaxprTracer' at 0x7ffc1012b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65aecd60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.04537421880197697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04537422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb2a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca063a160; to 'JaxprTracer' at 0x7ffca063aca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79c1d890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.05298721024351541, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05298721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050e150>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c370040; to 'JaxprTracer' at 0x7ff70c3709f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x457dc9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.061204734985146315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06120473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294c50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47ba520; to 'JaxprTracer' at 0x7ffab47ba3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6623c4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.05651670852239964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05651671, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd700>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb041d490; to 'JaxprTracer' at 0x7ffcb041dc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47eb82e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.057731497785512995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0577315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40763540>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c437c0e0; to 'JaxprTracer' at 0x7ff7c437ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58a53490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.05451642374300907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05451642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0117c60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326bdd0; to 'JaxprTracer' at 0x7ff71326bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e788520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.05252606395392942, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05252606, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255a20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02eaac0; to 'JaxprTracer' at 0x7ffbf02e8090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x703850d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.05578682742060653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05578683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702adbe0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad046dc10; to 'JaxprTracer' at 0x7ffad046e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7031f270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 3.017078513709505
10, epoch_train_loss=3.017078513709505
Epoch 11
Epoch 11 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.07653917254102716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07653917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd4e80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504ddc10; to 'JaxprTracer' at 0x7ffa504dee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23394630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.05151542960578828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05151543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b8c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712aafce0; to 'JaxprTracer' at 0x7ff712aae2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d95ccf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.026064915338577112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02606492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679f70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101286d0; to 'JaxprTracer' at 0x7ffc1012b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b611bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.039024490309582806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03902449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8e10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132289a0; to 'JaxprTracer' at 0x7ff71322a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7539e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.05616308799917066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05616309, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b90d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70098f90; to 'JaxprTracer' at 0x7ff9f0091990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74f91c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.09014709797744322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0901471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0a30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb11c0; to 'JaxprTracer' at 0x7ff713eb28e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f4a1a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.07002104531181018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07002105, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f3e30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90099580; to 'JaxprTracer' at 0x7ffb9009a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6621f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.06015917643047378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06015918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f39f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad020f1f0; to 'JaxprTracer' at 0x7ffad020c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35de65b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.05152210734929374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05152211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7330>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03bce50; to 'JaxprTracer' at 0x7ffaf03beac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x849151c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.06037625737043139, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06037626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016fc30>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501f1490; to 'JaxprTracer' at 0x7ffb501f13a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a350c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.05327397701588479, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05327398, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd5d10>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50217920; to 'JaxprTracer' at 0x7ffb50217970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x383394a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.05821897843954248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05821898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289b40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702bc0e0; to 'JaxprTracer' at 0x7ffc702be7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6295dd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.06121754020329051, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06121754, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067b3d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705415d0; to 'JaxprTracer' at 0x7ffb70540860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4a0d6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.09707147491741826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09707147, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365a20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7018a1b0; to 'JaxprTracer' at 0x7ffa70189e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8af083e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.06695288866941025, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06695289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10678620>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10181620; to 'JaxprTracer' at 0x7ffc10181080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95de6ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.06156977046763671, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06156977, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208ae60>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71283e660; to 'JaxprTracer' at 0x7ff71283dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95df8f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.05634227503728991, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05634228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163720>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a441f7e0; to 'JaxprTracer' at 0x7ff7a441fa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95f18c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.058986852642354794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05898685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066a690>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca06373d0; to 'JaxprTracer' at 0x7ffca0636200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x608042a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.08177730892555767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08177731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7118297c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71368cea0; to 'JaxprTracer' at 0x7ff71368e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22eb4120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.046621473625225965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04662147, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061bd80>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fa47c0; to 'JaxprTracer' at 0x7ff711fa6750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92424d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.06248528641754035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06248529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de8b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0794e50; to 'JaxprTracer' at 0x7ff9f0794180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fbf1e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.09183625800423352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09183626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711b50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501af790; to 'JaxprTracer' at 0x7ffa501af150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e1fc500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.06973747685115743, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06973748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013cc70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506c1cb0; to 'JaxprTracer' at 0x7ffa506c11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87ac8a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.07832661522363975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07832662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365660>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0554ea0; to 'JaxprTracer' at 0x7ffbf0554450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64febe90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.05776982767094902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05776983, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d420>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa402548b0; to 'JaxprTracer' at 0x7ffa40256700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ec47120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.055708059829263516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05570806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4614f10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47f91c0; to 'JaxprTracer' at 0x7ff7c47fa070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x814561b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.06592396779091424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06592397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688490>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a415f470; to 'JaxprTracer' at 0x7ff7a415f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64382d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.950011865114427
11, epoch_train_loss=2.950011865114427
Epoch 12
Epoch 12 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.524353352244248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52435335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02558d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d31800; to 'JaxprTracer' at 0x7ff711d32bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38284af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5945712534982934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59457125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427c630>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50205bc0; to 'JaxprTracer' at 0x7ffc1046da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1796bff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.049046666649726976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04904667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786e60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900ed350; to 'JaxprTracer' at 0x7ffb900ec040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f2210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-12.861697428082492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-12.86169743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711e20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad01b5d00; to 'JaxprTracer' at 0x7ffad01b5800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36ba07e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-1.5333281559280414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.53332816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70618430>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100c94e0; to 'JaxprTracer' at 0x7ffc100cb1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314034d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.2330056120284208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23300561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5510>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70339440; to 'JaxprTracer' at 0x7ffb70338680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd40ab80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.16277060103125016, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1627706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bb5e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705f0950; to 'JaxprTracer' at 0x7ffca07a9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x495f72d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5378208312432442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53782083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134baa50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d068ff10; to 'JaxprTracer' at 0x7ff9d068f240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49f720d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.5185234539267134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51852345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba7b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07a2d90; to 'JaxprTracer' at 0x7ffad07a21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60316c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.16856854518971898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16856855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bdc0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0398130; to 'JaxprTracer' at 0x7ffbd02d94e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa34fd270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06617193748180047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06617194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255df0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2860c5e0; to 'JaxprTracer' at 0x7ffb2860f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa34d8040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.2664671357796543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26646714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427e900>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa282f9440; to 'JaxprTracer' at 0x7ffa282f9f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73a50ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.34681300930380676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34681301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786df0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307107c0; to 'JaxprTracer' at 0x7ffc30711710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22d069f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.19094479562899638, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1909448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd52f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0699490; to 'JaxprTracer' at 0x7ffa404c1f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85490f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.34046163004639257, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34046163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619c70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07b9b20; to 'JaxprTracer' at 0x7ff9f07bb830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32f37730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-1.2129767997671475, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.2129768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05348e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940cda80; to 'JaxprTracer' at 0x7ffa940cd760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d2ec2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.12264544219390132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12264544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f3650>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132c8270; to 'JaxprTracer' at 0x7ffb283a5c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c3009d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.5109217511642433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51092175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208bf80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90546bb0; to 'JaxprTracer' at 0x7ffb90544810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa28f1ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.2827241709539906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28272417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067add0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30748b30; to 'JaxprTracer' at 0x7ffc30749b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31bcabe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.0525999151917464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05259992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8ca0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f0c950; to 'JaxprTracer' at 0x7ff713f0e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e5cf6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.09166311137708501, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09166311, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02968f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca076cbd0; to 'JaxprTracer' at 0x7ffca0439a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa42fa370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.24835864256506435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24835864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679b50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048de90; to 'JaxprTracer' at 0x7ffa70188ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0ba5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.13661070845845907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13661071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8580>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117feac0; to 'JaxprTracer' at 0x7ff7117ff920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70169450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17367228673712348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17367229, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd4980>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702d2d40; to 'JaxprTracer' at 0x7ffb702d13f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x858837a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1058743311896009, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10587433, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877b180>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb041c860; to 'JaxprTracer' at 0x7ffcb041d210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b89bf40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.16149660136847696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1614966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9590>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e6de0; to 'JaxprTracer' at 0x7ff7139e7a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa79334b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.14039215196036026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14039215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404280>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9404c180; to 'JaxprTracer' at 0x7ffa9404c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45633ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 12.80782050042132
12, epoch_train_loss=12.80782050042132
Epoch 13
Epoch 13 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10390286122691673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10390286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407639e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307cf920; to 'JaxprTracer' at 0x7ffb307ccf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6901a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.058146285686228746, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05814629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289c90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c669c60; to 'JaxprTracer' at 0x7ff70c66a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x260c34c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.029252055124017153, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02925206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067ade0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41c3970; to 'JaxprTracer' at 0x7ff7c4799f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dba1110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.04347183009344738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04347183, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067a470>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c7e5c0; to 'JaxprTracer' at 0x7ff713c7f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8517f6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.06396174700619346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06396175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088800>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0192840; to 'JaxprTracer' at 0x7ff9d01904f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x969fa7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1314789834559874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13147898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bb240>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ed9e90; to 'JaxprTracer' at 0x7ff713ed8400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e3dae20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.09100917993412565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09100918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a4b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ebbf0; to 'JaxprTracer' at 0x7ffbb02ebe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67492d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11549589504134405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1154959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182b800>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504a3bf0; to 'JaxprTracer' at 0x7ffa504a2b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9534e4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.057584062149737984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05758406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507120b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30621a30; to 'JaxprTracer' at 0x7ffc30623740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa49cbd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.06789240431253389, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0678924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46154e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0589530; to 'JaxprTracer' at 0x7ff9f058a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x183536f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06214204567543866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06214205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761ad0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50699f80; to 'JaxprTracer' at 0x7ffb50699710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b07f450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.06517264014743036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06517264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b520>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307d5170; to 'JaxprTracer' at 0x7ffb307d58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8af1d8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.06942760547322484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06942761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067afe0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c29da0; to 'JaxprTracer' at 0x7ff713c29b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3df8a3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.13506909110276652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13506909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3800>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30153510; to 'JaxprTracer' at 0x7ffc30152a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e65bc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.07758365855189148, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07758366, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bada0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d5ec00; to 'JaxprTracer' at 0x7ff712d5eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6de2aa00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.07015236562839068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07015237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b96e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4294270; to 'JaxprTracer' at 0x7ffcf4297bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f496730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.06284103736027825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06284104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7870>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf031b600; to 'JaxprTracer' at 0x7ffbf031b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c93c870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.06659316682248645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06659317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d9ed0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04d5e40; to 'JaxprTracer' at 0x7ffad04d7b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dbc88f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.11199490815058842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11199491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8f80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3b6b60; to 'JaxprTracer' at 0x7ff713cd6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11ddc3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.052698366628312295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05269837, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01174c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ccd3f0; to 'JaxprTracer' at 0x7ff713cce610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e4db180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0799609871531688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07996099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050e2f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940a1f80; to 'JaxprTracer' at 0x7ffa940a1a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77547870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.12577941042624952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12577941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427cb60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02fd620; to 'JaxprTracer' at 0x7ffbf02fd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x379794e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.0863368938637835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08633689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8280>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50763970; to 'JaxprTracer' at 0x7ffb50763f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x697e7890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.10210918562723013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10210919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6480>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb066e8e0; to 'JaxprTracer' at 0x7ffbb066da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x715eb030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0645090218515951, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06450902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702af860>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa401fb8d0; to 'JaxprTracer' at 0x7ffa401f8180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8618e7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0621037598654461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06210376, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f650>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94037b00; to 'JaxprTracer' at 0x7ffa94036e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8591efc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07949911420604255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07949911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029def0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4231a80; to 'JaxprTracer' at 0x7ffab4231bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x783f8b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.8514339758255516
13, epoch_train_loss=2.8514339758255516
Epoch 14
Epoch 14 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.087855942587347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08785594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f1070>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca04cdcb0; to 'JaxprTracer' at 0x7ffca04cebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70b3c830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.05781349685266062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0578135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0535c90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4392ed0; to 'JaxprTracer' at 0x7ff7a4390270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30e13910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.03033801137002522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03033801, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a1a50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506faf70; to 'JaxprTracer' at 0x7ffb506fb9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b086cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.04429333296361008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04429333, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427c7c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125bda30; to 'JaxprTracer' at 0x7ff7125bd440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e2a4390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.06291267139519836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06291267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943646b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0245fd0; to 'JaxprTracer' at 0x7ffca0245800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f96e870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1068551928619891, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10685519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061b800>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02a8f40; to 'JaxprTracer' at 0x7ffbb02aaa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e9a2a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.08089785899033812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08089786, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bbe50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28796570; to 'JaxprTracer' at 0x7ffa28794810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ca6e050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09578638109949929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09578638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bb6e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07aad90; to 'JaxprTracer' at 0x7ffca07a9580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ca570d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.059587308202784815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05958731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b0d00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712807510; to 'JaxprTracer' at 0x7ff712804720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3698e7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.06784057946598984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06784058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b7b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c654b30; to 'JaxprTracer' at 0x7ff70c654f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54a2f730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06153169804413116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0615317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f3f40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0732890; to 'JaxprTracer' at 0x7ffbd0733ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79c51810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.06576534010599844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06576534, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536ae0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd034e160; to 'JaxprTracer' at 0x7ffbd034e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48be1f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.06917470802957716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06917471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a39c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94329a80; to 'JaxprTracer' at 0x7ffbf0557100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e68d8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.11079952416531613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11079952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40763740>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010a5c0; to 'JaxprTracer' at 0x7ffbf010a3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32ea6110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.07577165784656592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07577166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367c20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4066930; to 'JaxprTracer' at 0x7ff7c4065210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86455290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.06942275918161821, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06942276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507106a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702c8860; to 'JaxprTracer' at 0x7ffc504cd1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48ba1980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.06387678356812185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06387678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502653a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70759490; to 'JaxprTracer' at 0x7ffc702f1080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47300600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.06646780523171829, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06646781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2980>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70639210; to 'JaxprTracer' at 0x7ffc7063a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d4417d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.09521969884528976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0952197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10678e70>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127d5a30; to 'JaxprTracer' at 0x7ff7127d4450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6b5b5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.05407658318445179, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05407658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8f60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711ac2890; to 'JaxprTracer' at 0x7ff711ac2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a0b2860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.07417643703996524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07417644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678e10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0732660; to 'JaxprTracer' at 0x7ffca0732390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a991570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.10519217976956163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10519218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd72f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb070a840; to 'JaxprTracer' at 0x7ffbb0709710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a96cb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.07991747215505043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07991747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427d5d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3b4180; to 'JaxprTracer' at 0x7ff70c3b45e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a575170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.08931079109465023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08931079, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42899d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad075c9f0; to 'JaxprTracer' at 0x7ffad075f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d023cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.06615991825062582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06615992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5080>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4104900; to 'JaxprTracer' at 0x7ff7c4104630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6719c810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.0633723690706537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06337237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162390>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0607560; to 'JaxprTracer' at 0x7ffab4232700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d568780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07563123735987409, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07563124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757180>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713693330; to 'JaxprTracer' at 0x7ff713692610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4081ca80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.8941086973692856
14, epoch_train_loss=2.8941086973692856
Epoch 15
Epoch 15 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.08005012376204852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08005012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5610>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30519da0; to 'JaxprTracer' at 0x7ffbb066d7b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e926c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.058396793635762737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05839679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015cb00>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70286a70; to 'JaxprTracer' at 0x7ffc70285fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49e09c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.031388104770486945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0313881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d0b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04ba1b0; to 'JaxprTracer' at 0x7ffbd04b96c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bad25a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.04517153545648017, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04517154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296520>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306f7420; to 'JaxprTracer' at 0x7ffc306f7970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa10455f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.06322374176651575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06322374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b0150>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70672480; to 'JaxprTracer' at 0x7ffa70670f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf5560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.09459804728001937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09459805, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8e70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a414e8e0; to 'JaxprTracer' at 0x7ffca02d8950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ad51480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.07628067257700481, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07628067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aabb0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306807c0; to 'JaxprTracer' at 0x7ffc30683650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35ce38a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.08606612699075245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08606613, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aaec0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712560b80; to 'JaxprTracer' at 0x7ff712562d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49419ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.06158525115120519, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06158525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115700>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9050d3a0; to 'JaxprTracer' at 0x7ffb9050d0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25489ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.0687801348360609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06878013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704045c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f19670; to 'JaxprTracer' at 0x7ff7c437dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70c7c1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06208908733340935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06208909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6d60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021d3a0; to 'JaxprTracer' at 0x7ffb5021dbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cc23840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.06702981660708544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06702982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d230>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7045ea20; to 'JaxprTracer' at 0x7ffc7045e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a08a120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.07011567938311837, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07011568, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026f330>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70067dd0; to 'JaxprTracer' at 0x7ffc70067740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e31f0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.09877841596671494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09877842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779720>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0444b30; to 'JaxprTracer' at 0x7ffcb0445cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x366a33f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.07591140059618032, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0759114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10678ca0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106f3560; to 'JaxprTracer' at 0x7ffbb0157dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89737070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.07015633648702392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07015634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eb780>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50206160; to 'JaxprTracer' at 0x7ffa50204220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e112dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.0653646004187865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0653646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619d90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5069cf90; to 'JaxprTracer' at 0x7ffc5069f1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84a286b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.06739161148147171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06739161, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787f00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502884f0; to 'JaxprTracer' at 0x7ffc5028b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a1e4e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.0871895015283458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0871895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255c80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4056d580; to 'JaxprTracer' at 0x7ff7a45ce660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84ce4170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.055496716512536036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05549672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a1f30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71283d990; to 'JaxprTracer' at 0x7ff71283f420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c48bab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.07193315286750623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07193315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a65f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141cefc0; to 'JaxprTracer' at 0x7ff7141cf010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9947cfa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.095146694857999, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09514669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05368c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71353fd80; to 'JaxprTracer' at 0x7ff71353e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eb6a270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.077449842644613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07744984, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eac30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5042af20; to 'JaxprTracer' at 0x7ffc5042b1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x697d53a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.08331703679469168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08331704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778a10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03199e0; to 'JaxprTracer' at 0x7ffbf0318d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa429af30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.06807498252604383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06807498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068c0e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304e33d0; to 'JaxprTracer' at 0x7ffc304e0bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa207d3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.06499525357522543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06499525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06693c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a43b8d60; to 'JaxprTracer' at 0x7ff9f071f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa201b410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07451909347985597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07451909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c680>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2818cae0; to 'JaxprTracer' at 0x7ffb2818c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bd1e710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.912757815347292
15, epoch_train_loss=2.912757815347292
Epoch 16
Epoch 16 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.07612832615707535, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07612833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829680>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab429fd80; to 'JaxprTracer' at 0x7ffab429e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ab20070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.05942569892155695, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0594257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d8140>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010ae80; to 'JaxprTracer' at 0x7ffbf0109fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x659b88b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.03236729579420675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0323673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068afd0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04b1990; to 'JaxprTracer' at 0x7ffcb04b1850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48350b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.04611314265692057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04611314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a00f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa943629d0; to 'JaxprTracer' at 0x7ffa943620c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f0f5b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.06418623426024961, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06418623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0254ef0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0156b60; to 'JaxprTracer' at 0x7ffb5050a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a212ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.08816112557292843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08816113, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07ab720>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102aee80; to 'JaxprTracer' at 0x7ffc102af9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72c0d850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.07423704084098966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07423704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9340>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f851c0; to 'JaxprTracer' at 0x7ff712f86340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79407600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.08106044607847987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08106045, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134ba660>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06e0e00; to 'JaxprTracer' at 0x7ffaf06e0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x270c64d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.06353206177452586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06353206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8f60>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501ac7c0; to 'JaxprTracer' at 0x7ffa501adda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33c465a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.07027041001701452, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07027041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bd10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0740950; to 'JaxprTracer' at 0x7ffad0742f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c855ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06320652137696417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06320652, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829d30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70098680; to 'JaxprTracer' at 0x7ffa700985e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6151a600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.06866504183216672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06866504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d8760>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf06e2520; to 'JaxprTracer' at 0x7ffbf06e2ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f0eb800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.07165271944637598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07165272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688410>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb1490; to 'JaxprTracer' at 0x7ff713eb3ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30f41580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.09252503871107322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09252504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5d20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0407b50; to 'JaxprTracer' at 0x7ff9f0404a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e7ef7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.07701371247237343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07701371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0254be0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4665cb0; to 'JaxprTracer' at 0x7ff7a4664e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c0d7750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.07163225039829459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07163225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943662b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0388680; to 'JaxprTracer' at 0x7ff9d038ae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5633fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.06709716073069674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06709716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9eb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c46200e0; to 'JaxprTracer' at 0x7ff7c4622fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96d0f070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.0688545739097182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06885457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8360>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47d2200; to 'JaxprTracer' at 0x7ff7c47d3510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf016d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.08325406582484245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08325407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295460>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30311260; to 'JaxprTracer' at 0x7ffc303136f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9796c170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.05694210793499144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05694211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307ebd70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711cf8950; to 'JaxprTracer' at 0x7ff711cfbbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c5e8ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.07134752208999369, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07134752, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026f660>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c40a4450; to 'JaxprTracer' at 0x7ff7c40a6f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x692e4270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.09005623950472559, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09005624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40760190>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44d6e80; to 'JaxprTracer' at 0x7ffab44d4810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ecaac00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.07683456087068406, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07683456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013e570>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7012d800; to 'JaxprTracer' at 0x7ffa7012d8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79898f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.08053422572449509, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08053423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015f6b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02c9b20; to 'JaxprTracer' at 0x7ffbb02cbc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bbb0070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.0701136084848435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07011361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc720>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf031af20; to 'JaxprTracer' at 0x7ffbf0318cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43714a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.06679917664712676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06679918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f920>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90499440; to 'JaxprTracer' at 0x7ffb9049bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7438f140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07469748765530536, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07469749, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702acce0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03254e0; to 'JaxprTracer' at 0x7ffbd03259e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86ca2cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.9199702056115084
16, epoch_train_loss=2.9199702056115084
Epoch 17
Epoch 17 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.07312244965913313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07312245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208bc10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1012a430; to 'JaxprTracer' at 0x7ffc10128bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a2f3720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.06058144408705913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06058144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506799e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f0540; to 'JaxprTracer' at 0x7ff9d05f3420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f483a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.033287591101033194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03328759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a54f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2857e660; to 'JaxprTracer' at 0x7ffa2857ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e939fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.047141288444993046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04714129, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9cd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0276480; to 'JaxprTracer' at 0x7ff7c47d3bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4cebef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.06536177460847974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06536177, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296470>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a411f290; to 'JaxprTracer' at 0x7ff7a411d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x517e2d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.08312433686947057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08312434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161920>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0556b10; to 'JaxprTracer' at 0x7ffbf0554180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84f412c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.07279990793812965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07279991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aacd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04ba660; to 'JaxprTracer' at 0x7ffcd04ba840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x430b1bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.07718875951411155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07718876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07ab0f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa945e9530; to 'JaxprTracer' at 0x7ffa945eb920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x551ffb00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.06543353112374642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06543353, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02568b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711faffb0; to 'JaxprTracer' at 0x7ff9f05e7560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11aa54e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.07202759752065302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0720276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755be0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711cd9e40; to 'JaxprTracer' at 0x7ff711cdb560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c82e880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06454192309789669, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06454192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70618b20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902b6430; to 'JaxprTracer' at 0x7ffb902b5120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66c3a7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.07048447790847144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07048448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679620>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28323830; to 'JaxprTracer' at 0x7ffa283226b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b71f150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.07338658929081505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07338659, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4d40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05186d0; to 'JaxprTracer' at 0x7ffbd05193f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43478fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0876582255620245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08765823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d8760>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4321800; to 'JaxprTracer' at 0x7ff7c4323650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3504d2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.07844999177362136, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07844999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b930>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0155760; to 'JaxprTracer' at 0x7ffbb0156700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6320b9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.07336543783926865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07336544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b8720>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124fcd60; to 'JaxprTracer' at 0x7ff7124fd300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cf381e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.06894742073475005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06894742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8e50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7043b560; to 'JaxprTracer' at 0x7ffc7043b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a1646d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.07051743182162878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07051743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367cb0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45e9c10; to 'JaxprTracer' at 0x7ff7c45e8b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57217920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.08028643469293774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08028643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3720>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3dd120; to 'JaxprTracer' at 0x7ff70c3dc720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x886ce9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.05843312346764881, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05843312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537840>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9035f380; to 'JaxprTracer' at 0x7ffb9035c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38338240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0711545760373793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07115458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068b6a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50488d10; to 'JaxprTracer' at 0x7ffb5048bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74d1a660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.08615462016580051, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08615462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f1170>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa401fa890; to 'JaxprTracer' at 0x7ffa401fa3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49472590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.07666225124436485, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07666225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b680>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0637010; to 'JaxprTracer' at 0x7ffca0634090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9286c890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.0785436023072569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0785436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c660>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44d4810; to 'JaxprTracer' at 0x7ffab44d6c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x718b54a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.07219084325357868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07219084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5150>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c67da30; to 'JaxprTracer' at 0x7ff70c67db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d3156e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.06867989952467236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0686799, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829840>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904985e0; to 'JaxprTracer' at 0x7ffb9049bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50f71b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07518979189423335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07518979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f2b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42ef470; to 'JaxprTracer' at 0x7ffab42ef920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9da60e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.924329655265175
17, epoch_train_loss=2.924329655265175
Epoch 18
Epoch 18 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.06896687965663671, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06896688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267890>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad01b5710; to 'JaxprTracer' at 0x7ffad01b79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dd8aa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.06166472428232499, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06166472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029ff30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711ac2ac0; to 'JaxprTracer' at 0x7ff711ac18a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76865e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.03419861798024261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03419862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f34c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f0d170; to 'JaxprTracer' at 0x7ff713f0ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e92af30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.04830574713207198, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04830575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427d250>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506ed670; to 'JaxprTracer' at 0x7ffa506eeb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fcbc9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.06651427221774085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06651427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0256850>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0137a60; to 'JaxprTracer' at 0x7ff9f0135300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38a83d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.07641733031462178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07641733, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a9d40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71207af20; to 'JaxprTracer' at 0x7ff71207a0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5850a610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.07061094288395059, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07061094, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9aa0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06e0180; to 'JaxprTracer' at 0x7ffaf06e1620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38ad6c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.07195579126134874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07195579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bb550>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab453b920; to 'JaxprTracer' at 0x7ffab4539210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x482d2860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.06734384435559675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06734384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067a980>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70638590; to 'JaxprTracer' at 0x7ffa706384f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1569fab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.07393380529796915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07393381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98be70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07a2bb0; to 'JaxprTracer' at 0x7ffad07a3ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27348470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06594264549437627, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06594265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265660>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304e1f80; to 'JaxprTracer' at 0x7ffc304e3560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a95aff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.07242435485689691, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07242435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029e300>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05b4c20; to 'JaxprTracer' at 0x7ff9f05b5800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5430b8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.07512180412788906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0751218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f02d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06be700; to 'JaxprTracer' at 0x7ffcb06be250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31ea3700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.0811152913223467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08111529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7510>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ce50d0; to 'JaxprTracer' at 0x7ff713ce7d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b2d4650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.07988514616301681, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07988515, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0254eb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c62cd10; to 'JaxprTracer' at 0x7ff70c62ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7755cc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.07509194512844068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07509195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061b890>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712773b50; to 'JaxprTracer' at 0x7ff7c43904a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f1a1930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.07088915746262002, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07088916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b9fc0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41c2f70; to 'JaxprTracer' at 0x7ffbf0518270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a608f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.07220847494207264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07220847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd73e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d067c310; to 'JaxprTracer' at 0x7ff9d067f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c9df420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.07613083194118393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07613083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761bb0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7069f150; to 'JaxprTracer' at 0x7ffc7069f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x977d5bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.06002491802707067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06002492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a8f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280cd7b0; to 'JaxprTracer' at 0x7ffb280cc860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x977c74e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.07046389650336067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0704639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6860>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d16980; to 'JaxprTracer' at 0x7ff711d17bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35269be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.08083852111054908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08083852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c850>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0406d40; to 'JaxprTracer' at 0x7ff9f0405760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a3578e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.0759904093863748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07599041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537b20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124fddf0; to 'JaxprTracer' at 0x7ff7124ff1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bb8cbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.07566558948376022, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07566559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120888d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06d57b0; to 'JaxprTracer' at 0x7ffaf06d6570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65b53710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.07430162078284047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07430162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026ebf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa401fbfb0; to 'JaxprTracer' at 0x7ff713cd5df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93068c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.07061405410338022, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07061405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e3f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28198270; to 'JaxprTracer' at 0x7ffb2819b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e072120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07533923159413326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07533923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de230>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713690f90; to 'JaxprTracer' at 0x7ff713690e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82f9b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.9317149810435597
18, epoch_train_loss=2.9317149810435597
Epoch 19
Epoch 19 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.06300927145448383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06300927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a020>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07858f0; to 'JaxprTracer' at 0x7ffcb0785f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25e3e310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0626913128963211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06269131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068bba0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7131f6b60; to 'JaxprTracer' at 0x7ff7131f7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58a9f1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.03519692070851614, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03519692, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b410>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281b4770; to 'JaxprTracer' at 0x7ffb281b7830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18bb3660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.0496647863884772, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04966479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7470>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302fa520; to 'JaxprTracer' at 0x7ffb302fb650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e231450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.06774987594616151, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06774988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8df0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50428310; to 'JaxprTracer' at 0x7ff713edbfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86eab60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.06708389443378904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06708389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd42c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4391f30; to 'JaxprTracer' at 0x7ff7a4390f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52a38a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.06727514507873189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06727515, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160680>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128068e0; to 'JaxprTracer' at 0x7ff712807510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c1e9fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.06460838269359671, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06460838, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160100>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50248a90; to 'JaxprTracer' at 0x7ffc50248770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27356ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.06939812237525676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06939812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061ae40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05e7420; to 'JaxprTracer' at 0x7ff9f05e53f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ba3140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.07612381986848428, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07612382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367580>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307d7fb0; to 'JaxprTracer' at 0x7ff711cdaa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ce0e750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.0674091954417885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0674092, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829ee0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100c8810; to 'JaxprTracer' at 0x7ffc100c93a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31e1ac40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.07462304141850881, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07462304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a830>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07ad6c0; to 'JaxprTracer' at 0x7ffcb07adad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x109bbd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.07695952104538216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07695952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120893e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0246ed0; to 'JaxprTracer' at 0x7ffca0245030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47ef4f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.07197071354065004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07197071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779af0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4149490; to 'JaxprTracer' at 0x7ffcf4148b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3484d400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.08129423156032424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08129423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762920>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4297010; to 'JaxprTracer' at 0x7ffcf4297970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x355b6700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.07688261556926003, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07688262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd78e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904cf740; to 'JaxprTracer' at 0x7ffb904cf420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f8ebe90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.07307729445881223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07307729, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463ed90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0cb650; to 'JaxprTracer' at 0x7ff70c0c8180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x288541e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.07403611046831302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07403611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01150c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04388b0; to 'JaxprTracer' at 0x7ffad0438c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e8d7000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.07016392589945097, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07016393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a32f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab429f600; to 'JaxprTracer' at 0x7ffbd02d8220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ff889e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.06181368531690518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06181369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427e4a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb074d170; to 'JaxprTracer' at 0x7ffbb074fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1eb6a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.06903679238642245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06903679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013e360>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9031a390; to 'JaxprTracer' at 0x7ffb90319800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66637e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.07331429882857106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0733143, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f35b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb060d1c0; to 'JaxprTracer' at 0x7ff7a45cde40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cadbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.07462745098532235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07462745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b07d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf051bdd0; to 'JaxprTracer' at 0x7ffcb0287830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61033390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.07140582898769805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07140583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778fd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f006e3e0; to 'JaxprTracer' at 0x7ff9f006d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b664990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.07656741390479539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07656741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050dc00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07df740; to 'JaxprTracer' at 0x7ff9f07de750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63af0d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.07274978936449354, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07274979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265410>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07c0b80; to 'JaxprTracer' at 0x7ff9f07c39c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54f11790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07505109259590738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07505109, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46146e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4789fd0; to 'JaxprTracer' at 0x7ffab478a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d5baf50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.9436554499564735
19, epoch_train_loss=2.9436554499564735
Epoch 20
Epoch 20 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05739718341129609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05739718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016efc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712562340; to 'JaxprTracer' at 0x7ff712562070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x823e9070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.06426488424941476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06426488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787590>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053fa60; to 'JaxprTracer' at 0x7ffb9053e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1dad25b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.036390121553491396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03639012, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d9c40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50189580; to 'JaxprTracer' at 0x7ffa50188360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c08d880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.051312569947994484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05131257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427c450>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47ba520; to 'JaxprTracer' at 0x7ffb5026fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7af9f0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.06972526301566456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06972526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0254360>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03bcae0; to 'JaxprTracer' at 0x7ffaf03bc0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f86c6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.05829488729242005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05829489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828510>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0694e50; to 'JaxprTracer' at 0x7ffaf0696c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d817020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.06425792107426281, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06425792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd5520>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c2bc40; to 'JaxprTracer' at 0x7ff713c2b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x236380f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05787102442938297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05787102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd4e90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100c9f80; to 'JaxprTracer' at 0x7ffc100c91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89616ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.07184816121513962, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07184816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289ca0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712832e80; to 'JaxprTracer' at 0x7ff712833ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x739b4500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.0790554118556796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07905541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b980>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902d3380; to 'JaxprTracer' at 0x7ffb902d1f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7961d030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06915143010567952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06915143, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f2a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704d4310; to 'JaxprTracer' at 0x7ffbd009bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3006660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.07748145046855646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07748145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786550>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90328a40; to 'JaxprTracer' at 0x7ffb90328720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a7b3ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.0793780855415721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07937809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d95d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702cb060; to 'JaxprTracer' at 0x7ffb702c9080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x590cd770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.06341609573684392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0634161, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689f90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04e58f0; to 'JaxprTracer' at 0x7ffad04e5df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6173e220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.08306944094716827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08306944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257a90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073e570; to 'JaxprTracer' at 0x7ffb7073f1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d8dd2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.07917328771181971, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07917329, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01142a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a414e840; to 'JaxprTracer' at 0x7ff7a414cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x847ffdc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.07589221732116903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07589222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bac10>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf40c0b80; to 'JaxprTracer' at 0x7ffc30151850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38628d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.07651739193687464, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07651739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8cd0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c476fb50; to 'JaxprTracer' at 0x7ff7c476dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f64f970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.0647124241181773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06471242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d300>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5c0810; to 'JaxprTracer' at 0x7ffbb0161da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84cc04c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.06397707757060132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06397708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0330>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c43237e0; to 'JaxprTracer' at 0x7ff7c4321260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44fa1350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.06780916256993902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06780916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088420>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0157650; to 'JaxprTracer' at 0x7ffbb0157fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25645250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.06635335334694092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06635335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0669620>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d5a7f0; to 'JaxprTracer' at 0x7ff711d5a6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x433d8490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.073785256167617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07378526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05361b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305d8d10; to 'JaxprTracer' at 0x7ffb305db150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63c71470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.06768220257935542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0676822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2bd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0621e40; to 'JaxprTracer' at 0x7ffaf0621620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86543e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.07926811726323973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07926812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a89b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05193f0; to 'JaxprTracer' at 0x7ffbd05182c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c048370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.07543721140733127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07543721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5cd0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30682750; to 'JaxprTracer' at 0x7ffc306813a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61fd5550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07527463163475825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07527463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507136a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50496f70; to 'JaxprTracer' at 0x7ffa504977e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85ce8980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.9533098850167576
20, epoch_train_loss=2.9533098850167576
Epoch 21
Epoch 21 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.023275500405464028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0232755, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463d5c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90318310; to 'JaxprTracer' at 0x7ffb9031aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26500110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(0.586653616935865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.58665362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013c2e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94343a60; to 'JaxprTracer' at 0x7ffa943411c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d20ddb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.012811170514979018, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01281117, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068b960>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf072c900; to 'JaxprTracer' at 0x7ffbf072cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78e85a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(15.437002844711653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(15.43700284, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0840>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca067e1b0; to 'JaxprTracer' at 0x7ffca067cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x304fb370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(1.7187360096908388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.71873601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761e20>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5cf290; to 'JaxprTracer' at 0x7ff70c5cd030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x356fdda0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.012420250268472587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.01242025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba580>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40780860; to 'JaxprTracer' at 0x7ffa407809a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d5a69e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.002223264921745236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.00222326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182aa00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117fcef0; to 'JaxprTracer' at 0x7ff7117fdfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x680c97f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.34285768103792724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.34285768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182b660>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a45d7920; to 'JaxprTracer' at 0x7ff7a45d6430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33fdddb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(0.4930854140442654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.49308541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a1400>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285a0a40; to 'JaxprTracer' at 0x7ffb285a1fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x994abf00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(0.03841617811592286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.03841618, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df050>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc104e0ea0; to 'JaxprTracer' at 0x7ffc104e0450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50ed770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.06959987105447993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06959987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463ea20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d318a0; to 'JaxprTracer' at 0x7ffc10543bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c2c6040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(0.14761620339347914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.1476162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013fdc0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712079670; to 'JaxprTracer' at 0x7ffc102ac450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x564a7e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(0.226520486738538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.22652049, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a280>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300eed40; to 'JaxprTracer' at 0x7ffca07c7c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66beac00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.047062667547458206, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04706267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026eb40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb046cc70; to 'JaxprTracer' at 0x7ffcb046f470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46b86250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(0.22979085511535582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.22979086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40763d30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302dce50; to 'JaxprTracer' at 0x7ffb302df6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7af864d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(1.2987923155367618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.29879232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b9930>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50522ac0; to 'JaxprTracer' at 0x7ffb50520860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ad585a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.0058758984873865045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0058759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162480>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127d6070; to 'JaxprTracer' at 0x7ff7127d7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x313696e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(0.4059851945133821, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.40598519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02566f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0645a30; to 'JaxprTracer' at 0x7ffb28593920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f2e7c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.10836270713617555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.10836271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f2a80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c456e480; to 'JaxprTracer' at 0x7ff7c456f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37d620e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.06623486484683078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06623486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0534f40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70067740; to 'JaxprTracer' at 0x7ffc70064b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68062ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.06839437095221255, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06839437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c8b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5045ce50; to 'JaxprTracer' at 0x7ffa94036480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x355d4e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.03866796727023051, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.03866797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a050>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca05ff6a0; to 'JaxprTracer' at 0x7ffca00e5df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6655bbd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.029460614554243647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02946061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067ae20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326abb0; to 'JaxprTracer' at 0x7ff71348d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a46c4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.011370387144642202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01137039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026fc40>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb012a020; to 'JaxprTracer' at 0x7ffbb012b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74f7a690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.03071588848271141, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03071589, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e300>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a45cfb00; to 'JaxprTracer' at 0x7ff7a45cdbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42200250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(0.04165840159119738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.0416584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d4b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd051bd80; to 'JaxprTracer' at 0x7ffbd051b9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c9af0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.013199182220584754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.01319918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b46b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f39530; to 'JaxprTracer' at 0x7ff712f393a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f368110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 16.415872809065114
21, epoch_train_loss=16.415872809065114
Epoch 22
Epoch 22 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(16.969263145352112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(16.96926315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b8d50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd049e890; to 'JaxprTracer' at 0x7ff9f0795f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfefe6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(5.923462263613256, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(5.92346226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0117840>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705f1990; to 'JaxprTracer' at 0x7ffa705f1c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9f0250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(0.1933079165385324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.19330792, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787950>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9053ebb0; to 'JaxprTracer' at 0x7ffb9053c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b1c4210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(143.34201944296876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(143.34201944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05348a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad01b7fb0; to 'JaxprTracer' at 0x7ffad01b7d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34555d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(16.438660285647455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(16.43866029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427d810>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506ed850; to 'JaxprTracer' at 0x7ffa506ed030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99998c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(0.6797940676660367, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.67979407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7118296d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc505e4ea0; to 'JaxprTracer' at 0x7ffc505e6ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfca6370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(0.5549234227733488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.55492342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb4b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa284ffce0; to 'JaxprTracer' at 0x7ffa284fee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34bc7f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(11.359407001394207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(11.359407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eadb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb030ca40; to 'JaxprTracer' at 0x7ffbb030ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60838010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(5.103266699344646, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(5.1032667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463d720>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad01df6f0; to 'JaxprTracer' at 0x7ffad01dee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73476db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(1.0366965620647062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.03669656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bbc0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad02488b0; to 'JaxprTracer' at 0x7ffad0248630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82ca5170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.027443755937664273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.02744376, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134ba110>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5024af20; to 'JaxprTracer' at 0x7ffc5024a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x255776d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(2.15027678276079, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(2.15027678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115130>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9050d4e0; to 'JaxprTracer' at 0x7ffb9050c180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x794b6f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(15.467228019512843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(15.46722802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785cd0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128064d0; to 'JaxprTracer' at 0x7ff712805800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f49c710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(0.10709997065989109, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.10709997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d990>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa406f49a0; to 'JaxprTracer' at 0x7ffa406f5940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f8830a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(2.849007199142106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(2.8490072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427e4e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3055b9c0; to 'JaxprTracer' at 0x7ffb3055a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5381c230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(12.719190200756609, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(12.7191902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619ad0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287ecd60; to 'JaxprTracer' at 0x7ffa287ec360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d4c5430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(0.612152121999104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.61215212, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b92a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281b6ca0; to 'JaxprTracer' at 0x7ffb281b7bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x777f3160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(4.959858721750986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(4.95985872, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761860>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb066f740; to 'JaxprTracer' at 0x7ffbb066dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b0536f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(1.5514010036170467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.551401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b28e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90576ca0; to 'JaxprTracer' at 0x7ffb90574950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x517d4f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.054736989418976034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05473699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066a6c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb074ce50; to 'JaxprTracer' at 0x7ffbb074d850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6293eac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.05666387191021585, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05666387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678ff0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f006e390; to 'JaxprTracer' at 0x7ff9f006c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25a7d240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(0.9147191428508498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.91471914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea050>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d6570; to 'JaxprTracer' at 0x7ffb302d6200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x886a6c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(0.35788874460696146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.35788874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06db790>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06bc5e0; to 'JaxprTracer' at 0x7ffcb06bc040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x797b7df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(0.47753025396813925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.47753025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d280>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04e5e40; to 'JaxprTracer' at 0x7ffad04e4950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8350aa80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(0.4027431464177562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.40274315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02955c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ce6160; to 'JaxprTracer' at 0x7ff713ce53f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79aebb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(1.0486716952209842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.0486717, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502657e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0637fb0; to 'JaxprTracer' at 0x7ff711fa4c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x457a72b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(0.5201576625753326, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.52015766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208bb70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07a3ce0; to 'JaxprTracer' at 0x7ffad07a2ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x717ad0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 148.2064244441435
22, epoch_train_loss=148.2064244441435
Epoch 23
Epoch 23 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.040415734726178314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04041573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507137e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a43b9df0; to 'JaxprTracer' at 0x7ff7a43b84a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23299c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.06814117149051171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06814117, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b400>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2862b3d0; to 'JaxprTracer' at 0x7ffb28628c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ed46f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.039464056633351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03946406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294e80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c370450; to 'JaxprTracer' at 0x7ff70c373b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x793ec9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.05595390937704895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05595391, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ebbb0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa282ec5e0; to 'JaxprTracer' at 0x7ffa282ed710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3848f150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.07337928081772951, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07337928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066a2e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4621da0; to 'JaxprTracer' at 0x7ff7c4621490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x366714f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.030695850815848347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03069585, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463e9a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fdb970; to 'JaxprTracer' at 0x7ff712fdb0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a05beb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.05516241480209109, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05516241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307ea000>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701235b0; to 'JaxprTracer' at 0x7ffb701234c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x980880e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.036697704762966424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0366977, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb7d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0761e40; to 'JaxprTracer' at 0x7ffbd07636f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f8610d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.07821186070262617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07821186, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a0cc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71253d3f0; to 'JaxprTracer' at 0x7ff71253ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x800175c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.08436191156948868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08436191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6e00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06d76a0; to 'JaxprTracer' at 0x7ffaf06d5cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fe36010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.07308524387749457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07308524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711570>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2857e980; to 'JaxprTracer' at 0x7ffa2857ee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24faad00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.08342915771129847, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08342916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067ac00>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ec590; to 'JaxprTracer' at 0x7ffc300eeed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c67f570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.08402462058411994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08402462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296380>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41f3150; to 'JaxprTracer' at 0x7ffcf41f1cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48913600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.03632794785864118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03632795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e8a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3054f740; to 'JaxprTracer' at 0x7ffc3054de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a7ba870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.0855928204962425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08559282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0668980>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506c1350; to 'JaxprTracer' at 0x7ffa506c0c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82ce9f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.08314900150706069, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.083149, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015f960>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302d9170; to 'JaxprTracer' at 0x7ffc302d9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84e48150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.08224799197111603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08224799, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca07569d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01269d0; to 'JaxprTracer' at 0x7ffbf0126160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88f4bb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.08160402111169515, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08160402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182be20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06389f0; to 'JaxprTracer' at 0x7ffcb06384a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b49d8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.0471033610531057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04710336, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427dcd0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0c98f0; to 'JaxprTracer' at 0x7ff70c0ca4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d7e0470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.0698067815368718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06980678, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f3e60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117fb3d0; to 'JaxprTracer' at 0x7ff9f00ff5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c405710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.06428475504092429, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06428476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779580>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125bf560; to 'JaxprTracer' at 0x7ff7125bdcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87900770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.044195162990257796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04419516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d9cb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70689850; to 'JaxprTracer' at 0x7ffc7068be70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fc07550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.06980993017959754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06980993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2d60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb066ffb0; to 'JaxprTracer' at 0x7ffcb01f27a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b85ba70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.05595421728720626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05595422, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026f6c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3383b0; to 'JaxprTracer' at 0x7ffbb02c9da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dfa1870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.08576348412742925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08576348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134ba2a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132898a0; to 'JaxprTracer' at 0x7ff71328ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4616e2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.08171950471963534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0817195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0117d70>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1010e1b0; to 'JaxprTracer' at 0x7ffc1010fbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f318a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.07449222128254557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07449222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46177f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00e3290; to 'JaxprTracer' at 0x7ffbb00e3dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e57f0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.989398048510693
23, epoch_train_loss=2.989398048510693
Epoch 24
Epoch 24 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.04244949013737808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04244949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b9ce0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4056d0d0; to 'JaxprTracer' at 0x7ffa4056d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x884aaa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.06936431025932567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06936431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a9d20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125be610; to 'JaxprTracer' at 0x7ff7125bcb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46a4c780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04027921736581304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04027922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e4e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42ca930; to 'JaxprTracer' at 0x7ffab42cbe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cf07950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.05699783696727891, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05699784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536fa0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0406480; to 'JaxprTracer' at 0x7ffaf04073d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b3222e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.07477080353588197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0747708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061ae60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02d04f0; to 'JaxprTracer' at 0x7ffbb02d29d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33bfaf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.032804463417544935, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03280446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd6e00>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c129f30; to 'JaxprTracer' at 0x7ff70c1288b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36e65910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.05704976384781065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05704976, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463cbf0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c42fb740; to 'JaxprTracer' at 0x7ff7c42f9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70d76470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.03868816684535211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03868817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463ebd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10541f30; to 'JaxprTracer' at 0x7ffc105433d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23356130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.07969031511397802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07969032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066be80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06a3470; to 'JaxprTracer' at 0x7ffaf06a0cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c13ad70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.08626059942098364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0862606, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b660>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902d26b0; to 'JaxprTracer' at 0x7ffb902d31f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93258500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.07453994093252173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07453994, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bbbe0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404f46d0; to 'JaxprTracer' at 0x7ffa404f78d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x937dbc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.0851645620655926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08516456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a81f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70672d90; to 'JaxprTracer' at 0x7ffa70671030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa12d6110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.08580075146274357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08580075, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f870>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128045e0; to 'JaxprTracer' at 0x7ff7128074c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6825b960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.038570436913489034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.03857044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679a40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca043a0c0; to 'JaxprTracer' at 0x7ffca0439800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10f2d830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.0876621076728144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08766211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70618d00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0308bd0; to 'JaxprTracer' at 0x7ffca0308a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39eff220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.08507199188468792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08507199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3310>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa282ef1a0; to 'JaxprTracer' at 0x7ffa282ed3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7062f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.08389257064138368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08389257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b630>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04d5530; to 'JaxprTracer' at 0x7ffad04d7290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bd22450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.08327970689829471, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08327971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e7c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0286fc0; to 'JaxprTracer' at 0x7ffcb02236a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35d8ce60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.049070102862503434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0490701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eae50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f074ffb0; to 'JaxprTracer' at 0x7ffa703637e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f963200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07106853454123731, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07106853, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013f120>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139849a0; to 'JaxprTracer' at 0x7ff713984f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dda4a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0662460190700544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06624602, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3f50>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41c1800; to 'JaxprTracer' at 0x7ffcf41c1940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e332c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.04634543807653199, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04634544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a69a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb030fa60; to 'JaxprTracer' at 0x7ffbb030fbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ab5090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.0716874998253877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0716875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06da200>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117f81d0; to 'JaxprTracer' at 0x7ff7117fb8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eae5f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.05784350220654618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0578435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067ab90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5cd080; to 'JaxprTracer' at 0x7ff70c5cc090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e71ee90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.08744370013113419, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0874437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068ebf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0557b00; to 'JaxprTracer' at 0x7ffbf0554810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59c46f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.08327479756857271, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0832748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0256b30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fa7d80; to 'JaxprTracer' at 0x7ff711fa5c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x565d84f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.0763516443040809, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07635164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711de0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa402557b0; to 'JaxprTracer' at 0x7ffa40255620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314ef090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.980674149762776
24, epoch_train_loss=2.980674149762776
Epoch 25
Epoch 25 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.054177547550171776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05417755, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115890>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d5fce0; to 'JaxprTracer' at 0x7ff712d5f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d3d0290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.07221203919967317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07221204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fcf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c33af20; to 'JaxprTracer' at 0x7ff712cd9210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d719350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.041281214018193256, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04128121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5e40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02da520; to 'JaxprTracer' at 0x7ffcb07849a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x340fb730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.05854834690003006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05854835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea770>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf072c590; to 'JaxprTracer' at 0x7ffbf072d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55022fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.07824205945472723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07824206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b3680>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a462ec50; to 'JaxprTracer' at 0x7ff7a462eb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5304ad90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.04947179370973366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04947179, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463ecc0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06993f0; to 'JaxprTracer' at 0x7ffbd069ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ad25c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.0656966019262272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0656966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427c0e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71368c7c0; to 'JaxprTracer' at 0x7ff71368f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cf8c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.05249159999410467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0524916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427c880>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b52ed0; to 'JaxprTracer' at 0x7ff711b51080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67be2e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.08159051343081603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08159051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f39d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c476c310; to 'JaxprTracer' at 0x7ff7c476e610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d637000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.08966270300302387, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0896627, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182aae0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28796f20; to 'JaxprTracer' at 0x7ffa28797380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x133d0c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.07763821653843808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07763822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0116070>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01d0fe0; to 'JaxprTracer' at 0x7ff9d01d07c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x723ad3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.08799114970587879, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08799115, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e0a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a43e0270; to 'JaxprTracer' at 0x7ff7a43e34c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d252d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.089189787906923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08918979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4250>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70189350; to 'JaxprTracer' at 0x7ffa7018b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b53e150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.055207776833938765, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05520778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506787f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04e17b0; to 'JaxprTracer' at 0x7ffbf04e24d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa41d2050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.09227534029808275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09227534, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0668b70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02d31a0; to 'JaxprTracer' at 0x7ffbb02d16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bc41130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.08884312693108223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08884313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463dbe0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940f9710; to 'JaxprTracer' at 0x7ff7a41c1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99744490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.08635273819817525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08635274, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd4360>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02bbba0; to 'JaxprTracer' at 0x7ffca02ba390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f37990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.08646150601969423, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08646151, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706198e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124fcb80; to 'JaxprTracer' at 0x7ff7124fe660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3aa7c190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.06146745818038038, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06146746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07856e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca01002c0; to 'JaxprTracer' at 0x7ffca0103e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7291050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07287715406206827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07287715, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016c210>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70496390; to 'JaxprTracer' at 0x7ffc70494a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72c0dbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.07259081992005094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07259082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5e40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb066c360; to 'JaxprTracer' at 0x7ffbb066dc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8201910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.06098332430139476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06098332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c7a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704effb0; to 'JaxprTracer' at 0x7ffb704ee110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x349fe980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.07846215886539698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07846216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013ed40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90186e80; to 'JaxprTracer' at 0x7ffa282ee160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3169a880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.06798941267214521, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06798941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067bfd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713985210; to 'JaxprTracer' at 0x7ff7139843b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8405cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.08976643700076793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08976644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba3d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5063aed0; to 'JaxprTracer' at 0x7ffc50638db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e3b1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.08558310149897598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0855831, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943670a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0637060; to 'JaxprTracer' at 0x7ffca0634680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c58a0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.08172470053818992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0817247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704058b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5069f150; to 'JaxprTracer' at 0x7ffb5069f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34776a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.94170270026955
25, epoch_train_loss=2.94170270026955
Epoch 26
Epoch 26 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.07231923305886807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07231923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b2f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2857c1d0; to 'JaxprTracer' at 0x7ffa2857fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x210e69b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.07599037189902332, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07599037, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163a00>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb074d3a0; to 'JaxprTracer' at 0x7ffca07146d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ebcc180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04240730590123068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04240731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8260>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02ae3e0; to 'JaxprTracer' at 0x7ffcb02ac5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aab83a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.060374953373859216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06037495, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06da1b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302d91c0; to 'JaxprTracer' at 0x7ffc302db470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34c12290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.08303636971571596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08303637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05360d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb068f0b0; to 'JaxprTracer' at 0x7ffcb068d1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44cf3580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.0757066148174632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07570661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427da90>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71207b600; to 'JaxprTracer' at 0x7ff712078cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c89e140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.07869178812062198, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07869179, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267e50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10542f70; to 'JaxprTracer' at 0x7ffc10543330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a479fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.0740866767626716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07408668, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265b70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305748b0; to 'JaxprTracer' at 0x7ffb30575df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x398b0580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.08373665011373553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08373665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0668770>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f058b7e0; to 'JaxprTracer' at 0x7ff9f058b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60a839e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.09389746274282382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09389746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bed0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02a4590; to 'JaxprTracer' at 0x7ffbd02a61b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b081e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.08168304514079998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08168305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288580>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0721350; to 'JaxprTracer' at 0x7ffcb0721260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24b2e340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.09149324173202597, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09149324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163df0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30151620; to 'JaxprTracer' at 0x7ffc30151e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2df31760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.09366125228907306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09366125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8be0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706d2700; to 'JaxprTracer' at 0x7ffc706d0b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x335970f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.08139216414966265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08139216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e740>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd7fb0; to 'JaxprTracer' at 0x7ff713cd4db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18a20fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.09842405383647132, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09842405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05343f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44ffa10; to 'JaxprTracer' at 0x7ffab44fd3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c59e440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.0937911051835257, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09379111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a24f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50667c90; to 'JaxprTracer' at 0x7ffc50664d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cd6da60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.08938972458187594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08938972, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463c980>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30312340; to 'JaxprTracer' at 0x7ffc303118f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x345f6f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.09060189184391121, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09060189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068b2e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700998a0; to 'JaxprTracer' at 0x7ffa70098900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5328e7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.08073077932883384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08073078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294cd0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141d8a40; to 'JaxprTracer' at 0x7ff7141db290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82866870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07497098710542195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07497099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013dcb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302cffb0; to 'JaxprTracer' at 0x7ff712563010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47299120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0816464292335794, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08164643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7a70>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70157d80; to 'JaxprTracer' at 0x7ffb70155b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x974a0b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.08386544282824356, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08386544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050f420>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128058f0; to 'JaxprTracer' at 0x7ff7128062f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f281260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.08847543618794691, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08847544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016fba0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02a96c0; to 'JaxprTracer' at 0x7ffc7069f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54add180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.08351728065015247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08351728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068c6f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0192890; to 'JaxprTracer' at 0x7ffbf051ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ce638c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.09254181998397505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09254182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca07552b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3055bb50; to 'JaxprTracer' at 0x7ffb30558ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa11cd1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.08839427519786638, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08839428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a390>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fd83b0; to 'JaxprTracer' at 0x7ff711fd91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dd63f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.08942142750406849, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08942143, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bbe50>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06abc90; to 'JaxprTracer' at 0x7ffbd06abfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x433d51f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.883107550171943
26, epoch_train_loss=2.883107550171943
Epoch 27
Epoch 27 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09043712364029649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09043712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e4a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0433d30; to 'JaxprTracer' at 0x7ffcd0432d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x482b5ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.08024224712690928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08024225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702afc90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa282f8540; to 'JaxprTracer' at 0x7ffa282f9760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bcd6ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04355322011436661, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04355322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050e820>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711daeac0; to 'JaxprTracer' at 0x7ff711dafab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e3306a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06249621281095266, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06249621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296ba0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9432ad90; to 'JaxprTracer' at 0x7ffa94328040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa43713d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.08872895812022412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08872896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689d50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eda480; to 'JaxprTracer' at 0x7ffcb046d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa42de690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.10124924606093409, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10124925, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267d80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0439cb0; to 'JaxprTracer' at 0x7ffbf06e0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f14a040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.09214499369857641, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09214499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f23c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900b5d00; to 'JaxprTracer' at 0x7ff7a411c4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bcf6f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09538086488475571, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09538086, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f06b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c43239c0; to 'JaxprTracer' at 0x7ff7c43229d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56c6f5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.08611968122316062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08611968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06da730>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28552110; to 'JaxprTracer' at 0x7ffb285530b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x886387c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.09869910068618544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0986991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061b810>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70338f40; to 'JaxprTracer' at 0x7ffb7033b330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x815ab800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.08643540101843537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0864354, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7f50>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa704192b0; to 'JaxprTracer' at 0x7ffa70419300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f7f9e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.09562898263298139, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09562898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702af240>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7043ab60; to 'JaxprTracer' at 0x7ffbf01471a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d65db30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.09905958001104097, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09905958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c190>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c479b9c0; to 'JaxprTracer' at 0x7ff7c4799530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x684679c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.10692962854063799, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10692963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c240>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506b83b0; to 'JaxprTracer' at 0x7ffb506ba570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ae67390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.10562495615545071, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10562496, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0668df0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c41055d0; to 'JaxprTracer' at 0x7ff7c41059e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d9428c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.09968438103735738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09968438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02544a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0439a80; to 'JaxprTracer' at 0x7ffad043ade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bc2caf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09301047718857261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09301048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f0e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03bff10; to 'JaxprTracer' at 0x7ffaf03bc090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x257f06e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.09563016211044754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09563016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07877d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106f18a0; to 'JaxprTracer' at 0x7ffa947e16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63f2b260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.09959068074334648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09959068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016da50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073de40; to 'JaxprTracer' at 0x7ffb7073ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65e45c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07737936713924913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07737937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a96d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30746ed0; to 'JaxprTracer' at 0x7ffb30745bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b78660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0916924795819424, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09169248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a0b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f006f1a0; to 'JaxprTracer' at 0x7ff9f006e5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70d51640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.10641147427456629, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10641147, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288260>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e7fb0; to 'JaxprTracer' at 0x7ff9f07e7ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bb79bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.09869202310943676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09869202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013c080>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404c2d40; to 'JaxprTracer' at 0x7ffa404c0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f54f810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.09943979751714192, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0994398, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029ff60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127701d0; to 'JaxprTracer' at 0x7ff712772d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e715120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.09573402411033903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09573402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de790>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d251c0; to 'JaxprTracer' at 0x7ffa407818f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f5835f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.09174383611843112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09174384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2ab0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10111a30; to 'JaxprTracer' at 0x7ffc101108b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa54c7ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.09746532351969328, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09746532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407612f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd030a0c0; to 'JaxprTracer' at 0x7ffbd0309f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x821ee570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.823477966102747
27, epoch_train_loss=2.823477966102747
Epoch 28
Epoch 28 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09345000198299802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405600>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100c9800; to 'JaxprTracer' at 0x7ffc100c91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93151e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0841388590632671, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08413886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5c20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e4ae0; to 'JaxprTracer' at 0x7ff7139e5710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1da2c240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.044666542972814714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04466654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162db0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501f1fd0; to 'JaxprTracer' at 0x7ffb501f1850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x445de0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06467587807468829, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06467588, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aab60>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5e8e00; to 'JaxprTracer' at 0x7ff70c5e9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48561aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.092433776951923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09243378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d4a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03d9990; to 'JaxprTracer' at 0x7ff9f03da020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f743110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.10460858065228068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10460858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd6bb0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7026ec50; to 'JaxprTracer' at 0x7ffc7026c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x858579d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.09516568824922644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09516569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267960>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7043ac00; to 'JaxprTracer' at 0x7ffc7043ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x722a73a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09864484004340701, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09864484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502654e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06d5670; to 'JaxprTracer' at 0x7ffaf06d65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b6196d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.08856385850280489, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08856386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294e00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70339440; to 'JaxprTracer' at 0x7ffb7033b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53662120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.10326194922298813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10326195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bd20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4178090; to 'JaxprTracer' at 0x7ffcf417ab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81679230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.08950149605525448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0895015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405dd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06b2480; to 'JaxprTracer' at 0x7ff9f07bb470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4435c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.09959251534643572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09959252, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7560>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5063bec0; to 'JaxprTracer' at 0x7ffc50638900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x288a8120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1030877092226738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10308771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162df0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30525490; to 'JaxprTracer' at 0x7ffb30524f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84513100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1104769989586858, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.110477, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94364410>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0438950; to 'JaxprTracer' at 0x7ffbf06e2200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa457bc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.10949101245707556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10949101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026df30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5024b290; to 'JaxprTracer' at 0x7ffbd02d97b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6de8de90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1036535921941075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10365359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786c10>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50665ee0; to 'JaxprTracer' at 0x7ffc50665850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e90da60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09650961268814455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09650961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eaff0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30312930; to 'JaxprTracer' at 0x7ffc30313600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fa6ae40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.09961251231332316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09961251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b040>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f074ff10; to 'JaxprTracer' at 0x7ff9f074e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b3e4cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.10277285761572702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10277286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013eaa0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0731c60; to 'JaxprTracer' at 0x7ff9d043a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ff080f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.07987402095115745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07987402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050fda0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d067fab0; to 'JaxprTracer' at 0x7ff9d067e480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x770b8aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.0946413506771462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09464135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115c50>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902d3f10; to 'JaxprTracer' at 0x7ffb902d2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57767a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.10995561048666261, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10995561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a40a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0284900; to 'JaxprTracer' at 0x7ffcb0284ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ff8b050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.10181225273892656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10181225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a460>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0127100; to 'JaxprTracer' at 0x7ffa947e2c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e401480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1028984433781279, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10289844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367040>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f006f060; to 'JaxprTracer' at 0x7ff9f006e930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dadcfa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.09888735393679834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09888735, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a630>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02e98f0; to 'JaxprTracer' at 0x7ffa28321df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x979d93b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.09501905228031078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09501905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb1a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3df830; to 'JaxprTracer' at 0x7ff70c3dd670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d74d430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.10051825780046349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10051826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a700>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa282eef20; to 'JaxprTracer' at 0x7ffa282ef060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38628920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.807365238147654
28, epoch_train_loss=2.807365238147654
Epoch 29
Epoch 29 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09630669004708699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09630669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427ed30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47d2e30; to 'JaxprTracer' at 0x7ff7c47d2ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x352d2330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.08704702036556083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08704702, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a270>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287a2250; to 'JaxprTracer' at 0x7ffa287a1080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bf4dc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04571095682995645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04571096, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015da60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa945ea610; to 'JaxprTracer' at 0x7ffa945eb470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2353fb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06680079531708628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0668008, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c3c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7131f4680; to 'JaxprTracer' at 0x7ffaf03e74c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2069f030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.09573209756475819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0957321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10678250>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c43904a0; to 'JaxprTracer' at 0x7ff7c4392a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a13bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.10778955217534962, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10778955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267f30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30524e00; to 'JaxprTracer' at 0x7ffb305240e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95ee2070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.09782337378848611, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09782337, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d8cb0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0723150; to 'JaxprTracer' at 0x7ffcb0723e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a76db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10182480219014191, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1018248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06db270>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad075ee30; to 'JaxprTracer' at 0x7ffad075d440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x178522a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09091281541794385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09091282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e0b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d068cef0; to 'JaxprTracer' at 0x7ff9d068cf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79af1440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.10662217212868574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10662217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134ba550>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47104a0; to 'JaxprTracer' at 0x7ff712831300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8acc0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09227935449526338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09227935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427da20>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1008b150; to 'JaxprTracer' at 0x7ffc100884f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6815820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1027508837906089, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10275088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b180>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713771d00; to 'JaxprTracer' at 0x7ff7137723e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bc2c440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.10650113895688722, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10650114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015fec0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506bb9c0; to 'JaxprTracer' at 0x7ffb506bb1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ea71440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.11380768162500667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11380768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca07557b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0198310; to 'JaxprTracer' at 0x7ffaf019a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a2321b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.11285360697926855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11285361, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b8a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f071ed90; to 'JaxprTracer' at 0x7ff9f071db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e57daa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.10710369770925068, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1071037, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b360>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd034dd50; to 'JaxprTracer' at 0x7ffa70386520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43041290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.09951071866036668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09951072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7b30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4586840; to 'JaxprTracer' at 0x7ff7c4585a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91f7ff40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.10299767418044854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10299767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463d010>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9412b970; to 'JaxprTracer' at 0x7ffa9412b6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cb12e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.10577249192723462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10577249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428af60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940cd530; to 'JaxprTracer' at 0x7ffa940ce480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7901ced0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08229964586512784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08229965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679450>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ca0ae0; to 'JaxprTracer' at 0x7ff712ca3830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x599211e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.09730649463691762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09730649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616270>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c2acf0; to 'JaxprTracer' at 0x7ff713c29210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x731e8610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.11325741323794167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11325741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c370>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502b7740; to 'JaxprTracer' at 0x7ffc502b5da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c585e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.10476583958562004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10476584, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702acae0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30313c40; to 'JaxprTracer' at 0x7ffc30313fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x626151f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.10611271800405876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10611272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754170>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca06394e0; to 'JaxprTracer' at 0x7ffca0638e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f9dab70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1017202466037649, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10172025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404500>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4392b10; to 'JaxprTracer' at 0x7ff7a4393d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9309a9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.09788347205530529, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09788347, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b7e90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0398900; to 'JaxprTracer' at 0x7ff9f039b1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x846dbb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.10338940167493162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1033894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787830>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2859c1d0; to 'JaxprTracer' at 0x7ffaf06bc950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d84db90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.7929406686477214
29, epoch_train_loss=2.7929406686477214
Epoch 30
Epoch 30 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.09902386356821652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09902386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba700>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0733470; to 'JaxprTracer' at 0x7ffca0732390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56c07680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.08970157571436146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08970158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115f90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad024aa70; to 'JaxprTracer' at 0x7ffad024ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cea3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04672514096496076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04672514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50710570>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28138770; to 'JaxprTracer' at 0x7ffb2813ade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f8c68b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.06883002789698502, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06883003, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029cd40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad020d260; to 'JaxprTracer' at 0x7ffad020c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36d4e290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.09855631079562131, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09855631, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289dd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940fb7e0; to 'JaxprTracer' at 0x7ffa940f8540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b811490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.11100703024725117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11100703, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c840>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0434450; to 'JaxprTracer' at 0x7ffaf0437a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85dfea60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1005163973945063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1005164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502675a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06d73d0; to 'JaxprTracer' at 0x7ffaf06d6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x618cec70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10485955235278463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10485955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266930>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5073a520; to 'JaxprTracer' at 0x7ffa5073a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x618cb100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09316632666891991, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09316633, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d980>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305d9da0; to 'JaxprTracer' at 0x7ffb305db470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38ee67f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.10966363025225824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10966363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b7b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304bd490; to 'JaxprTracer' at 0x7ffc304beca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70387100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.0949483009257703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0949483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bafa0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b515d0; to 'JaxprTracer' at 0x7ff711b52890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cc01c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.10564194420618489, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10564194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0116970>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504a09a0; to 'JaxprTracer' at 0x7ff9f00910d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b78c950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.10939448081884567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10939448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711280>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a411df30; to 'JaxprTracer' at 0x7ffc5063bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cd582a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1171606887280843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11716069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f890>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44fed40; to 'JaxprTracer' at 0x7ffab44fc8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa163a3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.11608210287486516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1160821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428bd50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41a4e50; to 'JaxprTracer' at 0x7ff7a41a6ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x791c2d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.10994245821719732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10994246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016c1f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5069d710; to 'JaxprTracer' at 0x7ffc5069de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x480d35f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.10228429879820873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1022843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f2de0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c67c090; to 'JaxprTracer' at 0x7ffb285cebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x886a6c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.10594448315223277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10594448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679840>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94340ae0; to 'JaxprTracer' at 0x7ffa94340180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fcec040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.10876777755218882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10876778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a46a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04baf70; to 'JaxprTracer' at 0x7ffcd04b9ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cd65480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08460861732927313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08460862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702acf90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02a82c0; to 'JaxprTracer' at 0x7ffbb02aabb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e309c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.09991546098178912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09991546, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c780>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02b7330; to 'JaxprTracer' at 0x7ffcd02b6b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31982120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.11657472509399734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11657473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94364640>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf417ac00; to 'JaxprTracer' at 0x7ffcf4178d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f04010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.10756890143838659, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1075689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6020>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca076d620; to 'JaxprTracer' at 0x7ffca076fd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60482670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.10918196299476728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10918196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712089040>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05189a0; to 'JaxprTracer' at 0x7ffbd0518180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40bd50c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.10434684892954163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10434685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b3f20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02b99e0; to 'JaxprTracer' at 0x7ff712ca0770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x759721b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.100567092407955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10056709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1920>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47ba430; to 'JaxprTracer' at 0x7ffab47ba5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ce12ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.1060996828824589, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10609968, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06694b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a45d7fb0; to 'JaxprTracer' at 0x7ffa402718f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6713ec60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.7792698323999216
30, epoch_train_loss=2.7792698323999216
Epoch 31
Epoch 31 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10171155087452151, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10171155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4510>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf06e3150; to 'JaxprTracer' at 0x7ffbf06e0450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bee6680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.09238562128668507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09238562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163e40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9050d7b0; to 'JaxprTracer' at 0x7ffb9050eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a46aee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0478074659847562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04780747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4615ff0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e5d50; to 'JaxprTracer' at 0x7ff9f07e5350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39b8da70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07081653002610842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07081653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427fb20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137172e0; to 'JaxprTracer' at 0x7ff713715d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49635060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.10132487024217293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10132487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068eee0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302fb240; to 'JaxprTracer' at 0x7ff7a41a4630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3740e6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1141918426550767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11419184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050fbd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06067f0; to 'JaxprTracer' at 0x7ffaf0605ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4079c550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1031162265574122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10311623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7118297b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3051ade0; to 'JaxprTracer' at 0x7ffc3051b740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5951bae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10791984637862147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10791985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7118285b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a462eca0; to 'JaxprTracer' at 0x7ff7a462c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fd5b320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09541655937818112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09541656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026db80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f194e0; to 'JaxprTracer' at 0x7ff712f1a930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87b923e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.11272602372467543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11272602, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0784480>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04ad120; to 'JaxprTracer' at 0x7ffbf04ace00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x640d3a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09743263515860343, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09743264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877b7f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30744a40; to 'JaxprTracer' at 0x7ffb30745bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a4edd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.10858897150527819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10858897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf01603c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07c22a0; to 'JaxprTracer' at 0x7ff9f07c31f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57773ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.11231053665836112, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11231054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46179e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf403acf0; to 'JaxprTracer' at 0x7ffcf4039d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x257557e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.12050908563375431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12050909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50713330>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5026ec00; to 'JaxprTracer' at 0x7ff713269300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2756ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.11900290404578268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1190029, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068de10>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94360d10; to 'JaxprTracer' at 0x7ffa943617b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60a8c260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.11278862568958843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11278863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5ce0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad020f970; to 'JaxprTracer' at 0x7ffad020cc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c9b5d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1050827360963327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10508274, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294e50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45553f0; to 'JaxprTracer' at 0x7ff7c4554360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c9e3f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.10890147485784037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10890147, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d8f70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5e9cb0; to 'JaxprTracer' at 0x7ff9d05c2660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1856fa40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.11176163170147371, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11176163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016c540>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d30950; to 'JaxprTracer' at 0x7ffbb00e07c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x391168f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08689907653303511, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08689908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42884a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902d0a40; to 'JaxprTracer' at 0x7ffb902d3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9858d540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.10236669963748667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1023667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029cfd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0160b30; to 'JaxprTracer' at 0x7ffbb01612b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fc81da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1198988720314891, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11989887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca07576d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1074b4c0; to 'JaxprTracer' at 0x7ffc10748450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x571e3c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.11038704456895841, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11038704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b1b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9031a570; to 'JaxprTracer' at 0x7ffb9031b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3fdcef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1124424232150702, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11244242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3060>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71368fa60; to 'JaxprTracer' at 0x7ff71368cb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73889c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.10696793880012234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10696794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407810>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d27830; to 'JaxprTracer' at 0x7ff9f05b70b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64fdfaf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1032474633027227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10324746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115d50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122c6b10; to 'JaxprTracer' at 0x7ff7122c74c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x921afc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.10883700995322608, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10883701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9e60>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711cdafc0; to 'JaxprTracer' at 0x7ff711cdb100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5234ffe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.765693076018954
31, epoch_train_loss=2.765693076018954
Epoch 32
Epoch 32 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10445100639654774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10445101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f1bd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf417b920; to 'JaxprTracer' at 0x7ffcf417ade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa26735b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.0949562916526441, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09495629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a2280>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7045f7e0; to 'JaxprTracer' at 0x7ff9d043bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fb0d5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.04902525624122761, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.04902526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754180>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c654ef0; to 'JaxprTracer' at 0x7ff70c654ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb740f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07272562060285219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07272562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016cb60>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90544310; to 'JaxprTracer' at 0x7ffb905460c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d815d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.10433411123929252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10433411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d4c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4415620; to 'JaxprTracer' at 0x7ffc302d9b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b92bca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.11756416123078113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11756416, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182b460>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713747a10; to 'JaxprTracer' at 0x7ff713746020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95981d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.10578859605187689, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1057886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7e30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3033aca0; to 'JaxprTracer' at 0x7ffc3033be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62c15450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11110995551038717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11110996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6a30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07c2070; to 'JaxprTracer' at 0x7ff9f07c25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87213260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09762032057152369, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09762032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365da0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28550040; to 'JaxprTracer' at 0x7ffb285506d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9aee6cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.11574516702856205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11574517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b9f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0699d50; to 'JaxprTracer' at 0x7ffbd069b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bf30100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.09999758721019178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09999759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f00c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa503f9da0; to 'JaxprTracer' at 0x7ffa503f8900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bf4fcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.11149876586844742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11149877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a0420>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2829fd30; to 'JaxprTracer' at 0x7ffa2829c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x802cf7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.11533336698110513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11533337, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0756c80>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4074b970; to 'JaxprTracer' at 0x7ffa4074b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5812590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.12402330521674479, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12402331, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd65f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304e2a20; to 'JaxprTracer' at 0x7ffc304e1800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x705276d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.12204840894261604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12204841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026db00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306828e0; to 'JaxprTracer' at 0x7ffc30681b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9afa0720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.11578934465445348, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11578934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877bc30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7131f5580; to 'JaxprTracer' at 0x7ff7131f4950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9506cb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.10785224209494651, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10785224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050fe10>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90186110; to 'JaxprTracer' at 0x7ffb90186c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b5e1100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.11193822125750304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11193822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068cae0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307b8a40; to 'JaxprTracer' at 0x7ffb307b9d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f668480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.11485203309978352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11485203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712089430>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0276520; to 'JaxprTracer' at 0x7ffca0274fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6298490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.08913403366465686, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08913403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616850>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9050f600; to 'JaxprTracer' at 0x7ffb9050f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f13a500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.10497412974331628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10497413, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688580>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf06e09a0; to 'JaxprTracer' at 0x7ffbf06e14e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92237ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.12340546587217217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12340547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163b90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf42e4d60; to 'JaxprTracer' at 0x7ffcf42e6a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81485540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.11317769461955679, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11317769, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b500>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2813b790; to 'JaxprTracer' at 0x7ffb2813bec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90260910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.11569503832284386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11569504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4280>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd4310; to 'JaxprTracer' at 0x7ff713cd7740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d3ba8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.10957740975677997, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10957741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463fde0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0682750; to 'JaxprTracer' at 0x7ff9d0681210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99950720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.10591846387465532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10591846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40763ec0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02b9440; to 'JaxprTracer' at 0x7ffca02bb5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x653a6f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.11146429805295721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1114643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b2280>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048cc20; to 'JaxprTracer' at 0x7ffbd0327fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e40c430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.7517564330475324
32, epoch_train_loss=2.7517564330475324
Epoch 33
Epoch 33 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10711339353254243, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10711339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296b40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501ac180; to 'JaxprTracer' at 0x7ffa501ae250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2616e320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.09746321891857566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09746322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05347f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502b6f20; to 'JaxprTracer' at 0x7ffc502b7a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x139f3030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05021407143588337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05021407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160fa0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712cdba60; to 'JaxprTracer' at 0x7ff712cd8450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5543e910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07456550943877398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07456551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427ea10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50489a30; to 'JaxprTracer' at 0x7ffb5048ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29127800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.10726741533953461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10726742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4e90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41a6ca0; to 'JaxprTracer' at 0x7ffb50488ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b3b6340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.12109351402808531, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12109351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829710>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1054a250; to 'JaxprTracer' at 0x7ffc1054b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x21088d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.10853590786300314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10853591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026ebf0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704ee2a0; to 'JaxprTracer' at 0x7ff9f0763880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x424f86f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1143566818756468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11435668, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c570>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0309350; to 'JaxprTracer' at 0x7ffbd030a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b712970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.09992151886719226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09992152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a360>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287976f0; to 'JaxprTracer' at 0x7ffa28796430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d5d86e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.11866251658608544, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11866252, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d92d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad01debb0; to 'JaxprTracer' at 0x7ffad01de5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44dfd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1026450152793185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10264502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115510>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1015b150; to 'JaxprTracer' at 0x7ffc1015b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34b7cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.11440953164880824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11440953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0535920>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50206d90; to 'JaxprTracer' at 0x7ffa50204310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4188e650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.11823696785132218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11823697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162ef0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02b62a0; to 'JaxprTracer' at 0x7ffbf02b5bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82533400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.12766823462611826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12766823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0eb0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4417970; to 'JaxprTracer' at 0x7ffcf4415a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f69df40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1251699690941729, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12516997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d4b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0098db0; to 'JaxprTracer' at 0x7ffab42c9580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf580c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.11855524202297875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11855524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d380>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0480540; to 'JaxprTracer' at 0x7ffad0481260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72ff4c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.11072738821141302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11072739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265ff0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca05fd990; to 'JaxprTracer' at 0x7ffca05fc770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3353dfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.11488146504708924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11488147, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016ef00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca00e4f90; to 'JaxprTracer' at 0x7ffca00e62f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66a51a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1181207131613741, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11812071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0756a10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0415c60; to 'JaxprTracer' at 0x7ff9d0415d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9aa84d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.09135228443832832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09135228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712250>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902a30b0; to 'JaxprTracer' at 0x7ffb902a2200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c755c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.10767294596581603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10767295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5050>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02b47c0; to 'JaxprTracer' at 0x7ffcd02b53f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa731c9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.12703188595252118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12703189, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9c70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304e3b50; to 'JaxprTracer' at 0x7ffc304e34c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3607a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.11602389344169235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11602389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208aab0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94037330; to 'JaxprTracer' at 0x7ffa94034130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c16f4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.11894408219863718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11894408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f2a30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71253d8f0; to 'JaxprTracer' at 0x7ff71253c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a6a81d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.11231983517945171, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11231984, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3cb0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d066c0e0; to 'JaxprTracer' at 0x7ff9f0610c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c2d570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.10873063208340197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10873063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02560b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50153240; to 'JaxprTracer' at 0x7ffa501500e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x858322a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.1141822367578873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11418224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029f120>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30489ad0; to 'JaxprTracer' at 0x7ffa407298f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71a3fe00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.7376675606026883
33, epoch_train_loss=2.7376675606026883
Epoch 34
Epoch 34 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.10975977164329204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10975977, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307ea0a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307bb290; to 'JaxprTracer' at 0x7ffb307b89f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ffc9680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.10002607447171719, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10002607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124ddb70>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3031ba60; to 'JaxprTracer' at 0x7ffb30319710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40de3aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.051363617170766714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05136362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eb530>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3074b010; to 'JaxprTracer' at 0x7ffc3074aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76cb3c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07649527984769965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07649528, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca07559f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124fcae0; to 'JaxprTracer' at 0x7ff7124ffa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x357da2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.11021827479702816, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11021827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067b9b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713987c40; to 'JaxprTracer' at 0x7ffcd0241c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60bc66b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.12453854234304161, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12453854, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c900>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4107830; to 'JaxprTracer' at 0x7ff7c4104e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66b409a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.11125359080496375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11125359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d300>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101822f0; to 'JaxprTracer' at 0x7ffc101815d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d542f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11739983883755915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11739984, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013fa90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad075c5e0; to 'JaxprTracer' at 0x7ffad075f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x484fff30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.10215186698899653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10215187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fd70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc105410d0; to 'JaxprTracer' at 0x7ffc10540720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cca0490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.12146151965714094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12146152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b9a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02a6250; to 'JaxprTracer' at 0x7ffbd02a79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82b82080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.10531247029178548, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10531247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9b00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05caf20; to 'JaxprTracer' at 0x7ff9f05c9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ef865e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.117232858996351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11723286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd3b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0623560; to 'JaxprTracer' at 0x7ffaf0620950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8de18b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.12110291812254625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12110292, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8b10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06cb7e0; to 'JaxprTracer' at 0x7ffbd06ca840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x426383a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1311919619652653, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13119196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0535720>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706d0b30; to 'JaxprTracer' at 0x7ffc706d0450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63b10b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.12811659292815727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12811659, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678480>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404c02c0; to 'JaxprTracer' at 0x7ffa404c3290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fae02b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.12131677138510896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12131677, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01162a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300d36f0; to 'JaxprTracer' at 0x7ffb300d2930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30490180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.11355308220536281, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11355308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829fe0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4755990; to 'JaxprTracer' at 0x7ff7c4757ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dfa63d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.11777614643118156, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11777615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365ba0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02613a0; to 'JaxprTracer' at 0x7ffcd0263ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b3d0400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.12126512195455812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12126512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616ab0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45e9cb0; to 'JaxprTracer' at 0x7ff7c45ebce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x570ebc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.093609525296877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09360953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088070>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70158180; to 'JaxprTracer' at 0x7ffb7015a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60395310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.11029371012266574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11029371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162930>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40222430; to 'JaxprTracer' at 0x7ffab4711300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b9260e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.13052490610486267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13052491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6550>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fdb470; to 'JaxprTracer' at 0x7ff712fd9620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78ef2290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.11883182284641901, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11883182, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712990>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0417c90; to 'JaxprTracer' at 0x7ffcb0446ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37d567f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.12226391542799522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12226392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296f20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05c3a60; to 'JaxprTracer' at 0x7ff9d05c1d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ed44120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.11495124313803672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11495124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06687f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30788c20; to 'JaxprTracer' at 0x7ffb30789b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x480cb0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1114989092841271, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11149891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067ae50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf04000e0; to 'JaxprTracer' at 0x7ffaf04010d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31f87ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.11691821149994469, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11691821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3380>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0206980; to 'JaxprTracer' at 0x7ffaf0204e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8eb937c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.723871318042782
34, epoch_train_loss=2.723871318042782
Epoch 35
Epoch 35 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11251655422713334, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11251655, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265270>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287c9080; to 'JaxprTracer' at 0x7ffa287c8680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6892c870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.10256514650803114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10256515, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9ef0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71368c270; to 'JaxprTracer' at 0x7ff71368f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d082e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05254923389823105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05254923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0297f40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45eba60; to 'JaxprTracer' at 0x7ff7c45eac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10e02ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.07853223491269713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07853223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4be0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5048bf60; to 'JaxprTracer' at 0x7ffca067cd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c9ce00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1131444798179049, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11314448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427dd70>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44fe6b0; to 'JaxprTracer' at 0x7ffab44fd710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x302c5990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.12800025046877045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12800025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943656a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d09030; to 'JaxprTracer' at 0x7ff711d086d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f55bbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.11407156783618541, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11407157, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877b220>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5052c2c0; to 'JaxprTracer' at 0x7ff713692660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43bf55a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12052161640618318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12052162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877be10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7063b8d0; to 'JaxprTracer' at 0x7ffa7063a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b54f1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.10439851956550728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10439852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f330>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900b7ba0; to 'JaxprTracer' at 0x7ffb900b6840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f1526a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.12424418808949145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12424419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029feb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132665c0; to 'JaxprTracer' at 0x7ff713267b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54b0ebd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.10807718456360486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10807718, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02564f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07adf80; to 'JaxprTracer' at 0x7ffcb07afd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x683ce230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.11998721744481389, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11998722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134ba9a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70518270; to 'JaxprTracer' at 0x7ffc7051b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fb48bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.12396505628332831, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12396506, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02973a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0136ed0; to 'JaxprTracer' at 0x7ff9f0135080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x750b5b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.13472399333415971, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13472399, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0820>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5ceac0; to 'JaxprTracer' at 0x7ff70c5cf380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x939c06e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.13107218499107878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13107218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616920>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90544a40; to 'JaxprTracer' at 0x7ffb90547c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5d4eee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.12407376026105435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12407376, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068cf10>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42ef7e0; to 'JaxprTracer' at 0x7ffab42ecdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dee4a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.11626035382120517, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11626035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013c420>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44d5670; to 'JaxprTracer' at 0x7ffab44d5bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61f1ea00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1206379971207229, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.120638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0117860>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9011fe20; to 'JaxprTracer' at 0x7ffb9011ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5894e370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.12441039005344594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12441039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288350>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9432aed0; to 'JaxprTracer' at 0x7ffa94329300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f1fa7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.09597765629945919, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09597766, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754f40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302d8220; to 'JaxprTracer' at 0x7ff7c4557100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d6560d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.11304510859151766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11304511, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6d00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9050e5c0; to 'JaxprTracer' at 0x7ffb9050c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b620af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1339945573850245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13399456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea4c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07aaca0; to 'JaxprTracer' at 0x7ffca07ab1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49765c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.12167084596385987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12167085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e650>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2813be20; to 'JaxprTracer' at 0x7ffb2813b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fc4dd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.12538329083143934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12538329, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f26a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102aeb60; to 'JaxprTracer' at 0x7ffc102ad490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7efce020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.11753474952145351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11753475, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463fd90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904984f0; to 'JaxprTracer' at 0x7ffb9049bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5159e9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.11420410697680278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11420411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9c40>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700be8e0; to 'JaxprTracer' at 0x7ffb700bde40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9804d220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.11961675203026015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11961675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40763e40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06d6570; to 'JaxprTracer' at 0x7ffbd0325670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44118220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.7100435775903784
35, epoch_train_loss=2.7100435775903784
Epoch 36
Epoch 36 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11540988958805719, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11540989, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a91a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05b4f90; to 'JaxprTracer' at 0x7ff9f05b4c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36f28450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.10507926247787469, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10507926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704053c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa284fe840; to 'JaxprTracer' at 0x7ffa284ff600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a5a770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05380548018446099, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05380548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061ad70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0439f80; to 'JaxprTracer' at 0x7ff9d0438e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49be53d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.08054909396380538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08054909, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755d50>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124fdd50; to 'JaxprTracer' at 0x7ff7124fe160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf97db10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.11600624397031722, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11600624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016c9b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd034e520; to 'JaxprTracer' at 0x7ffbd034f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92865300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1314129795874402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13141298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0256e80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ecc70; to 'JaxprTracer' at 0x7ffc100ee840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f293a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.11700196569894146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11700197, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367ca0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf42e70b0; to 'JaxprTracer' at 0x7ffcf42e4130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x288acd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12369447411666512, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12369447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94364680>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5045d760; to 'JaxprTracer' at 0x7ffc5045fba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x703be150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.10676570916386063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10676571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616af0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7041a070; to 'JaxprTracer' at 0x7ffa7041ae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fb58160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1270883255598024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12708833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bc70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0223ba0; to 'JaxprTracer' at 0x7ffcb0223e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97818d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.11088348147418049, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11088348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aa940>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb041c950; to 'JaxprTracer' at 0x7ff70c0a74c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dac07e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.12277026415661159, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12277026, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70406730>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fafd80; to 'JaxprTracer' at 0x7ff711faed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c4666d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.12685959578624892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1268596, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70618fe0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702c97b0; to 'JaxprTracer' at 0x7ffb702cbec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ec45e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.138155409821226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13815541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b81c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700dd9e0; to 'JaxprTracer' at 0x7ffa700dc3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9af9b500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.13409827036125718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13409827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067bd10>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f9a980; to 'JaxprTracer' at 0x7ff712f9ab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72534c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.12692599828746856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.126926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01140e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45b4680; to 'JaxprTracer' at 0x7ff713751b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6be6d0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.11900285803118107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11900286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050df70>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70099f80; to 'JaxprTracer' at 0x7ffa70098720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bcb84c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.12353365148859946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12353365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088c10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf43a62f0; to 'JaxprTracer' at 0x7ffcf43a7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x783e62f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1275106054884167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12751061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0535360>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd07637e0; to 'JaxprTracer' at 0x7ffbd0760630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ca52a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.09842740972891419, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09842741, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e5e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02accc0; to 'JaxprTracer' at 0x7ffcb02ae0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x743f4520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.115990846337519, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11599085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295910>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b4e250; to 'JaxprTracer' at 0x7ff712b4f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x684f0c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.13737067245640677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13737067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068ba70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7051a1b0; to 'JaxprTracer' at 0x7ffc70519d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a93e500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.12462169396001449, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12462169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507105e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9011cd60; to 'JaxprTracer' at 0x7ffb9011d990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa067c380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.12854946852750812, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12854947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac150>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30576390; to 'JaxprTracer' at 0x7ffb30574e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aaf3800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.12021735178774667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12021735, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0ac0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab425c9f0; to 'JaxprTracer' at 0x7ffab425c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c101bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.11694914298002813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11694914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7b70>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701511c0; to 'JaxprTracer' at 0x7ffa70152a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cbe0a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.1224684692151188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12246847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3da0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712795b70; to 'JaxprTracer' at 0x7ff712795cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x843c2cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.6960620824852684
36, epoch_train_loss=2.6960620824852684
Epoch 37
Epoch 37 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.11845305136444938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11845305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013ef60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305d8040; to 'JaxprTracer' at 0x7ffb305d8360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x21215390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.10772418561935902, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10772419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b190>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713edbab0; to 'JaxprTracer' at 0x7ff713ed9d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a797390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05514001506016421, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05514002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702af400>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30066c00; to 'JaxprTracer' at 0x7ffb30065c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4eaa210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.08268318804341399, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08268319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015ce30>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0286750; to 'JaxprTracer' at 0x7ff7c45eb3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d936d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.11886043526791194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11886044, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6970>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f99760; to 'JaxprTracer' at 0x7ffc50664ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39ad6d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.13473273086671742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13473273, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785980>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9473f600; to 'JaxprTracer' at 0x7ffa9473c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5130e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.11999816519827276, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11999817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257a00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0432cf0; to 'JaxprTracer' at 0x7ffcd0431c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58e336d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12690884932945404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12690885, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0256f50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703385e0; to 'JaxprTracer' at 0x7ffb70338cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b3b03c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.10929522996761859, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10929523, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067af50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07c2890; to 'JaxprTracer' at 0x7ff9f07c3600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x797db380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.13005031943454037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13005032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3ed0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01470b0; to 'JaxprTracer' at 0x7ffbf01442c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8962aed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1137628558597918, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11376286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013f930>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504dcb30; to 'JaxprTracer' at 0x7ffa504ddd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d1a51a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.12569276067885102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12569276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067ae50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4296f20; to 'JaxprTracer' at 0x7ffcf42961b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95349960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.12988266315660252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12988266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ad7d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02d0a40; to 'JaxprTracer' at 0x7ffbb02d0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa361ab00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.14156770082823805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1415677, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0668460>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd00988b0; to 'JaxprTracer' at 0x7ffbd009a070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e2d5830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1372713805041108, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13727138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5710>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07151c0; to 'JaxprTracer' at 0x7ffca0714630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63d93a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.12991209736820375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1299121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b400>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0cdad0; to 'JaxprTracer' at 0x7ff70c0cc720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x287dd9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.12189645947956439, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12189646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877bff0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ab5b0; to 'JaxprTracer' at 0x7ffbb02aab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c42e570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.12652835973216886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12652836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a0b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd7bf0; to 'JaxprTracer' at 0x7ff713cd4d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70beb590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.13066595171345574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13066595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea420>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70065260; to 'JaxprTracer' at 0x7ffc70064bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x789b5c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10097949320490973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10097949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507139e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0557fb0; to 'JaxprTracer' at 0x7ffc70496bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78157ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.11896802196647581, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11896802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061bd30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0447fb0; to 'JaxprTracer' at 0x7ff9d0417560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d5098c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1407946282899113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14079463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f3cf0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0a5490; to 'JaxprTracer' at 0x7ff70c0a58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x928cc490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.12773626232115534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12773626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689d50>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb065e020; to 'JaxprTracer' at 0x7ffcb065fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x838793b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1319034572525493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13190346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0669820>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b4dd00; to 'JaxprTracer' at 0x7ff712b4e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7439acf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.12308846189904069, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12308846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8a10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f3eb10; to 'JaxprTracer' at 0x7ffca047cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e213900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1198128656046715, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11981287, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829920>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70542a70; to 'JaxprTracer' at 0x7ffc30545620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c98e420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.12554059233497716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12554059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba2e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02edda0; to 'JaxprTracer' at 0x7ffbb02ef4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51acf190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.6816933773722527
37, epoch_train_loss=2.6816933773722527
Epoch 38
Epoch 38 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12148456770775473, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12148457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050ed40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902d27a0; to 'JaxprTracer' at 0x7ffb902d3f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb9b0b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.11048696861536028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11048697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296920>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0611a80; to 'JaxprTracer' at 0x7ff9f0611940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x981e4010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05655525942428025, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05655526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b660>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06a8fe0; to 'JaxprTracer' at 0x7ff712831940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22d841d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.08485225843847219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08485226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df420>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a446b650; to 'JaxprTracer' at 0x7ff7a44682c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b920150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.12177459130213876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12177459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea2d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd034e570; to 'JaxprTracer' at 0x7ffbd034f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c5352c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1381680653245094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13816807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289540>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0434cc0; to 'JaxprTracer' at 0x7ffaf0435a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39b20c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.12313892305511513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12313892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365620>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa943601d0; to 'JaxprTracer' at 0x7ffa94362390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98cf3290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.13037330566513144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13037331, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94366620>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02f3560; to 'JaxprTracer' at 0x7ffbb02f3dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32803910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.11199149407197838, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11199149, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b7850>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07c30b0; to 'JaxprTracer' at 0x7ffcd07c2bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8838efb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.13317392388099114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13317392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b7f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304bdb70; to 'JaxprTracer' at 0x7ffc304bd760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4278a150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.11667710608517992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11667711, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050e690>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50150310; to 'JaxprTracer' at 0x7ffa50150cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50c99a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.12875267705847984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12875268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296dc0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd030aca0; to 'JaxprTracer' at 0x7ffbd0308c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31456140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.13302472251444467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13302472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0668360>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702c8590; to 'JaxprTracer' at 0x7ff7c47e98f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ae54540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.14510577529252988, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14510578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679260>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700de340; to 'JaxprTracer' at 0x7ffb302f9bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x822bcba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.14060066311492897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14060066, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9cc0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa945e9210; to 'JaxprTracer' at 0x7ffaf06b2ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82c9b840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1330357201662665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13303572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067ada0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca067dd00; to 'JaxprTracer' at 0x7ffca067e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e04ad00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.12489703970640989, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12489704, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0254ea0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb3f60; to 'JaxprTracer' at 0x7ff713eb0c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x183109e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1296263366608762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12962634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46166d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28754bd0; to 'JaxprTracer' at 0x7ffa28757dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x968d0d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.13393381021680711, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13393381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015cf90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4585e40; to 'JaxprTracer' at 0x7ff7c4587920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84e5a420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10362246835539943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10362247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b8f00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2811de40; to 'JaxprTracer' at 0x7ffb2811c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fbfcde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.12197621851129443, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12197622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688190>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712827380; to 'JaxprTracer' at 0x7ff7128278d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7efd2690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.14432833151548613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14432833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7cb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506bbce0; to 'JaxprTracer' at 0x7ffcf41f3920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540896a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.13101853712917083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13101854, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f21e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e1580; to 'JaxprTracer' at 0x7ffc70065e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90305120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.13538169916826315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1353817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067a8c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0446570; to 'JaxprTracer' at 0x7ffbb01631f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x669ccff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1261154108104802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12611541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7af0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb065fce0; to 'JaxprTracer' at 0x7ffcb065d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ab3fb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.12278949762150167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1227895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8570>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2862aed0; to 'JaxprTracer' at 0x7ffb2862ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c651be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.12875958052331793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12875958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712089160>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102dd4e0; to 'JaxprTracer' at 0x7ff713c4b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d3bc4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.6667898830816874
38, epoch_train_loss=2.6667898830816874
Epoch 39
Epoch 39 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12471535387922858, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12471535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7118280a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94707a10; to 'JaxprTracer' at 0x7ffa94704d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31e04220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.11340784094718466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11340784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619c20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06c9210; to 'JaxprTracer' at 0x7ffbd06c8680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68bab60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.05805709492503898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05805709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067be90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5eb330; to 'JaxprTracer' at 0x7ff70c5ea890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43d2350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.08707629095128462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08707629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ae510>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd040d030; to 'JaxprTracer' at 0x7ffbb0162fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9edf7ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.12477661696661028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12477662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536130>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb04c0590; to 'JaxprTracer' at 0x7ffbb04c3ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d9f6050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.14163137613487986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14163138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07854c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47ebf10; to 'JaxprTracer' at 0x7ff7c47eb240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69d8cdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1263184638345315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12631846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d8c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca00a6cf0; to 'JaxprTracer' at 0x7ffca00a7a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59658a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.13391194195525843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13391194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013f150>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a446ff10; to 'JaxprTracer' at 0x7ff7a446c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x347f4580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.1148849928743779, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11488499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679d90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141c52b0; to 'JaxprTracer' at 0x7ff7141c6e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71358200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.13653722972949983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13653723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e3f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f3420; to 'JaxprTracer' at 0x7ff9d05f1d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25b7c150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.11968124582897086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11968125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182ae70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700bfab0; to 'JaxprTracer' at 0x7ffb700bc2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40f21630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.13201750268802773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1320175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70618cf0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504cebb0; to 'JaxprTracer' at 0x7ffc504ce5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49bf8230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.13633226195932188, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13633226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10678bd0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4558d60; to 'JaxprTracer' at 0x7ff7c455b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e46fc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.14874577974017827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14874578, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160080>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4416ca0; to 'JaxprTracer' at 0x7ffcf44155d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fcc4dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.14411313922240657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14411314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0534ac0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05551c0; to 'JaxprTracer' at 0x7ffbf0557ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36d8c210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1363196512716093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13631965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6e20>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e3010; to 'JaxprTracer' at 0x7ffb307e1530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a61d3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1280594724282259, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12805947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365760>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0635c60; to 'JaxprTracer' at 0x7ff9d04398a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51c44a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.132858334279227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13285833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754ff0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47b9da0; to 'JaxprTracer' at 0x7ffab47b8b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48b9ec20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.13731036395922955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13731036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507131d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad06c2840; to 'JaxprTracer' at 0x7ff712831990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bd68bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10640615966445964, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10640616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df5b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a43913a0; to 'JaxprTracer' at 0x7ff7a4392020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47ef5a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.12509124001132724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12509124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f21a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f077e430; to 'JaxprTracer' at 0x7ff9f077d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b19d4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.14801265561338944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14801266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0668560>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0481620; to 'JaxprTracer' at 0x7ffad0482430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68c91bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.13450767239666908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13450767, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7e30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7012c900; to 'JaxprTracer' at 0x7ffc307128e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9691ca10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.13897604750503173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13897605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160790>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c456e070; to 'JaxprTracer' at 0x7ff7c456f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bd68480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.12933874696993355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12933875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b1eb0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c7f010; to 'JaxprTracer' at 0x7ff713c7f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa11db3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.12591308182245783, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12591308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050fc10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711dae5c0; to 'JaxprTracer' at 0x7ff70c669cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fefb8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.13221535998170977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13221536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761670>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf01bdbc0; to 'JaxprTracer' at 0x7ffaf01bdd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55727bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.651283847344223
39, epoch_train_loss=2.651283847344223
Epoch 40
Epoch 40 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.12807716745868275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12807717, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0254e80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7075ac50; to 'JaxprTracer' at 0x7ffb70758680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1eb9b9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.11676320816913398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11676321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d0c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0763d30; to 'JaxprTracer' at 0x7ffbd0763380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x762f9ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0596815427163067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.05968154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162440>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902d1e90; to 'JaxprTracer' at 0x7ffb902d2110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x213558c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.08945525249658035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08945525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704061d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d043ab60; to 'JaxprTracer' at 0x7ff9d043b1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29274aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1280236616945214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12802366, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eaa60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70362660; to 'JaxprTracer' at 0x7ffa70363f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e6a56a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.14534901764935396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14534902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288670>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10181800; to 'JaxprTracer' at 0x7ffc10181d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e3a2bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.12968475584086253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12968476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786f40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2813b560; to 'JaxprTracer' at 0x7ffb2813b5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6abcd4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1376873168493072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13768732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785f30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94363ba0; to 'JaxprTracer' at 0x7ffa94361d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ae2d6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.11805349743250644, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1180535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536a00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02207c0; to 'JaxprTracer' at 0x7ffcb0222520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3727cc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.14015370611345582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14015371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b840>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40272d90; to 'JaxprTracer' at 0x7ffa40270db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c7cfb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.12287377672086469, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12287378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257eb0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa407498f0; to 'JaxprTracer' at 0x7ffa40748770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73957310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.13554231449805368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13554231, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026fed0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fade90; to 'JaxprTracer' at 0x7ff711fafd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d5a6930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.13991659691462624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1399166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160240>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0c93f0; to 'JaxprTracer' at 0x7ff70c0c9b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dfa65b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.15264877123022144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15264877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068f150>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00fed40; to 'JaxprTracer' at 0x7ffbb00fc8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b4f2dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.14787403247788847, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14787403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eb5c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507631a0; to 'JaxprTracer' at 0x7ffb507627a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4872e460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1398794388134431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13987944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678d50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0457fb0; to 'JaxprTracer' at 0x7ffcd04565c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa60c41a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1314883205916511, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13148832, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06db2d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04b0ef0; to 'JaxprTracer' at 0x7ffcb04b31a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2259b520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1363548178690049, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13635482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b47f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504282c0; to 'JaxprTracer' at 0x7ffc5042b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4640eea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.14096927764352726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14096928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac550>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06ca020; to 'JaxprTracer' at 0x7ffbd06c9800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54896c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.10941246759072834, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10941247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266e90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c607c40; to 'JaxprTracer' at 0x7ff70c6041d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cd279c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.1283697117285215, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12836971, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6bf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100c8d60; to 'JaxprTracer' at 0x7ffc100cb970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x507530b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.15197903389349518, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15197903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f310>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712079e40; to 'JaxprTracer' at 0x7ff71207bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7478edf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1382601340179434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13826013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b560>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47bae30; to 'JaxprTracer' at 0x7ffab47b90d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a0ac180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.14288270696597433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14288271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a320>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c62c1d0; to 'JaxprTracer' at 0x7ff70c62dad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x608d8f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.13285174446135484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13285174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427eb40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4621e40; to 'JaxprTracer' at 0x7ff7c4622020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d777c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.12930462682167593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12930463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287791c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb060db70; to 'JaxprTracer' at 0x7ffcb060cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x319e63d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.13594965073225296, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13594965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1c70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120833d0; to 'JaxprTracer' at 0x7ff7120839c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32eacf00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.6346222029639557
40, epoch_train_loss=2.6346222029639557
Epoch 41
Epoch 41 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.13199582682389072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13199583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46157d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a43906d0; to 'JaxprTracer' at 0x7ff7a4391c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xdc88220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.1205111019552798, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1205111, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5a20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf40388b0; to 'JaxprTracer' at 0x7ffcf403bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8386a210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.061469483093338315, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06146948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068dbe0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa943288b0; to 'JaxprTracer' at 0x7ffa9432a750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20b06160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09208969057462853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09208969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265c70>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a411d530; to 'JaxprTracer' at 0x7ff7a411f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x277c2130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.13160143543915487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13160144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536fd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048f880; to 'JaxprTracer' at 0x7ffc5048f240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a79c540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.14936153563972995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14936154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9040>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f862a0; to 'JaxprTracer' at 0x7ffbb00fd800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e1e7790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.13323281189716973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13323281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42880b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702be3e0; to 'JaxprTracer' at 0x7ffc702be6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d379670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.14173649599076207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1417365, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a950>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307d7b50; to 'JaxprTracer' at 0x7ffc307d7ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x439cf170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.12155710179004599, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1215571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de270>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28372750; to 'JaxprTracer' at 0x7ffb28373c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57e15cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.14405107065570993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14405107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755f20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0221580; to 'JaxprTracer' at 0x7ffcb0220130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35518f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1263581141871848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12635811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94366110>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504de7f0; to 'JaxprTracer' at 0x7ffa504dc0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x481ca4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1393625545067224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13936255, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4d40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fbcea0; to 'JaxprTracer' at 0x7ff712fbf380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7abf00f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1438391465766998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14383915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068cb60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0439850; to 'JaxprTracer' at 0x7ffbb051b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b250850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.15687434409466247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15687434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8aa0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d49a0; to 'JaxprTracer' at 0x7ffb302d7420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cf59a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.15196854620738295, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15196855, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bacb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07e7e20; to 'JaxprTracer' at 0x7ffbd0098270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c9d6020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.14380565566767955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14380566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4850>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f074cef0; to 'JaxprTracer' at 0x7ff9f074e070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x257580f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.13524324513552843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13524325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013eb30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0247e20; to 'JaxprTracer' at 0x7ffca0246840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5033fe00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.14017503252125724, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14017503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea4f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902d3740; to 'JaxprTracer' at 0x7ffb902d0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a909b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.14494097757854948, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14494098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0114ee0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf43f3560; to 'JaxprTracer' at 0x7ffcf43f3060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d2ae900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.11268917756336323, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11268918, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06699f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50683560; to 'JaxprTracer' at 0x7ffa50682b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1a02d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.13176300681551195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13176301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf01601d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45b5530; to 'JaxprTracer' at 0x7ff7c45b6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a7358c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.156252784143431, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15625278, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294b70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00fde40; to 'JaxprTracer' at 0x7ffbd030af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa60b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1423413677572559, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14234137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc106785b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50638360; to 'JaxprTracer' at 0x7ffc50639760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62f569a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.14719208824085397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14719209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb710>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02a6c50; to 'JaxprTracer' at 0x7ffbd02a7150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0674db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1367182106865691, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13671821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255cf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700bd5d0; to 'JaxprTracer' at 0x7ffbb02ea930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70b0fcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.13302363330889821, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13302363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c210>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70067f60; to 'JaxprTracer' at 0x7ffc70065080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c5beee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.14004449147992523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14004449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07ab580>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06c9300; to 'JaxprTracer' at 0x7ffbb06c9170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a5f30d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.6164870928069663
41, epoch_train_loss=2.6164870928069663
Epoch 42
Epoch 42 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.13599570569298416, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13599571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d9830>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713773d30; to 'JaxprTracer' at 0x7ff7137700e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5268ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.12453146796587869, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12453147, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088790>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141ce2a0; to 'JaxprTracer' at 0x7ff7141cdcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1daf4330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06342567093514258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06342567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689330>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42cb150; to 'JaxprTracer' at 0x7ffab42c9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a1d1a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09502403346824927, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09502403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294660>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71253f510; to 'JaxprTracer' at 0x7ff71253c310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ce3ea80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.13539339673133371, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1353934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066ba80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0637fb0; to 'JaxprTracer' at 0x7ff711d31080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15589b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.15363941316463542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15363941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc7b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106f2c50; to 'JaxprTracer' at 0x7ffc106f12b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfd16230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1370351860546158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13703519, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288470>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c42f9fd0; to 'JaxprTracer' at 0x7ff712cdb880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42e88610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.14619975437818736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14619975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428bea0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30476340; to 'JaxprTracer' at 0x7ffc30476890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa17287e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.12539359493897506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12539359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537700>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b4e2f0; to 'JaxprTracer' at 0x7ff712b4d350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x543fb8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1482472657240012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14824727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98ba70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71328bd80; to 'JaxprTracer' at 0x7ff7132881d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53af3fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1301669265809654, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13016693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06dbf50>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44fd1c0; to 'JaxprTracer' at 0x7ffab44fd710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ddf150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.14348619615749286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1434862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208baf0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280ce070; to 'JaxprTracer' at 0x7ffb280cecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38aa6720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.14801781344843462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14801781, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb906896c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5024b060; to 'JaxprTracer' at 0x7ffc50248f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x507585a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.16139689689508577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1613969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182bb70>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713714090; to 'JaxprTracer' at 0x7ff713716ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22876270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.15645773642291028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15645774, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066a3c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0455c10; to 'JaxprTracer' at 0x7ffcd0456c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x754cdd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.14797492907362117, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14797493, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01146c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45eb150; to 'JaxprTracer' at 0x7ff7c45ea250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41f55a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.1393038537719992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13930385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367680>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa943365c0; to 'JaxprTracer' at 0x7ffa943379c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99445810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.14425585569045313, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14425586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e92b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9432a070; to 'JaxprTracer' at 0x7ffa94328310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x750d3cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.14921385946410234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14921386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9720>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04bb4c0; to 'JaxprTracer' at 0x7ffbd04bba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x723754b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.11622513627285996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11622514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502648f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90499760; to 'JaxprTracer' at 0x7ffb9049aa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314f4ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.13534203238144848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13534203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463da10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10541da0; to 'JaxprTracer' at 0x7ffcd07c2020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7402b1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.16081195340825838, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16081195, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068ce00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0645f80; to 'JaxprTracer' at 0x7ff9d0645580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x369cb750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1466906107583716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14669061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026fc20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd049dee0; to 'JaxprTracer' at 0x7ffcd049c4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a3a37a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.15191660300152382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1519166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182b7a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa945eb1f0; to 'JaxprTracer' at 0x7ffa945e80e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x472c0350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.14092617860824924, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14092618, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46177e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0a4b30; to 'JaxprTracer' at 0x7ff70c0a5210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4729e740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.13705284981578822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13705285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b3630>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30744b30; to 'JaxprTracer' at 0x7ffb30744680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa55bd400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.14440539565313876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1444054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6380>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0092200; to 'JaxprTracer' at 0x7ffbf0092a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24746180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.597054720610874
42, epoch_train_loss=2.597054720610874
Epoch 43
Epoch 43 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1400383917037648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14003839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3950>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d03baed0; to 'JaxprTracer' at 0x7ff9d03b9c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x189bf520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.12859339581467535, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1285934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d7c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712832de0; to 'JaxprTracer' at 0x7ff712833970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb5cb600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0655374532862219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06553745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf01626c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940358a0; to 'JaxprTracer' at 0x7ffa94034770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x701bf920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.09815541377759823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09815541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619b20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902a1260; to 'JaxprTracer' at 0x7ffb902a3dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53b171d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.13937918717166545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13937919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc106793d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50760630; to 'JaxprTracer' at 0x7ffb507601d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c4ba90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.15823343147274252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15823343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702af580>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9409bbf0; to 'JaxprTracer' at 0x7ffa94098fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84f44490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.14136255515815174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14136256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779530>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cafbf0; to 'JaxprTracer' at 0x7ff713cad9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48706790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1508898531561485, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15088985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287794a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4056ede0; to 'JaxprTracer' at 0x7ffa4056e160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ff3b680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.12953885865069237, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12953886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dce90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9028cf90; to 'JaxprTracer' at 0x7ffb9028cd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d91b370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1526921459605346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15269215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a84e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad075c450; to 'JaxprTracer' at 0x7ffad075eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x799e2420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.13419343508052184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13419344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2ca0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf43a7a60; to 'JaxprTracer' at 0x7ffcf43a7a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5425b5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.14789104461832983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14789104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c630>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137460c0; to 'JaxprTracer' at 0x7ff713745670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a4b7100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1524429112321668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15244291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160970>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713504db0; to 'JaxprTracer' at 0x7ff713504720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85c3eb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.16624306938347164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16624307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a8a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0714ea0; to 'JaxprTracer' at 0x7ffca07177e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x372b1ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1611885684407763, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16118857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067a430>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f078ea70; to 'JaxprTracer' at 0x7ff9f078ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10705b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.15236667103088977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15236667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b8fe0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f078c720; to 'JaxprTracer' at 0x7ffc10091cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77371360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.143638939708956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14363894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786890>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711cdb5b0; to 'JaxprTracer' at 0x7ff711cd8bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50a28900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.14858065166973144, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14858065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712f30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71188f9c0; to 'JaxprTracer' at 0x7ff71188f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ceb44f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.15381579722084673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1538158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0116620>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc505e68e0; to 'JaxprTracer' at 0x7ffc505e75b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a0afea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.12004550875486286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12004551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b8d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa943409f0; to 'JaxprTracer' at 0x7ffa94342ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa19e0a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.13915528297227028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13915528, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7bd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9031b650; to 'JaxprTracer' at 0x7ffb90318810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x920a8db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.16571603894984327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16571604, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141baa60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca043bc40; to 'JaxprTracer' at 0x7ffca0439620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34fac4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.15129846035034675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15129846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182ba30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca00a5b20; to 'JaxprTracer' at 0x7ffca00a6ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d748b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.15705566819802186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15705567, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a010>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e1670; to 'JaxprTracer' at 0x7ffb307e32e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5592b920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.14543910883434116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14543911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257d50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b51b20; to 'JaxprTracer' at 0x7ff711b51580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5abd4d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1413594007289596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1413594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06db8f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c42f9990; to 'JaxprTracer' at 0x7ffbb066ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78933f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.148983208721497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14898321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b050>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30780400; to 'JaxprTracer' at 0x7ffb30783e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c491e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.5763986840847823
43, epoch_train_loss=2.5763986840847823
Epoch 44
Epoch 44 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1443499592421506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14434996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0850>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7136ec590; to 'JaxprTracer' at 0x7ff7136edc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54550640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.13299948788842061, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13299949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f1990>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb2d40; to 'JaxprTracer' at 0x7ff713eb2ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24c48930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.06777952356900412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.06777952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255bf0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4731170; to 'JaxprTracer' at 0x7ffab47335b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f325b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.10158669764217712, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1015867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d400>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40222610; to 'JaxprTracer' at 0x7ffa40222660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x387a8480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.14355629294686933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14355629, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02964d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb068ebb0; to 'JaxprTracer' at 0x7ffcb068c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x138eba20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.16307871584403233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16307872, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704050a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712a85f80; to 'JaxprTracer' at 0x7ff712a85fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x613fea10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1458450902558378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14584509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779770>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02fec00; to 'JaxprTracer' at 0x7ffbf02fea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63bf6920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1555761850279809, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15557619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778910>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c605a30; to 'JaxprTracer' at 0x7ff70c6066b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d8e7250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.13393139339143253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13393139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502649d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28550810; to 'JaxprTracer' at 0x7ffb285535b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd53d1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1573603957267231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1573604, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bac0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf420e070; to 'JaxprTracer' at 0x7ffcf420cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x499d7880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.138412873645446, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13841287, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0c60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44fcea0; to 'JaxprTracer' at 0x7ffab44fe980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x748c0010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1525340915895788, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15253409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0430>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04d4d10; to 'JaxprTracer' at 0x7ffad04d42c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62970d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.15709250579055808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15709251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255360>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f9a9d0; to 'JaxprTracer' at 0x7ff712f99260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x427027f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.17134697674401586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17134698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf01618f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0404860; to 'JaxprTracer' at 0x7ffca04060c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x645a0b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.16608827788713645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16608828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296d30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50761080; to 'JaxprTracer' at 0x7ffb50763d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96f03290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.15698203418556433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15698203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0114620>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502b6020; to 'JaxprTracer' at 0x7ffb2819af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78ed6010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.14821363338884921, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14821363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428bd20>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06bc360; to 'JaxprTracer' at 0x7ffb285ba610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52fda1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1531295045774233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1531295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac100>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5c2020; to 'JaxprTracer' at 0x7ff70c5c30b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97d11dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.15869673132354267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15869673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b520>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501adf80; to 'JaxprTracer' at 0x7ffa501aec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c56c310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.12412275941480135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12412276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e150>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad06c18f0; to 'JaxprTracer' at 0x7ffad0483100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x352e56d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.14329498050660042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14329498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70618fd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0758a40; to 'JaxprTracer' at 0x7ffbf0758b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76c1b100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.17087820087878358, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1708782, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182b1e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132cb150; to 'JaxprTracer' at 0x7ff7132c9940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x894cb8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.15616174639832184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15616175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689530>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713266f20; to 'JaxprTracer' at 0x7ff713264e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f1b0e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.162496378254527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16249638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7e30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7043a340; to 'JaxprTracer' at 0x7ffc7043afc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1858dac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.15021244754740898, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15021245, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c0e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07c0770; to 'JaxprTracer' at 0x7ffcd07c3fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26728d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.14590409964784723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1459041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015dcc0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb048d7b0; to 'JaxprTracer' at 0x7ffbb048ea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa02cf510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15379133283963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15379133, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029fbb0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711ff9260; to 'JaxprTracer' at 0x7ff711ff9710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x325fb960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.55470046465976
44, epoch_train_loss=2.55470046465976
Epoch 45
Epoch 45 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.14881385444252102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14881385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8660>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f006c270; to 'JaxprTracer' at 0x7ff9f006f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7adb5fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.1372412838424195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13724128, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c6d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306f49a0; to 'JaxprTracer' at 0x7ffc306f7ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x358cd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07010938411512069, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07010938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829910>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ed9df0; to 'JaxprTracer' at 0x7ff713ed92b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25cd83f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.10505304157773651, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10505304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b420>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb063b330; to 'JaxprTracer' at 0x7ff711d09580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69c6ab60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1478729784442368, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14787298, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac3c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c67f3d0; to 'JaxprTracer' at 0x7ffbf072d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18524f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.16800769882346042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1680077, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a560>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900996c0; to 'JaxprTracer' at 0x7ffb9009b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82e7c090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1502751340488957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15027513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b190>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4056c1d0; to 'JaxprTracer' at 0x7ffa4056fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3218b5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1602511378146402, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16025114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b530>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05558a0; to 'JaxprTracer' at 0x7ffbf0556840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79b328d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.13848013012731294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13848013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8d00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb041f290; to 'JaxprTracer' at 0x7ffcb041cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30675f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.16219338899349275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16219339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b60a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0147d30; to 'JaxprTracer' at 0x7ffc300eeca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3362fc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.14277199426090897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14277199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786ef0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c607d80; to 'JaxprTracer' at 0x7ff70c6078d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x862b0920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1573438198456007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15734382, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050d150>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124fc310; to 'JaxprTracer' at 0x7ff7124fe200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39366bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.1619063552159386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16190636, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a8a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04e1490; to 'JaxprTracer' at 0x7ffbf04e2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9db8e510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.17653468346137766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17653468, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f21c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2833b560; to 'JaxprTracer' at 0x7ff711d32f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x369dd900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.17112547171705197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17112547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502672b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10092cf0; to 'JaxprTracer' at 0x7ffc10091580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b235290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.16176487571793105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16176488, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f6f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900d6fc0; to 'JaxprTracer' at 0x7ffb900d5ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e837150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.15295983212577693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15295983, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704062e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0622c50; to 'JaxprTracer' at 0x7ff70c3b62f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x138024b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.15784087680895595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15784088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295560>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506bad90; to 'JaxprTracer' at 0x7ffb506bb790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3171ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16366515787045735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16366516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6760>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707585e0; to 'JaxprTracer' at 0x7ffb70759a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f07c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.12831802002656809, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12831802, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068ac60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702844a0; to 'JaxprTracer' at 0x7ffc70284180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68e432e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.1476286295349361, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14762863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02567a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa945e9350; to 'JaxprTracer' at 0x7ffa945e9f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f424a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.1761151626846095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17611516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407635b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0447f60; to 'JaxprTracer' at 0x7ffcb0444bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54ae6ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.16120356939459493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16120357, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fb30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb283707c0; to 'JaxprTracer' at 0x7ffb28370950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa068fbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.16778813370498163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16778813, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f190>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94360220; to 'JaxprTracer' at 0x7ffa94363150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540a5f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.155174642837453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15517464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943666b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702bf330; to 'JaxprTracer' at 0x7ffc702bdb20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6718eeb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15062136247995683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15062136, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8c90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb053ddf0; to 'JaxprTracer' at 0x7ffbb053d1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dc4fcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.15878350404307917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1587835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506790c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7136dee80; to 'JaxprTracer' at 0x7ff7a418ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa195d660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.532627296442608
45, epoch_train_loss=2.532627296442608
Epoch 46
Epoch 46 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.15470755682804052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15470756, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b650>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa284ff240; to 'JaxprTracer' at 0x7ffbb00b37e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4102e500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.14289375183643477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14289375, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013e860>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71368e070; to 'JaxprTracer' at 0x7ff71368e9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x347f3de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07249655987733931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07249656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762ec0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702ca7f0; to 'JaxprTracer' at 0x7ffb702c89f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x733d4470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.108275370044357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10827537, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5950>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7009bba0; to 'JaxprTracer' at 0x7ffa7009ae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fac6f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.15227383031610287, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15227383, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bada0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf40c02c0; to 'JaxprTracer' at 0x7ffcf40c2110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa13b9040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.17303121339948332, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17303121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066ab70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad043b510; to 'JaxprTracer' at 0x7ffad043a930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f1afd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1553562330532224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15535623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016fcb0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0518a40; to 'JaxprTracer' at 0x7ffbb0518270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3933f180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1650124160075563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16501242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016fc60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f51670; to 'JaxprTracer' at 0x7ff712f50950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x424c5390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14312905449082278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14312905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265c80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904cdda0; to 'JaxprTracer' at 0x7ffb904cddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a44b360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.16712672916688892, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16712673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b630>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06e0860; to 'JaxprTracer' at 0x7ffaf06e21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c39f8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.14721627841174414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14721628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289fa0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9463aac0; to 'JaxprTracer' at 0x7ffa946390d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d910210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.16226032763048787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16226033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013dc50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb030d760; to 'JaxprTracer' at 0x7ff71345dc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57bbb910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.16683215291089523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16683215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40763100>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70689d50; to 'JaxprTracer' at 0x7ffc70689260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38f50990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.18181647798756279, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18181648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9e60>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50664bd0; to 'JaxprTracer' at 0x7ffc50665a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa55fff60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1762434988544223, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1762435, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb540>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0731300; to 'JaxprTracer' at 0x7ffca0733290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f7d4c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.1666610694030074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16666107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0669800>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07c65c0; to 'JaxprTracer' at 0x7ffca07c52b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ef24e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.15783403025751314, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15783403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779020>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50204630; to 'JaxprTracer' at 0x7ffa502055d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3de45730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.16267081728549915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16267082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bbde0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0226430; to 'JaxprTracer' at 0x7ffca0227290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3415d5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.16870849906942612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1687085, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4617430>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05e7290; to 'JaxprTracer' at 0x7ff9f05e5f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cb37f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1327205475742221, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13272055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e3e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f006c310; to 'JaxprTracer' at 0x7ff9f006db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ac23030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.1519453601343489, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15194536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a7b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0762b10; to 'JaxprTracer' at 0x7ffbd0763600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f4f8c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.18148220704363155, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18148221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4d80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713caec50; to 'JaxprTracer' at 0x7ff713cad800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b62d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1663525993530275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1663526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688ad0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb076d350; to 'JaxprTracer' at 0x7ffb900d7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a34070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17280635018786344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17280635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea450>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4667560; to 'JaxprTracer' at 0x7ff7a46651c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47516ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.16025364168338893, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16025364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70618280>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06d6390; to 'JaxprTracer' at 0x7ffaf06d4900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x634a7590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.15545924048788684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15545924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463c2c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca067ec00; to 'JaxprTracer' at 0x7ffca067d760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28c0f190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16388526858284777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16388527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050f920>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71322bf10; to 'JaxprTracer' at 0x7ff71322bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ade56c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.509540080963978
46, epoch_train_loss=2.509540080963978
Epoch 47
Epoch 47 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16015661209843413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16015661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405620>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0623470; to 'JaxprTracer' at 0x7ffaf06233d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67ae36e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.14832058195484688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14832058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9780>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9473e2a0; to 'JaxprTracer' at 0x7ffa9473e110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35317750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.0749212684636341, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07492127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf01638c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504cc7c0; to 'JaxprTracer' at 0x7ffc504cccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76e796b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.11153910979269477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11153911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4617750>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c669800; to 'JaxprTracer' at 0x7ff70c66a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d8b4650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1567383994950088, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1567384, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702af130>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3063d530; to 'JaxprTracer' at 0x7ffc3063ec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70111f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.17809241496194342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17809241, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc340>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40783a60; to 'JaxprTracer' at 0x7ffad0286840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56764540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.16115433522172537, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16115434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026ef80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940fb880; to 'JaxprTracer' at 0x7ffa940f9e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x506b68f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16982830021001769, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1698283, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c5f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e2cf0; to 'JaxprTracer' at 0x7ffb307e0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37dd2240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14784138442767047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14784138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a590>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4455e40; to 'JaxprTracer' at 0x7ffb283a62a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3c41290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1721324976770453, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1721325, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01145d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f2700; to 'JaxprTracer' at 0x7ff9d05f2fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9db3cae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.15171839987668867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1517184, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70406d80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f50860; to 'JaxprTracer' at 0x7ff712f53e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e157950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.16726877321895547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16726877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ead90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70363830; to 'JaxprTracer' at 0x7ffa70361300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d352990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.17184731549559748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17184732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161f90>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712a87ba0; to 'JaxprTracer' at 0x7ff712a85e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ec7d770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.1871822966947372, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1871823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016c9b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf40c3e70; to 'JaxprTracer' at 0x7ffcf40c1c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa25a10f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1814245667272102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18142457, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ae200>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40223920; to 'JaxprTracer' at 0x7ffbd07328e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66c81c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.17164299342618147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17164299, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de350>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04ba1b0; to 'JaxprTracer' at 0x7ffcd04bab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a5081e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.16281820966613642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16281821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bac80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94061030; to 'JaxprTracer' at 0x7ffa94061fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ecbe630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.16759082742412987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16759083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a1b60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7012e980; to 'JaxprTracer' at 0x7ffa7012d030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e935b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1738192907959604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17381929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b3aa0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0697d30; to 'JaxprTracer' at 0x7ffc30749670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67d5b130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.13723763617341417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13723764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0340>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02efbf0; to 'JaxprTracer' at 0x7ffbb02edda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91ee7bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.15664754834159034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15664755, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b23b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506c3470; to 'JaxprTracer' at 0x7ff7117d3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f04510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.18690565550485178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18690566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a5e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132c8ae0; to 'JaxprTracer' at 0x7ff7132c9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x390b7740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.17157247847833612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17157248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679e20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706f3ba0; to 'JaxprTracer' at 0x7ffad043b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22a08480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.17790655120173263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17790655, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016cf60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b21d50; to 'JaxprTracer' at 0x7ff711b217b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2475dbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.16540902246485867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16540902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296700>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70287790; to 'JaxprTracer' at 0x7ffc702878d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f9f9040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.1603946101154713, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16039461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0534390>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303101d0; to 'JaxprTracer' at 0x7ffc30311170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b966390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.16905652728778425, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16905653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255c70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0124e00; to 'JaxprTracer' at 0x7ffbf0125300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71e01f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.4861292483158177
47, epoch_train_loss=2.4861292483158177
Epoch 48
Epoch 48 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.16660840860890958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16660841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778680>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f006cfe0; to 'JaxprTracer' at 0x7ff713cd4fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82931a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.15282826504540462, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15282827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029f050>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28313650; to 'JaxprTracer' at 0x7ffa28313e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7819d070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07737444481346606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07737444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e0f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00b0630; to 'JaxprTracer' at 0x7ffbb00b2750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39d31230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.11488458879485698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11488459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013e460>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0079f30; to 'JaxprTracer' at 0x7ffca00784f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30c3cd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.16128920939760527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16128921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b24f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07149a0; to 'JaxprTracer' at 0x7ffca0716ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd696f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.18323969655898675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1832397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5690>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04d92b0; to 'JaxprTracer' at 0x7ffcd04d9530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76949840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1666709291292913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16667093, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dde80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f53920; to 'JaxprTracer' at 0x7ff712f50860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b931630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.17473570269804245, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1747357, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df840>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07ae390; to 'JaxprTracer' at 0x7ffcb07ae2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33242a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.15261859351949086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15261859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac150>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d85350; to 'JaxprTracer' at 0x7ff711d840e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79bd5ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.17724866236475345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17724866, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bfe0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701089f0; to 'JaxprTracer' at 0x7ffa70108810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8864ef00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.15630653035832395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15630653, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778050>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07591c0; to 'JaxprTracer' at 0x7ffbf075b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e2cb2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.17238337050576757, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17238337, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029f190>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d5c60; to 'JaxprTracer' at 0x7ffb302d6a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x859b6810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.17696389582870928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1769639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e120>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40782b10; to 'JaxprTracer' at 0x7ffa40782660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ef936e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.19264265300848696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19264265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404030>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50760810; to 'JaxprTracer' at 0x7ff713eb35b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7292a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.18670566306438957, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18670566, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b14d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28537ec0; to 'JaxprTracer' at 0x7ffa28536160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e5de5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.17671609105273398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17671609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689230>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0399490; to 'JaxprTracer' at 0x7ffbf06e1990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6215ed00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.16790458487650378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16790458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066bf60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca005ec50; to 'JaxprTracer' at 0x7ffca005d9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fd29180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.1726131558802623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17261316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755e20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117ffce0; to 'JaxprTracer' at 0x7ff7117fe480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96e76bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.17901370826282395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17901371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4615260>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10129350; to 'JaxprTracer' at 0x7ffc10128e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82c6efa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1418123429515231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14181234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d780>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03634c0; to 'JaxprTracer' at 0x7ffbb0363f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x108dca40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.16134326166345542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16134326, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679110>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0191940; to 'JaxprTracer' at 0x7ff9d0193420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63b694c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.19237344394293768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19237344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427e4f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117ee890; to 'JaxprTracer' at 0x7ff7117ec720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97799210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.17687905198056839, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17687905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208afb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3df0b0; to 'JaxprTracer' at 0x7ff70c3de1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68701420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.1831155741933124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18311557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405320>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa943376a0; to 'JaxprTracer' at 0x7ffa943351c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x881d280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1706588777710107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17065888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd48b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302f8900; to 'JaxprTracer' at 0x7ffb302f89f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e20a6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.16543319754395375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1654332, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8430>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0a7600; to 'JaxprTracer' at 0x7ff70c0a57b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65b0b240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.17431532210107176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17431532, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619520>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0a75b0; to 'JaxprTracer' at 0x7ff7136d6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x634ba380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.462366403094795
48, epoch_train_loss=2.462366403094795
Epoch 49
Epoch 49 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1725487669071739, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17254877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bbce0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304e1c60; to 'JaxprTracer' at 0x7ffc304e1fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30a29990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.15725326732925735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15725327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367eb0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307ce7f0; to 'JaxprTracer' at 0x7ff7a446ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa75ac980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.07986872292462113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.07986872, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4ba0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711faec00; to 'JaxprTracer' at 0x7ff711fae5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cf80bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.11867460666720528, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11867461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068f9c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c668fe0; to 'JaxprTracer' at 0x7ff70c66b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c85f880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.1659424865857318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16594249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267bc0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70122700; to 'JaxprTracer' at 0x7ffb701201d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b1fec50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.1885142820468404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18851428, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463c680>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6544a0; to 'JaxprTracer' at 0x7ffa940ceca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10b0ed30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1740880560045668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17408806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6dc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71250f920; to 'JaxprTracer' at 0x7ff71250f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44a5c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.17976918586090115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17976919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4380>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02cab10; to 'JaxprTracer' at 0x7ffbb02c9440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6026a120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.15750590101211762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1575059, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f1c50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06e2200; to 'JaxprTracer' at 0x7ffaf06e0270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61453700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.18252402744548946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18252403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a04a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e7fb0; to 'JaxprTracer' at 0x7ff7141e49f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4da34660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.16100586071052067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16100586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141baa40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f0dc10; to 'JaxprTracer' at 0x7ff713f0ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72615a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.17761685316049872, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17761685, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94364b50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf40ad0d0; to 'JaxprTracer' at 0x7ffcf40af6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d7172c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.18219721775511527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18219722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6cc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf04352b0; to 'JaxprTracer' at 0x7ffaf0436980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7903de10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.19823060373611978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1982306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a870>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712a87510; to 'JaxprTracer' at 0x7ff712a85760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63dc7d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.1921196522355184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19211965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50264320>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711dade90; to 'JaxprTracer' at 0x7ff711dad9e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9209fa80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.18190594878295097, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18190595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757110>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa283514e0; to 'JaxprTracer' at 0x7ffa28350220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e7a6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.17307641869980175, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17307642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026e520>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02d1530; to 'JaxprTracer' at 0x7ffbb02d2020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ed25c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.17774718786833268, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17774719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b04b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c42fa610; to 'JaxprTracer' at 0x7ff7c42f81d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x792acb00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.18431818974256547, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18431819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015f7b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704f6f20; to 'JaxprTracer' at 0x7ffc704f6160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b9433c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.14643760785288384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14643761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088470>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712807510; to 'JaxprTracer' at 0x7ff712806c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfaf27b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.166550902049491, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1665509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f570>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05e71f0; to 'JaxprTracer' at 0x7ff9f00fe8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c707210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.19797432119948521, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19797432, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50710620>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04b9620; to 'JaxprTracer' at 0x7ffcd04b8a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cf98390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.18230608575401075, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18230609, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160290>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa502043b0; to 'JaxprTracer' at 0x7ffa502056c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x120e6690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.18846035212898665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18846035, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a640>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02b59e0; to 'JaxprTracer' at 0x7ffcd02b7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x631599a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.17602600713136285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17602601, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8770>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3dc400; to 'JaxprTracer' at 0x7ff70c3de840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e809900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.17057388239598578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17057388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07872f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506fa070; to 'JaxprTracer' at 0x7ffb506fbd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1cfb3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.17969480492169435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1796948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067ad70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5020e480; to 'JaxprTracer' at 0x7ffa7064bec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97f9bfb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.437747312717296
49, epoch_train_loss=2.437747312717296
Epoch 50
Epoch 50 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.17748616438001433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17748616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255a70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9432b920; to 'JaxprTracer' at 0x7ffa94329f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57c6ea30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.16181382592411028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16181383, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407030>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ca3e20; to 'JaxprTracer' at 0x7ff712ca1d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fea7440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.08242103928584707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08242104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029d5a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0447b50; to 'JaxprTracer' at 0x7ffcb04442c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31b958c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.12268990889945289, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12268991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016dcb0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d17e70; to 'JaxprTracer' at 0x7ff711d15440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ae5c840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.17070897566787688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17070898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013f8c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281b5c10; to 'JaxprTracer' at 0x7ffb281b6570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f49fcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.19391956237258598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19391956, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba770>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45b6750; to 'JaxprTracer' at 0x7ff9f071d030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x533f1e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.1792604755562801, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17926048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124ddf20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71227b970; to 'JaxprTracer' at 0x7ff71227a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b30df30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.18492689584220182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1849269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463ed20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404f48b0; to 'JaxprTracer' at 0x7ffa404f5c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x665ff470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.16253305884507105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16253306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757aa0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1068cea0; to 'JaxprTracer' at 0x7ffc1068dda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x899c7050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1879594633782692, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18795946, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bf70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd034dd00; to 'JaxprTracer' at 0x7ffbd034ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d6df360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1658048696793351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16580487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257550>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71345e250; to 'JaxprTracer' at 0x7ff71345cae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9352be70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.18296963218233958, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18296963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405ba0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07e72e0; to 'JaxprTracer' at 0x7ffc70689260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a315d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.18755032452172182, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18755032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029d300>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a45cfc90; to 'JaxprTracer' at 0x7ff7a45ce1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a5094d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.20396511664118053, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20396512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d9f20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0cb740; to 'JaxprTracer' at 0x7ff70c0cb970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x733ad510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.19766242533175338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19766243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013c610>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40728cc0; to 'JaxprTracer' at 0x7ffa407291c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d6359a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.18721657195946664, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18721657, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b07c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50730360; to 'JaxprTracer' at 0x7ffb50730fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22641630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.17834236872176143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17834237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc820>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf40877e0; to 'JaxprTracer' at 0x7ff70c0c8220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b267b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.18298924351294688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18298924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca07570c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02a6700; to 'JaxprTracer' at 0x7ffcb046dc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b2648d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.1897574611032596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18975746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e910>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3054eca0; to 'JaxprTracer' at 0x7ffc3054ef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x124a5140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.15109941512647349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15109942, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427ca40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad06c3740; to 'JaxprTracer' at 0x7ffad06c2ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8837c0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.171428747285163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17142875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163eb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0623920; to 'JaxprTracer' at 0x7ffaf0623e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6241aab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.20371860085195254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2037186, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7e30>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285a1300; to 'JaxprTracer' at 0x7ffb285a3f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ef5af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.18786768344364033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18786768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f8a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704f4e00; to 'JaxprTracer' at 0x7ffc704f4860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37fdd9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.19394291147160755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19394291, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94364d30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fbc680; to 'JaxprTracer' at 0x7ff712fbc130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e058fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.18151524173711506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18151524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b8380>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9464da30; to 'JaxprTracer' at 0x7ffa9464d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43b4cd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.17581749908840633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1758175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8a10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90575bc0; to 'JaxprTracer' at 0x7ffb90574d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2526cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.185210507360954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18521051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295920>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50209a80; to 'JaxprTracer' at 0x7ffb50209bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9cbf7cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.41360913540254
50, epoch_train_loss=2.41360913540254
Epoch 51
Epoch 51 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.18268105116528813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18268105, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026fac0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30547560; to 'JaxprTracer' at 0x7ffc305448b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a1a8640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.1665955145945968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16659551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b25a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d03f9d00; to 'JaxprTracer' at 0x7ff9d03f9850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3efd54a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.08509787442962212, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08509787, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94364f80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca04cc680; to 'JaxprTracer' at 0x7ffca04ccbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92ba3670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.1262941441091226, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12629414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6480>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02608b0; to 'JaxprTracer' at 0x7ffcd0261210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54b051f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.17568411253756971, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17568411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46140b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2819a340; to 'JaxprTracer' at 0x7ffb28198540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd479840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.19953959307659444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19953959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f4d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0284d60; to 'JaxprTracer' at 0x7ffad0287d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fe4c130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.18473625522130194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18473626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df7f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0129cb0; to 'JaxprTracer' at 0x7ffbb012b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3faae2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1903102803424399, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19031028, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de5a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71345cc70; to 'JaxprTracer' at 0x7ff71345e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54f4a910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.16780583296547866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16780583, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013db70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70639990; to 'JaxprTracer' at 0x7ffa7063b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a76bb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.1936569850530481, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19365699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088c80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07a8400; to 'JaxprTracer' at 0x7ffca07a9580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ccd9f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.1708039462899648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17080395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785ac0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb076e6b0; to 'JaxprTracer' at 0x7ffcb076d080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c049a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.1885453261070202, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18854533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5c40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70089b20; to 'JaxprTracer' at 0x7ffb700883b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf66e610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.19312830227646807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1931283, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367ee0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125bede0; to 'JaxprTracer' at 0x7ff7125bff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74f3d540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.20993579058548045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20993579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404b00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0430090; to 'JaxprTracer' at 0x7ffcd0431350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bc67140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.20341833572669415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20341834, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d8d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712561da0; to 'JaxprTracer' at 0x7ffb286284a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33ce0a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.19274981655941373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19274982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754860>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3b75b0; to 'JaxprTracer' at 0x7ff70c3b62f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x445a3670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.18382768153346365, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18382768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06693a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5045dd50; to 'JaxprTracer' at 0x7ffc5045f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a9c01f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.18843856398668787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18843856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f00e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700d01d0; to 'JaxprTracer' at 0x7ffa700d2ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x132d7dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.19542998917595275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19542999, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b350>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa284fc680; to 'JaxprTracer' at 0x7ffa284fdee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82c700a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.15605122172424288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15605122, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016c310>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71418d9e0; to 'JaxprTracer' at 0x7ff71418d8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x560ac160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.17665273763806422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17665274, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c520>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70150f90; to 'JaxprTracer' at 0x7ffa701509a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d3786a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.209705102197238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2097051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779530>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1068dbc0; to 'JaxprTracer' at 0x7ff712fda930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x649b3d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.1936826134404247, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19368261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a2c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02242c0; to 'JaxprTracer' at 0x7ffca02249f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x533bd950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.19967791406419733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19967791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407b50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f1b1f0; to 'JaxprTracer' at 0x7ff712f19a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a688a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.1872435911193052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18724359, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050cfc0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41486d0; to 'JaxprTracer' at 0x7ffcf4148ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34b72970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.18127698860493974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18127699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255c70>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c128db0; to 'JaxprTracer' at 0x7ff70c12ade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55586390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.19098527365298218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19098527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9f20>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47ef1f0; to 'JaxprTracer' at 0x7ffab47ef600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c991700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.388462843031646
51, epoch_train_loss=2.388462843031646
Epoch 52
Epoch 52 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1882302029824131, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1882302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7340>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4469bc0; to 'JaxprTracer' at 0x7ff7a4468b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a0fa330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.1716247250206931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17162473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068b1b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf06e1c10; to 'JaxprTracer' at 0x7ffbf06e07c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a37c0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.087903209754661, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.08790321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404070>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141da020; to 'JaxprTracer' at 0x7ff7141d8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67733ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.13009000163212273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712c20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0241850; to 'JaxprTracer' at 0x7ffcd0240c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x509728a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.18092150362590487, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1809215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015fed0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd009abb0; to 'JaxprTracer' at 0x7ffbd009bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70481080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.20545380041452835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2054538, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bbcd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca04393a0; to 'JaxprTracer' at 0x7ffab42ca160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11e26f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.19053779063234363, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19053779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f6e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713caf920; to 'JaxprTracer' at 0x7ff713caf970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97238dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1960078048811569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1960078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463d160>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00fd170; to 'JaxprTracer' at 0x7ffbb00ffe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44a6dac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.17333458298112103, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17333458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616270>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07c0bd0; to 'JaxprTracer' at 0x7ff9f07c03b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3628ed50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.19965244117599829, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19965244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bf10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02c93f0; to 'JaxprTracer' at 0x7ffbb02cb600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11c1d3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.17603450647259522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17603451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a53b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04bab60; to 'JaxprTracer' at 0x7ffbd04bbab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43893e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.19439753668730012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19439754, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068b1f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940cf100; to 'JaxprTracer' at 0x7ffa940ce020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51c45850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.19898344987900177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19898345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404880>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06cd0d0; to 'JaxprTracer' at 0x7ffaf06cf3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d8e2e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.2162158603005049, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21621586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0534de0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf01984f0; to 'JaxprTracer' at 0x7ffaf0198270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x777cfd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.20942696465798025, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20942696, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015fa00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0681da0; to 'JaxprTracer' at 0x7ffc302dbd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x417b6640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.19856505369981825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19856505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013f280>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300674c0; to 'JaxprTracer' at 0x7ffb30064680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4681b4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.18957893440893187, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18957893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd660>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4567ab0; to 'JaxprTracer' at 0x7ffab45662f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5290c040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.19415227756248213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19415228, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267140>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9473e570; to 'JaxprTracer' at 0x7ffa9473d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d382350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.2013947177515887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20139472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fe30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb066ddf0; to 'JaxprTracer' at 0x7ff711d09a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ccd2330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1611734494251618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16117345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6ec0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307d50d0; to 'JaxprTracer' at 0x7ffc307d4a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b5ca3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.18216503682332516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18216504, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06dbb20>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101101d0; to 'JaxprTracer' at 0x7ffb280cde40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7223ea80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2160004821276369, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21600048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94366060>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c668bd0; to 'JaxprTracer' at 0x7ff70c669080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85c2de20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.19979594937011305, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19979595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287799c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e5210; to 'JaxprTracer' at 0x7ff7141e58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94fe5020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.20572053182585529, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20572053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b21a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70153ec0; to 'JaxprTracer' at 0x7ffa701519e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f10dce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.19324201945914748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19324202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b55a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad06c1ad0; to 'JaxprTracer' at 0x7ffcf4039080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf2162b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.18699937637399405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18699938, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d260>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07166b0; to 'JaxprTracer' at 0x7ffca0714f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa117ff80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.19704928652602327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19704929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061b750>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2811c8b0; to 'JaxprTracer' at 0x7ffb2811c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7685ae80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.3620540526054286
52, epoch_train_loss=2.3620540526054286
Epoch 53
Epoch 53 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.1941739172922511, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19417392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06687b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5069ea20; to 'JaxprTracer' at 0x7ffc5069c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x737095f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.17674852047712492, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17674852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b1f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a43788b0; to 'JaxprTracer' at 0x7ff7a4378310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa335690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.09083233645908992, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09083234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365960>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad01b5490; to 'JaxprTracer' at 0x7ffad01b6110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4407ac10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.13401561524873398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13401562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d820>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07e63e0; to 'JaxprTracer' at 0x7ffcb07e7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f9ffa10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.18646928013885813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18646928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4614850>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0680540; to 'JaxprTracer' at 0x7ff9d0681170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88734970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.21174902737655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21174903, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463fb30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f85b70; to 'JaxprTracer' at 0x7ff712f86b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x422fae20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.19679805768477648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19679806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088690>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb030d350; to 'JaxprTracer' at 0x7ffbb030e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ef71050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.2020884816104109, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20208848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120890f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010b510; to 'JaxprTracer' at 0x7ffbf010b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x138541a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.17911749289264378, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17911749, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50710ba0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70758090; to 'JaxprTracer' at 0x7ff713709f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41572ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.20580927929781206, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20580928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f2870>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7063b470; to 'JaxprTracer' at 0x7ffb50699fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e2cd860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.18159646209726166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18159646, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066bfb0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c2a2a0; to 'JaxprTracer' at 0x7ff713c2a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64406250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.20050328388561142, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20050328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288660>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713caeb10; to 'JaxprTracer' at 0x7ff713caf4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x402afb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.20518126436435277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20518126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943654a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306c24d0; to 'JaxprTracer' at 0x7ffc306c19e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a2aadc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.22288750330475074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2228875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679770>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501f27a0; to 'JaxprTracer' at 0x7ffb501f1670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa157d760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.21581658099429216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21581658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46147c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702f0220; to 'JaxprTracer' at 0x7ffc702f2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49da12a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.20470955033395272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20470955, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8360>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3018ac50; to 'JaxprTracer' at 0x7ffc3018b2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18225580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.19565217034445895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19565217, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b9250>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7045e980; to 'JaxprTracer' at 0x7ffc7045d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x932641d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.20019884454748452, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20019884, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e2e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0249df0; to 'JaxprTracer' at 0x7ff7c40c9800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e094bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.20771870497436504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2077187, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287785f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05b4b80; to 'JaxprTracer' at 0x7ffbd04e6700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x405c66d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1665347551254817, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16653476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704071e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1050d940; to 'JaxprTracer' at 0x7ffc1050fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76c720b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.18778948097949733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18778948, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0d40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca007bba0; to 'JaxprTracer' at 0x7ffca007a890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4e1cf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2226912661443751, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22269127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068ae80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd4040; to 'JaxprTracer' at 0x7ffcd0454c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42d8fac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.2062515570304094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20625156, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4e00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0134310; to 'JaxprTracer' at 0x7ff9f0135440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86f34870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.21216020419091086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2121602, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9130>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1015bc90; to 'JaxprTracer' at 0x7ffc10158ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65e8f4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.19954316403901012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19954316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115930>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10112de0; to 'JaxprTracer' at 0x7ff7c4798b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28c8c3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.19303321752067612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19303322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162770>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc505e5530; to 'JaxprTracer' at 0x7ff70c0a7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79c01a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.20344236425359682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20344236, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029e920>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0520fe0; to 'JaxprTracer' at 0x7ffbb0520e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72781f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.334199593528693
53, epoch_train_loss=2.334199593528693
Epoch 54
Epoch 54 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.20013988171706457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20013988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd770>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285cce00; to 'JaxprTracer' at 0x7ffb285cca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53fd7fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.18206637344207352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18206637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02965a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117d2840; to 'JaxprTracer' at 0x7ff7117d02c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17986950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.09390310196242513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.0939031, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10678e90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306828e0; to 'JaxprTracer' at 0x7ffc30683420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75df2cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.13824024962206666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13824025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70406fa0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0741850; to 'JaxprTracer' at 0x7ffad0740090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c1185c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.19239391781317514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19239392, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679e90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3076eca0; to 'JaxprTracer' at 0x7ff712563f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79cb8480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.21840447304527508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21840447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712089800>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf40affb0; to 'JaxprTracer' at 0x7ff7132a2070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64127070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.20269031587815947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20269032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265470>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca063bab0; to 'JaxprTracer' at 0x7ffca063ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36dbf810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.20834871493472562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20834871, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50264a60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287ca020; to 'JaxprTracer' at 0x7ffa287cab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fcfcb00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.18517560971545624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18517561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427ffc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05c18a0; to 'JaxprTracer' at 0x7ff9d05c25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x679680e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.2122328318332605, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21223283, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bf50>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47c2b10; to 'JaxprTracer' at 0x7ff7c47c38d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a7e6c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.18754070170903658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1875407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc050>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d6390; to 'JaxprTracer' at 0x7ffb302d5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c39b810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.20694748450773473, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20694748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295720>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0366de0; to 'JaxprTracer' at 0x7ff9f03673d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4100a8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.2117813416447596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21178134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679dc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a411e9d0; to 'JaxprTracer' at 0x7ff7a411d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aee2900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.22993712295346286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22993712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066bd40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf019bbf0; to 'JaxprTracer' at 0x7ffaf0198090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42e8c790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.22265080911088203, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22265081, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679eb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711a80ef0; to 'JaxprTracer' at 0x7ff711a81f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62c0a220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.21123635420381623, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21123635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016dfb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04ad030; to 'JaxprTracer' at 0x7ffbf04af420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88368580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.20211198829097007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20211199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463ed30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07e4c20; to 'JaxprTracer' at 0x7ffab47ef830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x986ff6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.20664168210621248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20664168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46146d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41a6200; to 'JaxprTracer' at 0x7ffcf41a4ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98c5f8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.2144103661535479, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21441037, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828db0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304e0ea0; to 'JaxprTracer' at 0x7ffbd069b6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82283f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.1721767667395269, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17217677, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6c70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c62db20; to 'JaxprTracer' at 0x7ff70c62ef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56a19130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.193216203974491, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1932162, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943665e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704ed030; to 'JaxprTracer' at 0x7ffb704ef1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x927765d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2296687530132401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22966875, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3f60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00ffe20; to 'JaxprTracer' at 0x7ff9f00fc540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bd624a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.2129037376652455, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21290374, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd6a00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3018aa70; to 'JaxprTracer' at 0x7ffc3018b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8221b4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.21860198062645383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21860198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42899c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04e09a0; to 'JaxprTracer' at 0x7ffbf04e1670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96858390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.20620659132764377, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20620659, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07abf30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9473d120; to 'JaxprTracer' at 0x7ffa9473fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dfddcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.19943161410949206, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19943161, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255870>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4798b80; to 'JaxprTracer' at 0x7ff7c479b600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f1bbcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.21002898161509995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21002898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d8070>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5a2b60; to 'JaxprTracer' at 0x7ff70c5a2f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50e81bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.305420277104226
54, epoch_train_loss=2.305420277104226
Epoch 55
Epoch 55 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.2061472117652325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20614721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb520>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10181f80; to 'JaxprTracer' at 0x7ffc101817b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b154e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.18775633943158718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18775634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c130>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712771940; to 'JaxprTracer' at 0x7ff712773290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d68e8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.09713898008842253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.09713898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42883c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa945eacf0; to 'JaxprTracer' at 0x7ffa945ea1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1dcac440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.14337803446382374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14337803, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b02b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb046f790; to 'JaxprTracer' at 0x7ffcb046cb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x306d4460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.19828508408650344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19828508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fe90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0075120; to 'JaxprTracer' at 0x7ffbf0077880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x322333d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.2249252683031033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22492527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4617d10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940981d0; to 'JaxprTracer' at 0x7ffa94098d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53583780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.2087538609026899, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20875386, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787f90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0220a90; to 'JaxprTracer' at 0x7ffcd0220590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x274d98b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.21459309948594152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2145931, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd07846f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f98c20; to 'JaxprTracer' at 0x7ff712f993a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x274e6050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.1915354681876234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19153547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506791c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa706397b0; to 'JaxprTracer' at 0x7ffa7063b240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b48140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.21908617260967633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21908617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d9c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a462fba0; to 'JaxprTracer' at 0x7ff7a462f290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5425a710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.19384512035353318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19384512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160c60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00fcdb0; to 'JaxprTracer' at 0x7ffbb00ff330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f1bc060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.21382988233603392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21382988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b2300>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711afa9d0; to 'JaxprTracer' at 0x7ff711af8c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25b85aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.21854528414384483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21854528, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42894f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281396c0; to 'JaxprTracer' at 0x7ffb28138d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76505430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.2368720546169023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23687205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294970>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b4e5c0; to 'JaxprTracer' at 0x7ff712b4ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6404000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.22992659693890746, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2299266, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829b00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02b6200; to 'JaxprTracer' at 0x7ffbf02b6f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa19c7e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.21774431060615007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21774431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46179d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28351b20; to 'JaxprTracer' at 0x7ffbd0554f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9366afd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.20899669295545598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20899669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50264ae0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304bd9e0; to 'JaxprTracer' at 0x7ffc304bf560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540362f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.21332373209303135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21332373, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507110f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702c81d0; to 'JaxprTracer' at 0x7ffb702c8540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11d20210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.22112140486599466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2211214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405850>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02da070; to 'JaxprTracer' at 0x7ffca02db830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61091470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.17814687750996785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17814688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068bc90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c43b41d0; to 'JaxprTracer' at 0x7ff7c43b6020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3df8a7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.19911319396149488, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19911319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679750>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501ad3a0; to 'JaxprTracer' at 0x7ffa501ae9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8740d090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.23661367742624265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23661368, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a75c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a446a6b0; to 'JaxprTracer' at 0x7ff7a446ae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5af651d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.2197914096913145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21979141, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0534bd0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28339c10; to 'JaxprTracer' at 0x7ffb28338900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31ecdbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.22520779349229036, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22520779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb6e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287953f0; to 'JaxprTracer' at 0x7ffa28795c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3106cbd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.21326819779166759, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2132682, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc5b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705427a0; to 'JaxprTracer' at 0x7ff7a4391620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b5f9920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.2062381007606773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2062381, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a0f70>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb076f5b0; to 'JaxprTracer' at 0x7ffcb076fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x939155f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.21688505450287102, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21688505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6ab0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f385e0; to 'JaxprTracer' at 0x7ff712f38ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72770930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.2760369088747545
55, epoch_train_loss=2.2760369088747545
Epoch 56
Epoch 56 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.21239638593021792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21239639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c7f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f03993a0; to 'JaxprTracer' at 0x7ff9f039b290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b523760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.1938936405447318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19389364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8f30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc703279c0; to 'JaxprTracer' at 0x7ffc70326bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20d27270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.10057072385616293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10057072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5e50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ca37e0; to 'JaxprTracer' at 0x7ff712ca2ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50f60f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.1483091545151527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14830915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287780f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287ee9d0; to 'JaxprTracer' at 0x7ffa287ed350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbb6a060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.20449761144181797, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20449761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067b5b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad020c8b0; to 'JaxprTracer' at 0x7ffad020d210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c705ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.23177923245637166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23177923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785990>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5020a570; to 'JaxprTracer' at 0x7ffb5020bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59512420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.21515351603392302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21515352, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fdd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2857efc0; to 'JaxprTracer' at 0x7ffa2857c400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38444020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.2211572397831915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22115724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fcd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703381d0; to 'JaxprTracer' at 0x7ffb70338cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a53e9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.19823227420207026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19823227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182b6f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502483b0; to 'JaxprTracer' at 0x7ffc5024b330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a60dfc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.22642125601795718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22642126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bfa0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07aef70; to 'JaxprTracer' at 0x7ffcb07acd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49399120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.20025796647028576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20025797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029f140>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca04cf600; to 'JaxprTracer' at 0x7ffca04cd0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49d49f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.22110742342250853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22110742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb780>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb502288b0; to 'JaxprTracer' at 0x7ffb50228950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71cdf860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.2256600502529019, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22566005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7c90>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb0a90; to 'JaxprTracer' at 0x7ff713eb2de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46cb5380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.24416031530794868, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24416032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b99f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb048d030; to 'JaxprTracer' at 0x7ffbb048dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9780b8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.23715709797842063, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2371571, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679310>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07c4040; to 'JaxprTracer' at 0x7ffca07c40e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f6439c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.22460684486258747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22460684, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf01630c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4713290; to 'JaxprTracer' at 0x7ffab4713920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68dcea20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.21618572825425864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21618573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616140>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504cc7c0; to 'JaxprTracer' at 0x7ffc504cd350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cd2d690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.2203408681727667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22034087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a890>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41c1850; to 'JaxprTracer' at 0x7ff7a41c3880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fe99e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.22818477552210265, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22818478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0669b40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07c0630; to 'JaxprTracer' at 0x7ffcd07c09f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13255590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.18443134254500523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18443134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428bc60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713267bf0; to 'JaxprTracer' at 0x7ff7132666b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dd93fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.20591019390810086, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20591019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702acb20>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0406840; to 'JaxprTracer' at 0x7ff9f0407a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5328990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.24391922796377882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24391923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755320>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0430720; to 'JaxprTracer' at 0x7ff711a81fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c16fa40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.22704006638739602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22704007, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689160>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca00a4ef0; to 'JaxprTracer' at 0x7ffca00a5da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b38ef30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.23215712029457478, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23215712, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061abf0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01d3d80; to 'JaxprTracer' at 0x7ff9d01d1cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49347570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.22067921337042842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22067921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943667d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d03fa570; to 'JaxprTracer' at 0x7ff9d03fb240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa295e200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.2133660704795451, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21336607, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115860>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0137380; to 'JaxprTracer' at 0x7ff9f0134c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e5dce60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.22409138925106728, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22409139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b35c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45540e0; to 'JaxprTracer' at 0x7ffcb076d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36f61920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.245225054589811
56, epoch_train_loss=2.245225054589811
Epoch 57
Epoch 57 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.21896453087341866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21896453, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265cd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71368f2e0; to 'JaxprTracer' at 0x7ff71368d850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22677df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.20053255625406766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20053256, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f8a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1074bb00; to 'JaxprTracer' at 0x7ffc10748130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2eaa4bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.10422636945137842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10422637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8440>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307bb830; to 'JaxprTracer' at 0x7ffb307b90d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x885e62e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.15317351199984916, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15317351, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755a00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132886d0; to 'JaxprTracer' at 0x7ff71328a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ae9a820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.211249541234908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21124954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05349b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70519a30; to 'JaxprTracer' at 0x7ffc1008b6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13a0b170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.23903315606161699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23903316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a5d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca067ec50; to 'JaxprTracer' at 0x7ffca067d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e8f56b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.221974662955904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22197466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e2a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c12bba0; to 'JaxprTracer' at 0x7ff70c12a250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x393210f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.22808562886326703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22808563, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e810>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30067060; to 'JaxprTracer' at 0x7ffb30066250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x341d6f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.20530835909270106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20530836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208bf50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06e3ce0; to 'JaxprTracer' at 0x7ffaf06e2700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x606861a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.23428296257196826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23428296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712340>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d87010; to 'JaxprTracer' at 0x7ff711d85260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4273a6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.20695996540967304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20695997, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a36d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa406f7790; to 'JaxprTracer' at 0x7ffa406f4680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x473264e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.22887415475700576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22887415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427d890>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70639620; to 'JaxprTracer' at 0x7ffc70639d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8147a140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.23334762447403512, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23334762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a9870>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302ced40; to 'JaxprTracer' at 0x7ff7a46653f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37a64560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.2518563825344327, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25185638, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9ac0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0696ac0; to 'JaxprTracer' at 0x7ffaf0694950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32df7f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.24474088883810968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24474089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a0a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04b8680; to 'JaxprTracer' at 0x7ffbd04ba5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7abfaa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.23206107562085224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23206108, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b0320>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47b8bd0; to 'JaxprTracer' at 0x7ff712a870b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x443466a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.22379478614592707, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22379479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463d810>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50681d00; to 'JaxprTracer' at 0x7ffa50682200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x355ec120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.22788064676692205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22788065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786710>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7136d4220; to 'JaxprTracer' at 0x7ff7136d7b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46e497a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.23564250840861736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23564251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704074c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404f59e0; to 'JaxprTracer' at 0x7ffa404f7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bcd2600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.19105756467899873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19105756, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779000>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02b87c0; to 'JaxprTracer' at 0x7ffca02ba4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fc8bad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.21334666634595278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21334667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688e80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900b4f90; to 'JaxprTracer' at 0x7ffb900b5990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5de04bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2516520040622, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.251652, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5120>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010c4a0; to 'JaxprTracer' at 0x7ffbf010c630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4373aaa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.23470318689292277, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23470319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb510>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71207be20; to 'JaxprTracer' at 0x7ff712079490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ec03db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.23952603254250207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23952603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb7e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0404130; to 'JaxprTracer' at 0x7ff9f0406430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6143e990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.2285368869198561, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22853689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013e580>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca00a6ca0; to 'JaxprTracer' at 0x7ffb702c8360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x227643e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.22090841913600273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22090842, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029fd80>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504a0db0; to 'JaxprTracer' at 0x7ffa504a09a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f553420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.23173095328502624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23173095, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407609d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f059ec00; to 'JaxprTracer' at 0x7ff9f059f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a98dc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.2126045717474785
57, epoch_train_loss=2.2126045717474785
Epoch 58
Epoch 58 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.22607276480727498, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22607276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4460>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10180090; to 'JaxprTracer' at 0x7ffc101803b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a5def0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.20773705798257355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20773706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb580>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd010e430; to 'JaxprTracer' at 0x7ffbd010e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3c16a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1081130709467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.10811307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a45b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f3510; to 'JaxprTracer' at 0x7ff9d05f0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a458b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.1583115314257212, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15831153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067bf40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0787650; to 'JaxprTracer' at 0x7ffcb07858a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x409f2d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.21864996383366436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21864996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d760>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3063d8f0; to 'JaxprTracer' at 0x7ffc3063e700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x866802b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.24686615289781633, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24686615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182aee0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0639bc0; to 'JaxprTracer' at 0x7ffca0639a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f3de1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.22946939264505292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22946939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537140>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71188c6d0; to 'JaxprTracer' at 0x7ffbd04e4b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6465a4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.23555810615844122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23555811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050d9a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706b9e90; to 'JaxprTracer' at 0x7ffb706bb470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79421420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.21284475862692445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21284476, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061b470>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fa4b30; to 'JaxprTracer' at 0x7ff711fa4270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60165a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.24273544580717205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24273545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bc60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7043ab60; to 'JaxprTracer' at 0x7ffc70438db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ec1240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.2141135615300667, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21411356, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5290>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad06c1fd0; to 'JaxprTracer' at 0x7ffad06c0f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fc06850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.2374416382147532, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23744164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9650>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4087f10; to 'JaxprTracer' at 0x7ffcf4086570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x424650c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.24189620617028662, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24189621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6fe0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711ac19e0; to 'JaxprTracer' at 0x7ff711ac2fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f882f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.26013642784646723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26013643, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd4d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3df2e0; to 'JaxprTracer' at 0x7ff70c3dd170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x867832a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.2529993999402131, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2529994, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026fd70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0699fd0; to 'JaxprTracer' at 0x7ffbd0698a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x362ad4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.24021763855492148, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24021764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068cac0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf420ea70; to 'JaxprTracer' at 0x7ffcf420fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x547d9ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.2323105761894569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23231058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537130>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70495670; to 'JaxprTracer' at 0x7ffc704954e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d74dc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.23633549115869976, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23633549, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757380>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca007a700; to 'JaxprTracer' at 0x7ffca007a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86ed4350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.2436334509534404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24363345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07ab440>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb906ae390; to 'JaxprTracer' at 0x7ffb906aec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd3dc640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.19808630347858738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1980863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0256ad0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4039e90; to 'JaxprTracer' at 0x7ffcf4038270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a127730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.22201125850373302, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22201126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b8e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d5e020; to 'JaxprTracer' at 0x7ff712d5f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x999ab850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2600148417363029, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26001484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267d20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0697150; to 'JaxprTracer' at 0x7ffaf0697bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8be41c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.24292340435094967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2429234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a660>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fbf920; to 'JaxprTracer' at 0x7ff712fbd490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x616735d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.24753747093784806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24753747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dfcc0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900b45e0; to 'JaxprTracer' at 0x7ffb900b65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b0e27c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.23713992038772033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23713992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac150>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71207b510; to 'JaxprTracer' at 0x7ff71207b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e9449c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.22926547195117894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22926547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407750>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90574810; to 'JaxprTracer' at 0x7ffb905748b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91dd39c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.23994232725306883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23994233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427cbf0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139acc20; to 'JaxprTracer' at 0x7ff7139ad120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56a969e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.177213737991296
58, epoch_train_loss=2.177213737991296
Epoch 59
Epoch 59 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.2344053602528778, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23440536, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7600>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326b650; to 'JaxprTracer' at 0x7ff71326b790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5df80b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.21556751538837274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21556752, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0116690>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1050f0b0; to 'JaxprTracer' at 0x7ffc1050d850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6807390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.11221206442413825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11221206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc890>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30710400; to 'JaxprTracer' at 0x7ffc307121b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6051b440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.16374981022670912, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16374981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257650>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30546840; to 'JaxprTracer' at 0x7ffc30544590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dca2d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.2270893730588922, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22708937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b9230>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb066ecf0; to 'JaxprTracer' at 0x7ffbb066fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20e7b1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.2560199399048248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25601994, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050ca30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00902c0; to 'JaxprTracer' at 0x7ff9f0093d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cd7dea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.23808789297992908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23808789, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7118298e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124cd440; to 'JaxprTracer' at 0x7ff71187f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b10bd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.24429096580053056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24429097, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829fc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70286bb0; to 'JaxprTracer' at 0x7ffc70286a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4673b4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.22092810600495952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22092811, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b5c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca04cce00; to 'JaxprTracer' at 0x7ffca04cd210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99e25650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.25188464067529054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25188464, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787e00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713229710; to 'JaxprTracer' at 0x7ffc7068b2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33c3a290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.22207026861048143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22207027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f720>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713caf600; to 'JaxprTracer' at 0x7ff713cac4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8250e6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.24712648210660307, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24712648, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01178c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28338360; to 'JaxprTracer' at 0x7ffb283398a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f1c940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.25176864983515895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25176865, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dfdf0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71250cdb0; to 'JaxprTracer' at 0x7ff712f98fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ced0150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.2697637535050228, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26976375, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e140>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0733b50; to 'JaxprTracer' at 0x7ffc106f0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88797f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.26248305338907624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26248305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b9a60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100895d0; to 'JaxprTracer' at 0x7ffbd02a5350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4acf4920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.24947238364562882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24947238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050fd40>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712563ba0; to 'JaxprTracer' at 0x7ff712560810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf33c690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.24220047170769035, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24220047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0534fc0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf43342c0; to 'JaxprTracer' at 0x7ffcf4336390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x327e0e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.24622224415789043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24622224, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026fd60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125147c0; to 'JaxprTracer' at 0x7ff7125144f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ee2f070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.25272595250393076, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25272595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7fc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb04c2c00; to 'JaxprTracer' at 0x7ffbb04c0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bc27e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.20571591232019784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20571591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779ec0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd010c4f0; to 'JaxprTracer' at 0x7ffbd010c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ea75c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.23075185054270386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23075185, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4b10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa945ea570; to 'JaxprTracer' at 0x7ffa945e9bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x721009b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2696845634236091, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26968456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0297960>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7009e2f0; to 'JaxprTracer' at 0x7ffb7009e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c437a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.25208982480906345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25208982, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50264250>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404c25c0; to 'JaxprTracer' at 0x7ffa404c0bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e449b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.25679916103806105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25679916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016d890>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70543790; to 'JaxprTracer' at 0x7ffb70542480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96e2ea00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.24677189681139397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2467719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f3380>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70387510; to 'JaxprTracer' at 0x7ffa70385b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1cd1eca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.23882045796786056, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23882046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e93d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eda020; to 'JaxprTracer' at 0x7ff713ed8ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x682435a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.24901213665896066, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24901214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161600>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0475d00; to 'JaxprTracer' at 0x7ffaf0474720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9af460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.1371820373863977
59, epoch_train_loss=2.1371820373863977
Epoch 60
Epoch 60 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.24290314171207836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24290314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404d40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb2340; to 'JaxprTracer' at 0x7ff713eb0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24a05650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.22582343447653674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22582343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702acd20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb065f290; to 'JaxprTracer' at 0x7ffcb065d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbcda90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.11655232875775987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11655233, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4240>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704eed90; to 'JaxprTracer' at 0x7ffb704edcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e752470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.16947487243018278, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16947487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294f20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287eef70; to 'JaxprTracer' at 0x7ffa287ee340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf250d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.2362506892042974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23625069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a900>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132a2200; to 'JaxprTracer' at 0x7ff7132a16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c8ef570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.26564673421242624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26564673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120888d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712278450; to 'JaxprTracer' at 0x7ff71227b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f096c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.246545573283798, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24654557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182ac10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706bbd30; to 'JaxprTracer' at 0x7ffb706b9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37059f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.25334431212484504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25334431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182bf40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9028ede0; to 'JaxprTracer' at 0x7ffb9028da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44a260f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.22960356994996742, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22960357, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754510>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704f4590; to 'JaxprTracer' at 0x7ffc704f6020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35998a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.26349929428725977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26349929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b950>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300646d0; to 'JaxprTracer' at 0x7ffb30065d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64034c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.23075157655343523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23075158, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704057f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5e9760; to 'JaxprTracer' at 0x7ff712fd93a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9ce7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.26021500287480936, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.260215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ae570>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94037920; to 'JaxprTracer' at 0x7ffa94034310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61739870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.26410965443417445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26410965, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b7850>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02600e0; to 'JaxprTracer' at 0x7ffcd02613a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63cf1e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.2799105259866877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27991053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068b310>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f006cb80; to 'JaxprTracer' at 0x7ff9f006d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a49eab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.2731357236746534, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27313572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877b330>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd051bd80; to 'JaxprTracer' at 0x7ffbd051a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3731ae30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.25952407207197853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25952407, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678120>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb074f560; to 'JaxprTracer' at 0x7ffbb074c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a457f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.25600747887197994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25600748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463c760>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702f29d0; to 'JaxprTracer' at 0x7ffc702f2d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76cb81d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.2593052761240928, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25930528, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c760>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0455f30; to 'JaxprTracer' at 0x7ffcd0456750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8de3d4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.2623405280458476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26234053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8850>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4468360; to 'JaxprTracer' at 0x7ff7a446ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dd5a360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.21386558263972755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21386558, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07abc60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0145c10; to 'JaxprTracer' at 0x7ffbd0145c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ecb53d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.2409920873990628, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24099209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257110>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e79c0; to 'JaxprTracer' at 0x7ffbd04bbce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61312940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2797031225336931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27970312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50264f50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5045ff10; to 'JaxprTracer' at 0x7ffc10287e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fd04f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.2617327590502154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26173276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e90f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712515990; to 'JaxprTracer' at 0x7ff712514900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x975c25b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.2661320133539304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26613201, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a0b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306f58f0; to 'JaxprTracer' at 0x7ffc306f4a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e6ad3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.2588516776320925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25885168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0116140>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117ff5b0; to 'JaxprTracer' at 0x7ff9f07c2660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84481630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.25156990332943513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2515699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066af60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0606980; to 'JaxprTracer' at 0x7ffaf0606fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bd38a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.2585018481457945, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25850185, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6720>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302df880; to 'JaxprTracer' at 0x7ffb302df9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x843cb810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.093252985292653
60, epoch_train_loss=2.093252985292653
Epoch 61
Epoch 61 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.2525389718974008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25253897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05364c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501aea20; to 'JaxprTracer' at 0x7ffa501af1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e7e89c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.24442436503514714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24442437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b830>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02ae520; to 'JaxprTracer' at 0x7ffcb02ae7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x856bc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.12108263674208566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12108264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a5a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02b7100; to 'JaxprTracer' at 0x7ffcd02b57b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18676430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.17681922463774072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17681922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d9c00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2862ad90; to 'JaxprTracer' at 0x7ffb2862bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51006950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.24882675283275352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24882675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bbcc0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71374a6b0; to 'JaxprTracer' at 0x7ff713748c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47fc6c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.27579260849447645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27579261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050f750>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0639d00; to 'JaxprTracer' at 0x7ffcb063a890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4859ae40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.25716499710333135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.257165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a0b40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5eab60; to 'JaxprTracer' at 0x7ff70c5ea430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x954afb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.26314209194344645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26314209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a00c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0099620; to 'JaxprTracer' at 0x7ffbd009ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fd658c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.23867364077196723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23867364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134ba100>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5020ef20; to 'JaxprTracer' at 0x7ffc5020e5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d3bbfb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.2834748543799217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28347485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427c240>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d87600; to 'JaxprTracer' at 0x7ffad06c27f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1d3790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.24075282104760465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24075282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537280>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f071d7b0; to 'JaxprTracer' at 0x7ff9f071cd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x604c4d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.2775315411788993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27753154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc106780d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94334ef0; to 'JaxprTracer' at 0x7ffa94335ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x479882f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.27943069668726994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2794307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688ed0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713987790; to 'JaxprTracer' at 0x7ff713984a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12e8b510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.29066060957246875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29066061, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac240>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7008aca0; to 'JaxprTracer' at 0x7ffb7008be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa574f380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.28610690294800545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2861069, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b9aa0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd030ad90; to 'JaxprTracer' at 0x7ffbd0308d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63474d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.27312301133257405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27312301, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c110>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0715ad0; to 'JaxprTracer' at 0x7ffca0716e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75150e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.2712586495106373, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27125865, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828c90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41a4400; to 'JaxprTracer' at 0x7ffcf41a67f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2467d0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.27519207037566795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27519207, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd65c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb060dbc0; to 'JaxprTracer' at 0x7ffcb060c040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31f0d660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.272456173652802, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27245617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0297ea0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01d2840; to 'JaxprTracer' at 0x7ff9d01d1670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bb71b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.22224594615434975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22224595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016d9c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3074a570; to 'JaxprTracer' at 0x7ffc30749bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ea8b800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.25596399112440316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25596399, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5040>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703b6570; to 'JaxprTracer' at 0x7ffa703b68e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5762bcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.2907052172573207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29070522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b03c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb074e980; to 'JaxprTracer' at 0x7ffbb074ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c7ea010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.27218941430324317, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27218941, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502658e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102ac7c0; to 'JaxprTracer' at 0x7ffc102afba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39c4deb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.27711759322186613, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27711759, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b0b00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4754860; to 'JaxprTracer' at 0x7ff7c4754f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f4f21b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.2719141821460234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27191418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e0b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117fcc20; to 'JaxprTracer' at 0x7ff7117ff010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5891d680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.26562401999082913, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26562402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f35d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120832e0; to 'JaxprTracer' at 0x7ff712082f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59357f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.26894067580844777, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26894068, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407621b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa945a0590; to 'JaxprTracer' at 0x7ffa945a04f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fdd52a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 2.040441916155418
61, epoch_train_loss=2.040441916155418
Epoch 62
Epoch 62 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.2678134773155719, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26781348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f390>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7045ec00; to 'JaxprTracer' at 0x7ffc7045d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2554b4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.26301118287067926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26301118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02548f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00a6ca0; to 'JaxprTracer' at 0x7ff9f00a4950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ce87500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.12575444506062375, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12575445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407c30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca043b650; to 'JaxprTracer' at 0x7ffca043ac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bbe3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.1834682158922524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18346822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016dfd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa943628e0; to 'JaxprTracer' at 0x7ffa943619e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x708a76b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.2775734596060677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27757346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294460>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71253d260; to 'JaxprTracer' at 0x7ff71253eb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d6ed0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.29110369279657394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29110369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a0a80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0157a10; to 'JaxprTracer' at 0x7ffbb0155a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fd3ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.27410919910225456, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2741092, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061a5c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5020bf60; to 'JaxprTracer' at 0x7ffb50209df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x657b5720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.27817862415733396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27817862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619e00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706b8ef0; to 'JaxprTracer' at 0x7ffb706b8e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46dc0f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.24796538094612813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24796538, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06db230>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506ba4d0; to 'JaxprTracer' at 0x7ffb506bbec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x689ad430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.3031630656254566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30316307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b8f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb283a60c0; to 'JaxprTracer' at 0x7ffb283a7790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x211f4c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.2614687589030264, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26146876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463e1c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca06ce390; to 'JaxprTracer' at 0x7ffca06ccf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50fb9bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.29159773509902703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29159774, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255b80>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305304a0; to 'JaxprTracer' at 0x7ffb30531f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x968a87d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.30276540608494984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30276541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407430>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07b9c10; to 'JaxprTracer' at 0x7ff9f07bb650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e2d09b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.3065998822235259, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30659988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7300>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0698090; to 'JaxprTracer' at 0x7ffbd069ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eb9bde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.32010250821378883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32010251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295920>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f52a70; to 'JaxprTracer' at 0x7ffad04837e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5294e2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.3027801628065193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30278016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088340>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502ec630; to 'JaxprTracer' at 0x7ffc502ec130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x491706c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.2814557936182351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28145579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c720>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010c9a0; to 'JaxprTracer' at 0x7ffbf010d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c4038d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.29503822275707003, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29503822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a9940>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa284fc090; to 'JaxprTracer' at 0x7ffa284ff920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9fc140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.2863389856853679, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28633899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502663a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0274fe0; to 'JaxprTracer' at 0x7ffca0275760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x620e64a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.23089360090258632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2308936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068af20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1012a890; to 'JaxprTracer' at 0x7ffc10129210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x589ae9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.2821066416988028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28210664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029dcf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073d350; to 'JaxprTracer' at 0x7ffb7073c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x523349a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.30719858191833876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30719858, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05359a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2813b830; to 'JaxprTracer' at 0x7ffc306c2c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be8a380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.2854528096371721, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28545281, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8140>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9464e200; to 'JaxprTracer' at 0x7ffaf06cc540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7033d940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.29398500354896073, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.293985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4c80>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70638ae0; to 'JaxprTracer' at 0x7ffa70639a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x181ca7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.2823718826530099, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28237188, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0116c10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1068e1b0; to 'JaxprTracer' at 0x7ffc1068e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d3904a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.2756968330763213, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27569683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d900>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404c1da0; to 'JaxprTracer' at 0x7ffa404c2480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x503f4410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.281919583894306, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28191958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10678980>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02b9bc0; to 'JaxprTracer' at 0x7ffbd02b99e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17006aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.9613878718718778
62, epoch_train_loss=1.9613878718718778
Epoch 63
Epoch 63 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.30442603066659285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30442603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5500>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb074c360; to 'JaxprTracer' at 0x7ff712833b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12101f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.27371644242392706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27371644, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4614750>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc104e3740; to 'JaxprTracer' at 0x7ffc104e27a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98d944d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1308151278382413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13081513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ebb80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702bebb0; to 'JaxprTracer' at 0x7ffc702bf5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85448ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.1903813781764158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19038138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367f90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa503f97b0; to 'JaxprTracer' at 0x7ffa503fb240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4826ed70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.2885994653398533, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28859947, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502656d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02a86d0; to 'JaxprTracer' at 0x7ffbb02a9030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18719b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.3319112017461221, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3319112, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8450>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30622070; to 'JaxprTracer' at 0x7ffc30623dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f432450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.3083467932432177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30834679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a8e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd009b6a0; to 'JaxprTracer' at 0x7ffbd009a3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73571f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.31643830048707006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3164383, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a5c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04e4bd0; to 'JaxprTracer' at 0x7ffad04e7b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x604f5ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.25805073709466725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25805074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088410>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e7560; to 'JaxprTracer' at 0x7ff7139e4fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4fd1da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.3152413771802788, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31524138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40760220>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7036bdd0; to 'JaxprTracer' at 0x7ffb7036a8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a836b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.2719197305828477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27191973, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4180>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4083560; to 'JaxprTracer' at 0x7ffcf40806d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x403ea840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.30331018560774625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30331019, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4615a30>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900ec6d0; to 'JaxprTracer' at 0x7ffa701896c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9317b460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.3149535504351671, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31495355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea040>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0154ae0; to 'JaxprTracer' at 0x7ffbb0156200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5acf0340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.34785987844411553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34785988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac3b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71283d4e0; to 'JaxprTracer' at 0x7ff7132a1b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61b61ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.3329206193454736, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33292062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502669b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7012ef20; to 'JaxprTracer' at 0x7ffa7012e980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10d9c160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.31492131055791867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31492131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06da270>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9035e980; to 'JaxprTracer' at 0x7ffb9035dc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69487500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.2928157732056624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29281577, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061bfb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07c4360; to 'JaxprTracer' at 0x7ffca07c4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x425e8ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.306896096768805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3068961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9980>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28350090; to 'JaxprTracer' at 0x7ffa283532e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a595a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.31851230226556604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3185123, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778d30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4085fd0; to 'JaxprTracer' at 0x7ffca04051c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37d48e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.24027045808715244, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24027046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016c890>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb051b380; to 'JaxprTracer' at 0x7ffbb0518c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72a1d930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.3068588657810785, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30685887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307ea610>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4148180; to 'JaxprTracer' at 0x7ffcf414ae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x181d2dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.34700167197050746, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34700167, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405350>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06b06d0; to 'JaxprTracer' at 0x7ffaf06b33d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c5a8190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.3093464747637409, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30934647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05367b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713986c00; to 'JaxprTracer' at 0x7ff713984f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81cc66a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.33038924107282286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33038924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0256270>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713690d10; to 'JaxprTracer' at 0x7ff713692cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e57fee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.2938882355096514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29388824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf01639c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc105409a0; to 'JaxprTracer' at 0x7ffc10542070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d5dc2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.2868518533914449, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28685185, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506780a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02b87c0; to 'JaxprTracer' at 0x7ffca02bbe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d24fe20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.3033509898776345, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30335099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463e0e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7136c7650; to 'JaxprTracer' at 0x7ff7136c4770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fcea710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.8434098000760302
63, epoch_train_loss=1.8434098000760302
Epoch 64
Epoch 64 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.3173426989154046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3173427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050e660>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073d620; to 'JaxprTracer' at 0x7ffb7073f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ee98a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.28537681144836874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28537681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711020>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab425d8a0; to 'JaxprTracer' at 0x7ffab425eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4232390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.13621956965738, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13621957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3140>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f01355d0; to 'JaxprTracer' at 0x7ff9f0134310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3c1e0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.19783849672659637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1978385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f5d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07c53a0; to 'JaxprTracer' at 0x7ffca07c6a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d1360d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.30058252078543674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30058252, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a9e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50639800; to 'JaxprTracer' at 0x7ffc50639bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51058290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.3458836926930835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34588369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42891f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd04d8d10; to 'JaxprTracer' at 0x7ffcd04db470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eda5590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.32128735794684843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32128736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd580>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f9b740; to 'JaxprTracer' at 0x7ff712f9a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64e02620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.3296927300588698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32969273, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd290>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab45644a0; to 'JaxprTracer' at 0x7ffab45667a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31e33d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.2687528632203554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26875286, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689d80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134dddf0; to 'JaxprTracer' at 0x7ff7134df1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b62b060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.32842978274403045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32842978, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98be60>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94060c20; to 'JaxprTracer' at 0x7ffa940624d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70502200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.28333069786247417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2833307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c7b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506eda30; to 'JaxprTracer' at 0x7ffa506ece00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ee6b2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.31602516317691054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31602516, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711b40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd009ac00; to 'JaxprTracer' at 0x7ffbd0098db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26408f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.3281954144940163, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32819541, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b27d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf046d170; to 'JaxprTracer' at 0x7ffaf046eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f6a7000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.3625304014187599, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3625304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46170c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a411ce00; to 'JaxprTracer' at 0x7ff70c5e8bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a3b2230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.3469654417522682, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34696544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287786a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302da610; to 'JaxprTracer' at 0x7ffc302d8540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81192770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.3280534396513067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32805344, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a0990>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd02a56c0; to 'JaxprTracer' at 0x7ffbd02a5fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62f0e8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.3051127187397546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30511272, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141badb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5018b9c0; to 'JaxprTracer' at 0x7ffa5018a070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b4b8190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.3197752479617549, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31977525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267dd0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1074ad90; to 'JaxprTracer' at 0x7ffc10748f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8adf840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.3319153895825162, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33191539, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4350>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28311b70; to 'JaxprTracer' at 0x7ffa28310e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41cc0170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.250298477246985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25029848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0535cb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300d3ab0; to 'JaxprTracer' at 0x7ffb300d0c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11cb4220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.3198016669792043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31980167, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eb350>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f3100; to 'JaxprTracer' at 0x7ff7c45eac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x405b98f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.3616881794574538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36168818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6df0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47544f0; to 'JaxprTracer' at 0x7ff7c47547c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85c43640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.322382427093741, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32238243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b3400>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10180ae0; to 'JaxprTracer' at 0x7ffc10183510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65ae9450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.3442990248174384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34429902, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4617d60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0399e40; to 'JaxprTracer' at 0x7ff9f0398860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33830bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3062463010371477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3062463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f3ec0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305328e0; to 'JaxprTracer' at 0x7ffb30533560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59c4a820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.2988672609020414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29886726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd5920>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02603b0; to 'JaxprTracer' at 0x7ffcf41a7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d252c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.31605347735402384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31605348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029cf30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712a81300; to 'JaxprTracer' at 0x7ff712a81260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a5e860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.7870252555458843
64, epoch_train_loss=1.7870252555458843
Epoch 65
Epoch 65 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.3310635008610689, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3310635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678d20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0797d30; to 'JaxprTracer' at 0x7ff9f07947c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84e91590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.2977181152170131, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29771812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163520>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7069e6b0; to 'JaxprTracer' at 0x7ffc7069ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e9b15d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.14201696682358325, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14201697, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7560>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3033b650; to 'JaxprTracer' at 0x7ffcd02b4ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x399642b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.20685467461041562, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20685467, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536440>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713749e40; to 'JaxprTracer' at 0x7ff713748c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x831e47c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.3133098148515981, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31330981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365f30>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb046f010; to 'JaxprTracer' at 0x7ffcb046ee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x373dfc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.36072930326114083, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3607293, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785070>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0696430; to 'JaxprTracer' at 0x7ffaf0697ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41bbcd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.3349718529569125, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33497185, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428abc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0220bd0; to 'JaxprTracer' at 0x7ffcb0222ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51343660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.3437605719070647, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34376057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a4b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5020cae0; to 'JaxprTracer' at 0x7ffc5020f2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x784387d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.28013379554557344, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2801338, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778800>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0620cc0; to 'JaxprTracer' at 0x7ffaf0621b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x611ea7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.3423906719333217, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34239067, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bb920>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c12afc0; to 'JaxprTracer' at 0x7ff70c129c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x518c81f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.29540238266859764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29540238, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a260>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021eca0; to 'JaxprTracer' at 0x7ffb5021c310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8862c240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.32950202544904417, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32950203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162bf0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f078cb80; to 'JaxprTracer' at 0x7ff9f078ce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa226a640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.3422515181217208, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34225152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a49f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad020ce00; to 'JaxprTracer' at 0x7ffad020e110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa42ef920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.3781017667288615, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37810177, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50713cb0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fac630; to 'JaxprTracer' at 0x7ff711fae980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92de9730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.3618289449670288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36182894, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367880>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40286840; to 'JaxprTracer' at 0x7ffa40284590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45d5c510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.3420620521304292, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34206205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785fb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9035e2f0; to 'JaxprTracer' at 0x7ffad0742b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f401d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.31814204221543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31814204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06687b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c455a2f0; to 'JaxprTracer' at 0x7ff7c4559c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eef4a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.33342486354321005, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33342486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a020>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00a58a0; to 'JaxprTracer' at 0x7ff9f00a5f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b5a1a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.3461220984677028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3461221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016caf0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b0a340; to 'JaxprTracer' at 0x7ff711b081d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63897c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.26096810033612156, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2609681, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b2600>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47efd30; to 'JaxprTracer' at 0x7ffab47eed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cd89740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.3334947944835523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33349479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3960>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010fb00; to 'JaxprTracer' at 0x7ffa40270090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5ca20f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.37726966385113553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37726966, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0256d40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0407920; to 'JaxprTracer' at 0x7ffcb07af920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61b21340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.3361862794596186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33618628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755e20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713265fd0; to 'JaxprTracer' at 0x7ff9f06101d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x768198d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.3590263383402189, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35902634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050f390>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b20e50; to 'JaxprTracer' at 0x7ff711b20310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x748d3cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3193772547993476, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31937725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026e200>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f039a660; to 'JaxprTracer' at 0x7ff9f039ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86e3ad80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.3116382702120648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31163827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01149e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06cd7b0; to 'JaxprTracer' at 0x7ffaf06cfa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a4a4010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.3295448951129859, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3295449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068f780>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122b29d0; to 'JaxprTracer' at 0x7ff7122b2b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86f28120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.7278334556900343
65, epoch_train_loss=1.7278334556900343
Epoch 66
Epoch 66 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.34566343356618917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34566343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb560>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd010ff60; to 'JaxprTracer' at 0x7ffbd010f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf8421b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.31080708819604064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31080709, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829db0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ebc40; to 'JaxprTracer' at 0x7ffbb02ea250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4236aeb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.14824806287489684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14824806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712eb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7045c220; to 'JaxprTracer' at 0x7ffc7045d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e302280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.2153555364239522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21535554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b2c50>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1010ce00; to 'JaxprTracer' at 0x7ffc1010e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5183dc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.3268901479027006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32689015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0297040>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94361620; to 'JaxprTracer' at 0x7ffa94362c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c2d2c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.3765473009674735, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3765473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3390>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30575800; to 'JaxprTracer' at 0x7ffb30575d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5501a740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.3495522168407781, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34955222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df260>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704f59e0; to 'JaxprTracer' at 0x7ffc704f6250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa765bf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.3587550698794995, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35875507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df5f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02d3a60; to 'JaxprTracer' at 0x7ffbb02d1670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58f46f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.29231660939735127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29231661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068ab00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71206f830; to 'JaxprTracer' at 0x7ff71206f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7390bd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.35728654573898677, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35728655, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bf40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f0cb80; to 'JaxprTracer' at 0x7ff713f0c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72306c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.30819599208544396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30819599, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba660>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7068bab0; to 'JaxprTracer' at 0x7ffc70688f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cc1c9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.343891568382652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34389157, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828ca0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5022b790; to 'JaxprTracer' at 0x7ffb5022a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x936a8a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.3572516972791521, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3572517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711500>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d039a340; to 'JaxprTracer' at 0x7ff9d039acf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c2cdf00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.39470239033083193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39470239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8340>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa947b3290; to 'JaxprTracer' at 0x7ffa947b0040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x526ba0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.3776629150103618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37766292, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296c90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0683f10; to 'JaxprTracer' at 0x7ff9d0682390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa65b7500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.35705046703106813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35705047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287795b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf420c9a0; to 'JaxprTracer' at 0x7ffcf420cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e33a410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.3320533534208886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33205335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea640>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10137fb0; to 'JaxprTracer' at 0x7ffc10136c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6575fd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.34796760936400006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34796761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06dae10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2862a340; to 'JaxprTracer' at 0x7ffb2862a570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x682a6130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.36126885804653286, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36126886, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5b40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0100c70; to 'JaxprTracer' at 0x7ffc3033bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11e06170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.2723813068342374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27238131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536680>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0519440; to 'JaxprTracer' at 0x7ffbb051a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x488f23e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.34808466000211064, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34808466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b7290>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50207d80; to 'JaxprTracer' at 0x7ffa406f71a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e698300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.39384519635797444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3938452, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6f50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711a82390; to 'JaxprTracer' at 0x7ffc7063af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47773200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.35090798221954983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35090798, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02577e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00a7dd0; to 'JaxprTracer' at 0x7ff9f00a4770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a08b590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.3747203973754169, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3747204, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8fd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d067df30; to 'JaxprTracer' at 0x7ff9d067fb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a5a0600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.33341100347099045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.333411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b330>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132656c0; to 'JaxprTracer' at 0x7ff713264630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96ebbe10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.32530078109488564, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32530078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea6e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0277790; to 'JaxprTracer' at 0x7ffca02769d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x236aacc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.3439545507413272, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34395455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f1040>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c40bff60; to 'JaxprTracer' at 0x7ff7c40bff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f9aa700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.6656333574186095
66, epoch_train_loss=1.6656333574186095
Epoch 67
Epoch 67 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.36137211043537426, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36137211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115b00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ca200; to 'JaxprTracer' at 0x7ffc300c90d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x340d85e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.3247675988842624, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3247676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160190>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30311e40; to 'JaxprTracer' at 0x7ffc30312ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x323d3eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1549159537936192, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15491595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d7f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1050ea20; to 'JaxprTracer' at 0x7ffc1050cf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78395950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.2244531709198089, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22445317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537af0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287c9f80; to 'JaxprTracer' at 0x7ffa287cacf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x111239c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.3415231314236524, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34152313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94364d70>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712045080; to 'JaxprTracer' at 0x7ff712044720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3da72a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.3935106968649263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3935107, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7430>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd040c810; to 'JaxprTracer' at 0x7ffcd040ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a388d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.36536001093517506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36536001, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a2880>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5069be20; to 'JaxprTracer' at 0x7ffb5069a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1568ab30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.37490271407630693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37490271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3340>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47c14e0; to 'JaxprTracer' at 0x7ff7c47c3dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4be3f9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.30524807705852847, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30524808, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295d10>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca067c900; to 'JaxprTracer' at 0x7ffca067cd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41feaef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.37333860740551733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37333861, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120899b0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02d0270; to 'JaxprTracer' at 0x7ffbb02d11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96038fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.3220974231169275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32209742, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01163d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70586f70; to 'JaxprTracer' at 0x7ffb70587330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f443200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.3593448467631444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35934485, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf01608e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7009bbf0; to 'JaxprTracer' at 0x7ffa7009a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43f12b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.3733885130902542, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37338851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c2e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307cf290; to 'JaxprTracer' at 0x7ffb307ccd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x928548b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.4125579908474843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41255799, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828160>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d322a0; to 'JaxprTracer' at 0x7ff711d32b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ae14540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.3948077069633764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39480771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365740>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06a0b30; to 'JaxprTracer' at 0x7ffaf06a3bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x287d08a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.37312295288196984, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37312295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787f60>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28794bd0; to 'JaxprTracer' at 0x7ffa287944f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39715b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.3469628164527978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34696282, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a410>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712a86ed0; to 'JaxprTracer' at 0x7ff712a84fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80a764c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.3635960998328225, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3635961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877be60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf417a520; to 'JaxprTracer' at 0x7ffcf417bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x388cb440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.3775388006252889, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3775388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0220>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70338d10; to 'JaxprTracer' at 0x7ffb703397b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ce0bf70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.2845604514571072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28456045, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ad170>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9031a160; to 'JaxprTracer' at 0x7ffb9031a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6167d630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.36387376697641444, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36387377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712dc0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f08b0; to 'JaxprTracer' at 0x7ff9d05f3b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a4af4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.411697130156747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41169713, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9a90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03988b0; to 'JaxprTracer' at 0x7ffaf0623c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a213460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.36671726055600284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36671726, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755f70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28629580; to 'JaxprTracer' at 0x7ffb2862a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c657d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.39166623625680763, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39166624, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829c60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06bdbc0; to 'JaxprTracer' at 0x7ffcb06be020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x566aca70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3483694880913294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34836949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b83d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa503fae30; to 'JaxprTracer' at 0x7ffa503fa930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f4f1e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.33991292023244435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33991292, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427e7f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713279030; to 'JaxprTracer' at 0x7ff713278900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f69d100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.3593468550197808, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35934686, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1080>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47e4270; to 'JaxprTracer' at 0x7ff7c47e4d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45467c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.5997167240430068
67, epoch_train_loss=1.5997167240430068
Epoch 68
Epoch 68 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.378168920621219, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37816892, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068eed0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc300ecae0; to 'JaxprTracer' at 0x7ffc300ed260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dfbdcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.33971658821702494, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33971659, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07ab010>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb039a250; to 'JaxprTracer' at 0x7ffbb039a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bd60fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.16222961144113576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16222961, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050eb20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0325120; to 'JaxprTracer' at 0x7ffbf0324630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37eb71a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.2343008739698316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23430087, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702af940>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab425dc60; to 'JaxprTracer' at 0x7ffab425c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1229fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.3573076787003703, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35730768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407f90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb060c180; to 'JaxprTracer' at 0x7ffcb060e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72764640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.4118640552601693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41186406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc670>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307cce50; to 'JaxprTracer' at 0x7ffb307cdb20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bf10690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.38227605062698683, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38227605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365ae0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0157c40; to 'JaxprTracer' at 0x7ffbb0154ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a9459b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.39233243624423364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39233244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943659e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b4d580; to 'JaxprTracer' at 0x7ff712b4c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22ab9100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.3195934851044242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31959349, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6d10>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41f6c00; to 'JaxprTracer' at 0x7ff7a41f7dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bba5760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.3906303906408903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39063039, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b890>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02c8e50; to 'JaxprTracer' at 0x7ffbb02ca5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4799fc90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.33715856249955084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33715856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068f3e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0221d50; to 'JaxprTracer' at 0x7ffcd0223560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85ce4160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.3761352396948458, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37613524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a9d50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504898f0; to 'JaxprTracer' at 0x7ffb5048b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bde9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.3908414985565122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3908415, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050f990>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506fb6f0; to 'JaxprTracer' at 0x7ffb506fbe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31f5d7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.4318501540532772, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43185015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029cfa0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d0ae30; to 'JaxprTracer' at 0x7ff711d0b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3186fee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.41318502227325044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41318502, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404df0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50428f90; to 'JaxprTracer' at 0x7ffa5042a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40fa4640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.39062769982811474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3906277, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de930>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0287d80; to 'JaxprTracer' at 0x7ffad02859e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f683c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.3632242504999303, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36322425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068ad40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120800e0; to 'JaxprTracer' at 0x7ff712083b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a2f8710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.3804744871018835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38047449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0535740>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71348ee30; to 'JaxprTracer' at 0x7ff71348d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x672ac490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.39516145904844757, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39516146, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c0a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02454e0; to 'JaxprTracer' at 0x7ffca0245710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x374709f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.2978449725229973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29784497, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46143e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f535b0; to 'JaxprTracer' at 0x7ff712f51c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6214f110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.3807569129750238, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38075691, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619030>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47eed90; to 'JaxprTracer' at 0x7ffab47edf80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b283ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.4309489572224523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43094896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161930>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713748770; to 'JaxprTracer' at 0x7ff71374aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x902714c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.3838626265281463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38386263, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50713cc0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285b82c0; to 'JaxprTracer' at 0x7ffc104e2d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x832c6b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.40982560711711974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40982561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029ec50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504cfba0; to 'JaxprTracer' at 0x7ffc504cdfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62648e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.36484118413205696, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36484118, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267c70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712515d50; to 'JaxprTracer' at 0x7ff712515670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3be93030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.3559355299639595, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35593553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026e3a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711afaf70; to 'JaxprTracer' at 0x7ff711afa9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32640800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.376208237010739, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37620824, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257d80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700c2840; to 'JaxprTracer' at 0x7ffb700c2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3309be60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.5300898491300203
68, epoch_train_loss=1.5300898491300203
Epoch 69
Epoch 69 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.39627394951890826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39627395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067b770>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9473ffb0; to 'JaxprTracer' at 0x7ffa9473f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38a11db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.3557478534655447, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35574785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8280>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28551350; to 'JaxprTracer' at 0x7ffb28550d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x566d10d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.16995850591894915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16995851, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161ff0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1050f8d0; to 'JaxprTracer' at 0x7ff9f0797560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2dd7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.2447821483891598, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24478215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e210>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30749cb0; to 'JaxprTracer' at 0x7ffc3074aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa22cdb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.3742979083758137, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37429791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0534e40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71418c860; to 'JaxprTracer' at 0x7ff71418eb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33ab6790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.431513125560725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43151313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365190>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0717fb0; to 'JaxprTracer' at 0x7ffc5020db70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e4ffa40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.40064369279214573, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40064369, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0297f80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706bafc0; to 'JaxprTracer' at 0x7ffb706b97b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57ca2470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.4110998495381567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41109985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294a00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa407836f0; to 'JaxprTracer' at 0x7ffa407806d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e07ae10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.33453401661542986, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33453402, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ae7c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94639c60; to 'JaxprTracer' at 0x7ffa94638180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99ff5290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.40924876367445084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40924876, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016ee10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71207ae30; to 'JaxprTracer' at 0x7ff71207b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50304030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.35351826734519554, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35351827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a170>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ca250; to 'JaxprTracer' at 0x7ffc100c93f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63d47820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.3940491145261931, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39404911, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea000>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7012ce50; to 'JaxprTracer' at 0x7ffad01b7ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7b054e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.409583828936768, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40958383, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163db0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca047ffb0; to 'JaxprTracer' at 0x7ffa70098900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x680d36d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.4525976392910937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45259764, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6f60>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d6070; to 'JaxprTracer' at 0x7ffb302d4770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x978584c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.4331294878754152, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43312949, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5c50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa701525c0; to 'JaxprTracer' at 0x7ffa70153e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f854040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.40932503043292046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40932503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365830>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4417c40; to 'JaxprTracer' at 0x7ffc306f7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa78c25f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.3805168849485194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38051688, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc790>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad075fc40; to 'JaxprTracer' at 0x7ffad075cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42fde800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.39861449861724657, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3986145, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b2150>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02af600; to 'JaxprTracer' at 0x7ffcb02ac9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x699269b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.4139907989302394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4139908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50710800>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04ba840; to 'JaxprTracer' at 0x7ffbd04b9990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89c0f630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.31188813522921227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.31188814, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463c8f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4086a70; to 'JaxprTracer' at 0x7ffcf4087830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5af63e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.3990552563378665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39905526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7118287f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50228360; to 'JaxprTracer' at 0x7ffb5022a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x645f0bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.4516685582351418, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45166856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d940>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e0bd0; to 'JaxprTracer' at 0x7ffb307e22f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31f67d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4021535018820463, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4021535, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616800>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132c98f0; to 'JaxprTracer' at 0x7ff7132c84f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x510fbd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.429504979860568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42950498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067a600>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05e5210; to 'JaxprTracer' at 0x7ff9f05e42c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87342f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3821436017624602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3821436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761f90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7043b3d0; to 'JaxprTracer' at 0x7ffc704387c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fe873c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.372887253121067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37288725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778610>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0309850; to 'JaxprTracer' at 0x7ffca030b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78504f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.39403576748667934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39403577, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013fff0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06bbbf0; to 'JaxprTracer' at 0x7ffaf06bbd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d393100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.4569598570917544
69, epoch_train_loss=1.4569598570917544
Epoch 70
Epoch 70 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.41562190591515474, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41562191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068b540>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048fba0; to 'JaxprTracer' at 0x7ffc5048cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x583d0560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.37303506970474776, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37303507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f2dc0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42ef650; to 'JaxprTracer' at 0x7ffab42efd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d4dee70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.17845818515713108, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17845819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a9230>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e4310; to 'JaxprTracer' at 0x7ff7141e4a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71956610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.2561947266873179, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.25619473, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050fbd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71353d850; to 'JaxprTracer' at 0x7ff71353ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1dbbf230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.3926907444324411, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39269074, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712d20>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07c79c0; to 'JaxprTracer' at 0x7ffca07c64d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3edbd420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.4528748703596787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45287487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294de0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4106d40; to 'JaxprTracer' at 0x7ff7c4106890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x797a85c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.4203496902747636, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42034969, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288550>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90186570; to 'JaxprTracer' at 0x7ffb90185c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81acde00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.4313604730789012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43136047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289420>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa947e2840; to 'JaxprTracer' at 0x7ffa947e1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x663ed770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.35122554069104756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35122554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a63e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4056fdd0; to 'JaxprTracer' at 0x7ff712f84db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6fc07570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.42948922636368386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42948923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b880>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9028e020; to 'JaxprTracer' at 0x7ffb9028d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ae8b440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.3712584131689686, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37125841, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068b1d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706b80e0; to 'JaxprTracer' at 0x7ffaf06222a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x596da8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.413655396187197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4136554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f1ef0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50738cc0; to 'JaxprTracer' at 0x7ffa50738ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8625a200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.43000334607674473, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43000335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aa2c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d03884f0; to 'JaxprTracer' at 0x7ff9d0388950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9be7b320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.4751430687550323, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47514307, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678370>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300644f0; to 'JaxprTracer' at 0x7ffaf06cf290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8859a390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.45468980712312074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45468981, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507135a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c456cb30; to 'JaxprTracer' at 0x7ff7c456f970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bc71940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.42978543684145176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42978544, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405530>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28311940; to 'JaxprTracer' at 0x7ffa283117b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88842530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.39949249275303983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39949249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94366bb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1050f330; to 'JaxprTracer' at 0x7ffc1050d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69b8fb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.41833203175709394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41833203, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757e00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41a41d0; to 'JaxprTracer' at 0x7ffcf41a53a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ad893a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.4345489550090692, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43454896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0114b30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010f010; to 'JaxprTracer' at 0x7ffbf010f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x723af190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.3272819446600166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32728194, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46162d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70122a70; to 'JaxprTracer' at 0x7ffb70121a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x644b9110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.4187326700834106, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41873267, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162c80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03dde90; to 'JaxprTracer' at 0x7ffcb03dd0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b235da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.4740832734630745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47408327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029eef0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94343d30; to 'JaxprTracer' at 0x7ffa943401d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5952e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4221070973836656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4221071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463ddb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca05fda80; to 'JaxprTracer' at 0x7ffca05fce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3707ba90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.45068624676587404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45068625, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787ce0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02840e0; to 'JaxprTracer' at 0x7ffcb0285ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x765af000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.40134071597285426, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40134072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f090>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132c88b0; to 'JaxprTracer' at 0x7ff7132c8630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41790710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.39162748571091793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39162749, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502644b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712514680; to 'JaxprTracer' at 0x7ff712516a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa655c5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.4136802072843105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41368021, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b7110>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06ece50; to 'JaxprTracer' at 0x7ffbb06ed350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa36f3db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.3803882966346253
70, epoch_train_loss=1.3803882966346253
Epoch 71
Epoch 71 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.43627852237506853, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43627852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4900>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0191df0; to 'JaxprTracer' at 0x7ff9d01932e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49ed5fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.39140878047817695, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39140878, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b88d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70496160; to 'JaxprTracer' at 0x7ffc70497060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92dd7790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.18730284925356908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.18730285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029e4f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30545670; to 'JaxprTracer' at 0x7ffc305462f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5de73950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.2681505337534319, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.26815053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0114c60>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94706f70; to 'JaxprTracer' at 0x7ffa94707380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1359aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.41230460892635556, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41230461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5330>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280cd0d0; to 'JaxprTracer' at 0x7ffbd02a56c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2358d3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.4755566862631293, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47555669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289fb0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705431f0; to 'JaxprTracer' at 0x7ffb70543010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x773b6a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.44146433095862664, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44146433, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac810>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03265c0; to 'JaxprTracer' at 0x7ffbd0325a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x770cba10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.4531433012048301, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4531433, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702acb60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701565c0; to 'JaxprTracer' at 0x7ffb70156890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d6084e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.36834459854079826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3683446, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050ed20>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f0ca90; to 'JaxprTracer' at 0x7ff713f0fbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f692ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.4510066739527711, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45100667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b13c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab429d3f0; to 'JaxprTracer' at 0x7ffab429cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34ac4750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.39021135397624407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39021135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dc290>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404c2a20; to 'JaxprTracer' at 0x7ffc704f6ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81e6b8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.43430499758706753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.434305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bbe10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90574540; to 'JaxprTracer' at 0x7ffb90574db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e009a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.45168175607327105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45168176, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029d2f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45b6bb0; to 'JaxprTracer' at 0x7ff7c45b6c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a217b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.4991688841831555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49916888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068bf50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca047dda0; to 'JaxprTracer' at 0x7ffca047f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1e7f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.4779329689032336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47793297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4300>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f058bec0; to 'JaxprTracer' at 0x7ff9f05885e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x724bd4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.4515541890154288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45155419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a970>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1072c0e0; to 'JaxprTracer' at 0x7ffc1072fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa33f0210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.4193632022087618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4193632, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296930>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306f4ea0; to 'JaxprTracer' at 0x7ffc306f6070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5969a410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.4392765575651415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43927656, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb7d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02dab10; to 'JaxprTracer' at 0x7ffca02d82c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98565420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.45631063715600145, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45631064, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463e440>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713782e80; to 'JaxprTracer' at 0x7ff713780270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a9a9fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.34350765295299335, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.34350765, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07ab410>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0760bd0; to 'JaxprTracer' at 0x7ffbd0762750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3af3e8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.4397916917830322, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43979169, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679860>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4584fe0; to 'JaxprTracer' at 0x7ffb900ef330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5eae4400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.49804327401892684, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49804327, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0db0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711a80ae0; to 'JaxprTracer' at 0x7ff711a81f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a609600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4431034831762727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44310348, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46164f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010cdb0; to 'JaxprTracer' at 0x7ffbf010db20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ec2250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.47338408333844645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47338408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182b670>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03dc400; to 'JaxprTracer' at 0x7ffcb03dd3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ddc0570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.42120425082957863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42120425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134ba270>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ce4540; to 'JaxprTracer' at 0x7ff713ce73d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb961720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.41122568824136874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41122569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a10c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0108950; to 'JaxprTracer' at 0x7ffbf010b830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1507090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.4341857369847832, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43418574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160f50>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ada700; to 'JaxprTracer' at 0x7ff712ada840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x987ed620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.3019673814801758
71, epoch_train_loss=1.3019673814801758
Epoch 72
Epoch 72 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.45818478085657577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45818478, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943672f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6551c0; to 'JaxprTracer' at 0x7ff70c656a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a374340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.4111042025416194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4111042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786a70>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42c9760; to 'JaxprTracer' at 0x7ffab42ca980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c0d03d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.19688479961383665, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1968848, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2bb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0136020; to 'JaxprTracer' at 0x7ff9f0134770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78427c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.2811456867510179, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.28114569, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aa810>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a45ce110; to 'JaxprTracer' at 0x7ff7a45cf970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c3b6300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.43386254920065975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43386255, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463df00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad06c2cf0; to 'JaxprTracer' at 0x7ffad06c09f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65435e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.5003559321388008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50035593, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dce10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106f36f0; to 'JaxprTracer' at 0x7ffc106f0f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5526d6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.4639659508573004, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46396595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428ae90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100c8c20; to 'JaxprTracer' at 0x7ffc100ca6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62ff0a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.47653571666665007, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47653572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a6a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307bbab0; to 'JaxprTracer' at 0x7ffb307bae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d53f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.3870973414012757, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38709734, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c980>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab429dc10; to 'JaxprTracer' at 0x7ffab429d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e9ff440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.4744824816667748, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47448248, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b7d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47c0bd0; to 'JaxprTracer' at 0x7ff7c47c11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dc983b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.41111822626794553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41111823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367d80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0276700; to 'JaxprTracer' at 0x7ffca0276570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39f3f8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.45682270898188854, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45682271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786400>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad043bdd0; to 'JaxprTracer' at 0x7ffad04389f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x395ed120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.4752000857563253, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47520009, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b0e40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd009abb0; to 'JaxprTracer' at 0x7ffbd009a5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10b89530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.5253169929555673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52531699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb040>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0076700; to 'JaxprTracer' at 0x7ffbf0074900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25a17630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.5031702185539357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50317022, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463e7f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0093740; to 'JaxprTracer' at 0x7ff9f0092660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f8fb840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.47538879410926693, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47538879, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711cc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c7e3e0; to 'JaxprTracer' at 0x7ff713c7c7c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65e0110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.4410099214060573, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44100992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7bd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02fdcb0; to 'JaxprTracer' at 0x7ffbf02ff920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b8dd030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.46190914733091054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46190915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7740>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124cc3b0; to 'JaxprTracer' at 0x7ff7124ced40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2074d590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.4800096227652828, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48000962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b510>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02d0720; to 'JaxprTracer' at 0x7ffcd02d0e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49653160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.36137208643125773, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36137209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46173c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940995d0; to 'JaxprTracer' at 0x7ffa94099030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d3a4ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.4622131744629753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46221317, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029edf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4454ef0; to 'JaxprTracer' at 0x7ffcf4457240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b18fe10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.5238949929497604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52389499, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a5f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf44558f0; to 'JaxprTracer' at 0x7ffbf03243b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c00cee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4659425702795029, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46594257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706193f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712826d90; to 'JaxprTracer' at 0x7ff712824ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11bcab30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.4975971943718897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49759719, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4c30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45860c0; to 'JaxprTracer' at 0x7ff7c4585a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dc2e980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.442940892934046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44294089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877af40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06c96c0; to 'JaxprTracer' at 0x7ffbd06cbbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5711fca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.4327651273737572, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43276513, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9a10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf051a070; to 'JaxprTracer' at 0x7ffbf0519210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88e42c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.4566266780718383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45662668, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761d40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06ec3b0; to 'JaxprTracer' at 0x7ffbb06ec310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22d1d2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.222037595021581
72, epoch_train_loss=1.222037595021581
Epoch 73
Epoch 73 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.48160493564340195, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48160494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537d50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07b8a40; to 'JaxprTracer' at 0x7ff9f07bb4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2318be20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.4319264957910888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4319265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6b70>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300d1ad0; to 'JaxprTracer' at 0x7ffb300d2070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40728880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.20673492369296848, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20673492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4617480>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06b0ef0; to 'JaxprTracer' at 0x7ffa28756570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71d0dc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.29466460573113934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29466461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e8e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c7da80; to 'JaxprTracer' at 0x7ff713c7c810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x130bdd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.45737641860091355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45737642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b5f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c456d030; to 'JaxprTracer' at 0x7ff7c456db70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f654040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.5271049205010438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52710492, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd680>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122c7ba0; to 'JaxprTracer' at 0x7ff7122c5260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4457b560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.48831657611500495, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48831658, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463da70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb074cb80; to 'JaxprTracer' at 0x7ffbb074eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72c6a120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5021884268505806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50218843, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463c490>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706bb8d0; to 'JaxprTracer' at 0x7ffb706ba7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38049db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.40524117455939285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40524117, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f1780>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71206dad0; to 'JaxprTracer' at 0x7ffb7036b600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f84c7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.49964953026807124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49964953, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5390>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f99710; to 'JaxprTracer' at 0x7ff712f99d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52245970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.43407863316489, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43407863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296dd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100c8b30; to 'JaxprTracer' at 0x7ffc100cb6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x698f7370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.48036630425238197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4803663, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6b80>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4072a480; to 'JaxprTracer' at 0x7ffa4072bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e87e150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.5004489826810435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50044898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4615970>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03e60c0; to 'JaxprTracer' at 0x7ffaf03e5ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c793dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.5536458177836941, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55364582, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712089fd0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07c1a80; to 'JaxprTracer' at 0x7ffcd07c2200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a0bcda0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.5309071737255294, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53090717, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502677b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287947c0; to 'JaxprTracer' at 0x7ffb9035d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5e394c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.5011742924951725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50117429, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dec90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71368cdb0; to 'JaxprTracer' at 0x7ff71368ffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5abb6cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.46337510500155954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46337511, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711de0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10542700; to 'JaxprTracer' at 0x7ffc105431a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5346d160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.4859201609235734, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48592016, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07abab0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30518360; to 'JaxprTracer' at 0x7ffc30518220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x362868d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5049703398828185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50497034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2980>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00d3e20; to 'JaxprTracer' at 0x7ffc10092480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79d8a090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.38005679330706704, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38005679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182aea0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285a1f30; to 'JaxprTracer' at 0x7ffc70285ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x666b1100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.4859412057125304, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48594121, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0784ca0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5048c4a0; to 'JaxprTracer' at 0x7ffc5048ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6b66140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.5518224210981404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55182242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0256ef0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0366c50; to 'JaxprTracer' at 0x7ff7c4321080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24c0f200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4898964221874929, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48989642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01149d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3b5d50; to 'JaxprTracer' at 0x7ff70c3b77e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50b8d7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.5240690774471991, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52406908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704049a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10137a10; to 'JaxprTracer' at 0x7ffc10135b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5bd6290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.46506418588514337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46506419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bbb50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41c1670; to 'JaxprTracer' at 0x7ffbf02b70b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d72b4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.45512459868645894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4551246, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427ff00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712825760; to 'JaxprTracer' at 0x7ffca063a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e954ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.4798234957220205, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4798235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013c2b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb031f330; to 'JaxprTracer' at 0x7ffbb031dad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8545c600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.141692155226526
73, epoch_train_loss=1.141692155226526
Epoch 74
Epoch 74 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5063630602454705, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50636306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161ca0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71250cef0; to 'JaxprTracer' at 0x7ff71250e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7adf67a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.4549530295684224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45495303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b150>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d066f740; to 'JaxprTracer' at 0x7ff9d066c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x856da590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.21711906987646795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21711907, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365aa0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01449f0; to 'JaxprTracer' at 0x7ffbd0145300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x434d4890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.30929863261783686, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.30929863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829680>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0483ce0; to 'JaxprTracer' at 0x7ffad0480770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d97b560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6929660342392555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69296603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b05d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb04c03b0; to 'JaxprTracer' at 0x7ffbb04c13f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f645aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.5926055898199908, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59260559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02943e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d27d30; to 'JaxprTracer' at 0x7ff712d26c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x574f7a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.5229408100368037, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52294081, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac170>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07846d0; to 'JaxprTracer' at 0x7ffcb0786610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44ba24f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5608598383757148, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56085984, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ad650>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7136ef1f0; to 'JaxprTracer' at 0x7ff7136effb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89c12c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4240814646048178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42408146, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a51e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404c1bc0; to 'JaxprTracer' at 0x7ffa404c1a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f118300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.5286626845014618, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52866268, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b630>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507615d0; to 'JaxprTracer' at 0x7ffb50761f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b04cac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.47803438732659737, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47803439, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163550>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00ff600; to 'JaxprTracer' at 0x7ffbb00fc400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x953e8170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5072883139121471, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50728831, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067bae0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0445bc0; to 'JaxprTracer' at 0x7ffcb04461b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6245f4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.5332844432317891, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53328444, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943642d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304be200; to 'JaxprTracer' at 0x7ffc304be0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cda1cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.5910412410394779, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59104124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0756bf0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71370bc40; to 'JaxprTracer' at 0x7ff71370b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e664090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.5659481243214827, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56594812, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3fe0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10342bb0; to 'JaxprTracer' at 0x7ffc103423e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d77a6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.5464919609269987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54649196, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d060>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506c0f40; to 'JaxprTracer' at 0x7ffa506c22f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39b50e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.4991135545099168, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49911355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050f660>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1074aa20; to 'JaxprTracer' at 0x7ffa406f49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c840dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.5135362345366895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51353623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42891b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0796f20; to 'JaxprTracer' at 0x7ff9f0797880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b78df30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5359342504646339, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53593425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015df20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106a2570; to 'JaxprTracer' at 0x7ffc106a09a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54b250e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.4008217474408508, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40082175, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066bb60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03244f0; to 'JaxprTracer' at 0x7ffbf0326e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b363ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.5323749133571426, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53237491, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115850>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07ba610; to 'JaxprTracer' at 0x7ff9f07bb600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x529e8160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.587103044459045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58710304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06db690>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700c2070; to 'JaxprTracer' at 0x7ffb700c1b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3693e9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.5312192017052361, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5312192, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0784c20>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc105433d0; to 'JaxprTracer' at 0x7ffc105412b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40c80e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.5541370147147197, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55413701, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754c30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05c1a80; to 'JaxprTracer' at 0x7ff9d05c2b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c71850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.4897622510294437, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48976225, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a2f30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f078c130; to 'JaxprTracer' at 0x7ffb5026c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50cd2d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.49767826521017394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49767827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068a2c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0518cc0; to 'JaxprTracer' at 0x7ffbb0519530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x768fa3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5056723370700045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50567234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8d50>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70672c50; to 'JaxprTracer' at 0x7ffa70672ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dd7d9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 1.0282519257075078
74, epoch_train_loss=1.0282519257075078
Epoch 75
Epoch 75 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-1.1410477216507147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.14104772, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50710d10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4321a30; to 'JaxprTracer' at 0x7ff7c43204a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x523cefe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.47937217931207166, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47937218, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bb2a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02d13f0; to 'JaxprTracer' at 0x7ffc30518d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f5fe10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.22684825672071943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22684826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d90f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a43b9a30; to 'JaxprTracer' at 0x7ff9f059fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x499e4790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.32463078256474914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32463078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d790>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702be840; to 'JaxprTracer' at 0x7ffbb066e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5473e990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-2.6198785015507164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-2.6198785, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7260>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a43e08b0; to 'JaxprTracer' at 0x7ff7a43e03b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x958e0690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-5.157662436284591, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-5.15766244, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702aca60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d038b650; to 'JaxprTracer' at 0x7ff71370a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85e295a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7058817124899626, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70588171, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f33e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304e27a0; to 'JaxprTracer' at 0x7ffc304e02c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x488ca470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-2.9988797935400617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-2.99887979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f3bd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506bb6f0; to 'JaxprTracer' at 0x7ffb506b9120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc4a4200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4425913885021953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44259139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a220>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c370220; to 'JaxprTracer' at 0x7ff70c3726b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ad59880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.562838627565864, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56283863, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762bf0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2813b6f0; to 'JaxprTracer' at 0x7ffb2813b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e2d7d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.7341226897770925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73412269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712300>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5042a200; to 'JaxprTracer' at 0x7ffc5042a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5eafe4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5399192894769712, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53991929, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134ba180>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90184540; to 'JaxprTracer' at 0x7ffb901865c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61913250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.5932106285076896, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59321063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06dae10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7073dbc0; to 'JaxprTracer' at 0x7ffb90187790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f225600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7714351694665774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77143517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f7e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0308fe0; to 'JaxprTracer' at 0x7ffbd030a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x826ce180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.6259571706925008, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62595717, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4750>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712cd8770; to 'JaxprTracer' at 0x7ff71353e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x636dbe50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7236079748868359, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72360797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd4770>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100913f0; to 'JaxprTracer' at 0x7ffc10093420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72a5e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5843792059560218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58437921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02979e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f01371a0; to 'JaxprTracer' at 0x7ff9f0137240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e1cc130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.5465180124633099, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54651801, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc706199e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0146480; to 'JaxprTracer' at 0x7ff7124fcae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d736480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-1.1552636201988467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-1.15526362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365890>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712cfc9f0; to 'JaxprTracer' at 0x7ff712cfe7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45b784c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.42362574355102184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42362574, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70406eb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02affb0; to 'JaxprTracer' at 0x7ffcf41a6ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e40ba90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7050453840449756, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70504538, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208ba40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c67e700; to 'JaxprTracer' at 0x7ff70c67ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37d62c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.6797213918776212, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67972139, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029edc0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700984a0; to 'JaxprTracer' at 0x7ffa70099850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d6fedf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.6963214828514497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69632148, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0669150>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf01983b0; to 'JaxprTracer' at 0x7ffaf01989f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x384a9dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.5908777076997511, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59087771, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e4f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285cc4f0; to 'JaxprTracer' at 0x7ffb285cfd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d5959f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5221898996160674, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5221899, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785750>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10542520; to 'JaxprTracer' at 0x7ffc105404a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa728d6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.6297913184900173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62979132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9ab0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506f99e0; to 'JaxprTracer' at 0x7ffb506f8e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c0ce2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5343343080847566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53433431, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754f80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad046c400; to 'JaxprTracer' at 0x7ffad046c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7100bdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 5.176975495341109
75, epoch_train_loss=5.176975495341109
Epoch 76
Epoch 76 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5426237665159411, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54262377, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050dd90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902d0fe0; to 'JaxprTracer' at 0x7ffb902d0270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aba7680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.48737400659761215, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48737401, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d930>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca00a5490; to 'JaxprTracer' at 0x7ffca00a4c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2efa0000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.22793870249614656, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.2279387, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016e120>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f006d620; to 'JaxprTracer' at 0x7ff9f006e890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6640ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.32981465738511845, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32981466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405ee0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0a43b0; to 'JaxprTracer' at 0x7ff70c0a4db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30aef330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6602408392702509, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66024084, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02579b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712cd9e90; to 'JaxprTracer' at 0x7ff712cd9a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32f1a430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.621247838834448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62124784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f38a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30683d30; to 'JaxprTracer' at 0x7ffc306810d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81712bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.558258087779714, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55825809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288d30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0101a30; to 'JaxprTracer' at 0x7ffca0100cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2614f9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.591113149628543, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59111315, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288b30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021c680; to 'JaxprTracer' at 0x7ffb5021d350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62574e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4403383941073192, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44033839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266b80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ca3e0; to 'JaxprTracer' at 0x7ffbb02cad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30774fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.5650451193258101, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56504512, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b6c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30745bc0; to 'JaxprTracer' at 0x7ffb30744040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b8f9d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5027699207038955, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50276992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050cf30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0621080; to 'JaxprTracer' at 0x7ffaf0621530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x987535f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5395082807019128, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53950828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d4a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711a82ac0; to 'JaxprTracer' at 0x7ff711a80450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7eac6380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.5704986375703234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57049864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016cff0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f009d210; to 'JaxprTracer' at 0x7ff9f009e930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93522d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.6297922317041569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62979223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711380>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713289a30; to 'JaxprTracer' at 0x7ff71328bf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90892fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.6061576763466079, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60615768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255bc0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307497b0; to 'JaxprTracer' at 0x7ffc3074b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fd743e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.5820141726522602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58201417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b04b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702bd0d0; to 'JaxprTracer' at 0x7ffc702bd530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a02bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5256113005368019, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5256113, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ae1a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a462e2f0; to 'JaxprTracer' at 0x7ff7a462c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25beadc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.5496255101327788, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54962551, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6930>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ca30b0; to 'JaxprTracer' at 0x7ff712ca36a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31595aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5678362559695154, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56783626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616a40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904c84f0; to 'JaxprTracer' at 0x7ffb904c8cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8de1abf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.42397956792694486, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42397957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066a4a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41f3240; to 'JaxprTracer' at 0x7ffcf41f2de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x847bf2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.5568710122897041, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55687101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06da250>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712831a80; to 'JaxprTracer' at 0x7ff712831fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e8991a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.6269836199875384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62698362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067b400>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9049bf60; to 'JaxprTracer' at 0x7ffb9049b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f71b5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.5528266603684697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55282666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10678c70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30339350; to 'JaxprTracer' at 0x7ffc3033ad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4370ae50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.593565135784401, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59356514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779a60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30525440; to 'JaxprTracer' at 0x7ffb305243b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e32c130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5138634531943996, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51386345, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026e890>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106a34c0; to 'JaxprTracer' at 0x7ffc106a0720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53035820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5172321037786312, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5172321, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8750>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504e4ae0; to 'JaxprTracer' at 0x7ffaf06b3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ba6e990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5321414440946943, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53214144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c0f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06bdd00; to 'JaxprTracer' at 0x7ffaf06bdb70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x691595c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.9467028711439397
76, epoch_train_loss=0.9467028711439397
Epoch 77
Epoch 77 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5543161524142791, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55431615, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd920>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0406d90; to 'JaxprTracer' at 0x7ff9f04044a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b85e780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.4979041973066311, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4979042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a29c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70188310; to 'JaxprTracer' at 0x7ffa70189cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x712a34f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.22940956611330254, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22940957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678910>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70639fd0; to 'JaxprTracer' at 0x7ffa7063a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a205d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3361203173500953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.33612032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46170b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10136a70; to 'JaxprTracer' at 0x7ffc10136d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11c563d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.5280176101584594, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52801761, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50264a60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0435760; to 'JaxprTracer' at 0x7ffaf04344a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f1f5ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.6060144770645914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60601448, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0e30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4390360; to 'JaxprTracer' at 0x7ffb50488680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33b3a2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.5629872665432604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56298727, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828a10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71188da80; to 'JaxprTracer' at 0x7ff71188d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d205cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5787072926584941, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57870729, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828180>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0623e20; to 'JaxprTracer' at 0x7ffaf0623880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5be14030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.44045312204392967, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44045312, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94366e30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900996c0; to 'JaxprTracer' at 0x7ffb900989f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6468b650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.575101518968042, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57510152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9f00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4665a30; to 'JaxprTracer' at 0x7ff9f07c00e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39649750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.498286785358855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49828679, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02967c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad01dce50; to 'JaxprTracer' at 0x7ffad01dca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ff1a590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5470728540197675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54707285, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a2320>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305590d0; to 'JaxprTracer' at 0x7ffb30559c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a710af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.5758505786985414, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57585058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a070>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d26f70; to 'JaxprTracer' at 0x7ff712d24b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a05a780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.6350828032459567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6350828, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d730>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0730bd0; to 'JaxprTracer' at 0x7ffca07302c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bc775e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.612040627731228, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61204063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502642c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd78d0; to 'JaxprTracer' at 0x7ff713cd6110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7042c840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.5775305993427395, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5775306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0610>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d0ab10; to 'JaxprTracer' at 0x7ffa28308220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ca82630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5233772210592822, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52337722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f2dc0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42cbe20; to 'JaxprTracer' at 0x7ffab42c88b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf1072b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.5593363411268764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55933634, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257cc0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50228e00; to 'JaxprTracer' at 0x7ffb50228fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74b104a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5727107237714074, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57271072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160fa0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30188bd0; to 'JaxprTracer' at 0x7ffc30189c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b592850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.4264197549991949, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42641975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067a4a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70064360; to 'JaxprTracer' at 0x7ffc700674c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44171fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.5587713053394496, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55877131, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f430>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad06c1cb0; to 'JaxprTracer' at 0x7ffad06c1170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa34046c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.6325895726457211, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63258957, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6a80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e57b0; to 'JaxprTracer' at 0x7ff7139e7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x395d7bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.5481896335607621, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54818963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb06695a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02634c0; to 'JaxprTracer' at 0x7ff7c46239c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67669460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.6025479366229405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60254794, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068e250>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712832cf0; to 'JaxprTracer' at 0x7ffc704f52b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7966b870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5162325271371309, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51623253, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068b3a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05e9f80; to 'JaxprTracer' at 0x7ffc303113a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f508970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5101670791118842, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51016708, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120898f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06b2610; to 'JaxprTracer' at 0x7ffaf06b2e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a53cab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5343815868972493, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53438159, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877b920>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a438ae30; to 'JaxprTracer' at 0x7ff7a438b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x138edc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.943682386689371
77, epoch_train_loss=0.943682386689371
Epoch 78
Epoch 78 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.567863778685843, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56786378, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bac30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02d2700; to 'JaxprTracer' at 0x7ffbb02d09f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20a9bbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5104050853846954, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51040509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061b480>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025da80; to 'JaxprTracer' at 0x7ffcb025c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x125a08a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.23075478679920983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23075479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013c470>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb700c3fb0; to 'JaxprTracer' at 0x7ff7117ed580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x815068d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.34287239718568746, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3428724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5830>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4134450; to 'JaxprTracer' at 0x7ff7a4137060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5910ce70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.5401691477631947, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54016915, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679450>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca076fbf0; to 'JaxprTracer' at 0x7ffca076ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f065ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.6191785709340382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61917857, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367d10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47548b0; to 'JaxprTracer' at 0x7ffa287971f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e365f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.5758445786187111, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57584458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a7c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305d8ea0; to 'JaxprTracer' at 0x7ffb305d9530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7931e620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5911641016038082, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5911641, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829e20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50698e50; to 'JaxprTracer' at 0x7ffb50699ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8dd1ef10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.441314249971459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44131425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b2cf0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f852b0; to 'JaxprTracer' at 0x7ff712f84ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ee282d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.589511927952706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58951193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bc40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b21850; to 'JaxprTracer' at 0x7ff711b229d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ddde790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5081781903216094, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50817819, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b9d80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0287f60; to 'JaxprTracer' at 0x7ffad0287f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a321300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5585073745194619, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55850737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061ad20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02f21b0; to 'JaxprTracer' at 0x7ffbb02f0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e6c9140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.5895354681388668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58953547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013e220>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ed9940; to 'JaxprTracer' at 0x7ff713edb470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20919cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.6474252827674207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64742528, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678d90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a411e930; to 'JaxprTracer' at 0x7ff7a411c090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f11fe50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.626214671104658, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62621467, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067be80>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285cfba0; to 'JaxprTracer' at 0x7ffb285ccf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f44ab00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.5919520857474966, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59195209, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407920>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb030fc90; to 'JaxprTracer' at 0x7ffa287c9d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3553bc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5322905680994846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53229057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295b00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf046da80; to 'JaxprTracer' at 0x7ffaf046f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf3cf10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.5728889330265559, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57288893, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0bb0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7045f150; to 'JaxprTracer' at 0x7ffc7045c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12fca790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5823134249664632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58231342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a800>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141c4950; to 'JaxprTracer' at 0x7ff7141c6d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51846120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.4300554770280123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43005548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50264c30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03bf010; to 'JaxprTracer' at 0x7ffaf03bf100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0ce8e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.5716374580550563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57163746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4617110>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40729620; to 'JaxprTracer' at 0x7ffa40728e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa633ef60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.6447436975187207, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6447437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0535070>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f04075b0; to 'JaxprTracer' at 0x7ff9f0407c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50644570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.554273655322015, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55427366, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050ea70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41c3290; to 'JaxprTracer' at 0x7ffcf41c0fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x493e3f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.6154425998236466, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6154426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678980>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4393ba0; to 'JaxprTracer' at 0x7ff7a43936a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f0d10e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5210860312457093, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52108603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507126d0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40749760; to 'JaxprTracer' at 0x7ffa4074ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17478140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5164093893874565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51640939, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a1320>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4564bd0; to 'JaxprTracer' at 0x7ff9d05e8720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66067bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5386792840176329, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53867928, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bb180>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42d0450; to 'JaxprTracer' at 0x7ffab42d0950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f0afab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.915938266075347
78, epoch_train_loss=0.915938266075347
Epoch 79
Epoch 79 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.5827887056282433, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58278871, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120886b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302dad40; to 'JaxprTracer' at 0x7ffc302d9b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4a11880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5217071012545951, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5217071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb140>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285a31f0; to 'JaxprTracer' at 0x7ffb285a1710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84cec180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.23211342689001527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23211343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427ede0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280cc450; to 'JaxprTracer' at 0x7ffb280cc3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91f592e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3505156397382388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35051564, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536b40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30712bb0; to 'JaxprTracer' at 0x7ffc30712c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cead380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.5513289497603809, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55132895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266840>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa282fa930; to 'JaxprTracer' at 0x7ffa282fa610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd7b4000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.6336746043235356, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6336746, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0bd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711a82980; to 'JaxprTracer' at 0x7ff711a82250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7374ff70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.5900552731048048, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59005527, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828f40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad075d9e0; to 'JaxprTracer' at 0x7ffad075e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cfbbcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.605811683707565, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60581168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828880>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40783510; to 'JaxprTracer' at 0x7ffa407822a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f9d0e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4429152484755158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44291525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704052a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c372200; to 'JaxprTracer' at 0x7ff9d060fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43778d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.6001172367728825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60011724, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255740>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41f5d00; to 'JaxprTracer' at 0x7ff7a41f6a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c8c3230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5155886176545526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51558862, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712089270>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0454900; to 'JaxprTracer' at 0x7ffad0457c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22a82990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5686833375586617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56868334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9360>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0519670; to 'JaxprTracer' at 0x7ffbf008d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb8981b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.5983569268269374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59835693, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f620>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c605530; to 'JaxprTracer' at 0x7ff70c605940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39e80c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.6598866697982733, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65988667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013c120>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10110220; to 'JaxprTracer' at 0x7ffc10112930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x426b7700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.635679327307047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63567933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266f70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9412bd30; to 'JaxprTracer' at 0x7ffa9412a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa39ede70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6020804004402349, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6020804, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4860>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10090590; to 'JaxprTracer' at 0x7ffc10093330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87273bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5419384671060973, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54193847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b44a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127994e0; to 'JaxprTracer' at 0x7ff712798a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x124b1f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.5836977911550587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58369779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367140>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2833aa20; to 'JaxprTracer' at 0x7ffb2833b4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2382c8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5918581587909435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59185816, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b8c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300d13f0; to 'JaxprTracer' at 0x7ffb300d2430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e8d06a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.4344743370352101, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43447434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01172e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94329760; to 'JaxprTracer' at 0x7ffa94328e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x357ed1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.5836486675890329, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58364867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5bf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702ca2f0; to 'JaxprTracer' at 0x7ffb90499350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a044580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.6564321282629886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65643213, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c660>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc706d3150; to 'JaxprTracer' at 0x7ffc706d0a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45e3a5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.5614442539467113, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56144425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0668880>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90319260; to 'JaxprTracer' at 0x7ffb9031bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25add250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.6303216278813092, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63032163, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06dabb0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa406f4e00; to 'JaxprTracer' at 0x7ffa406f48b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56e06450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5269729366518396, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52697294, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f350>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d0ae80; to 'JaxprTracer' at 0x7ff711d08310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e22f000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5244094025012415, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5244094, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755a50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4104e00; to 'JaxprTracer' at 0x7ff7c4104900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cbbb780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5450737325549617, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54507373, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8620>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa706a6200; to 'JaxprTracer' at 0x7ffa706a6160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa46d3ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.889564447988195
79, epoch_train_loss=0.889564447988195
Epoch 80
Epoch 80 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.596376661603285, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59637666, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a3760>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41c1030; to 'JaxprTracer' at 0x7ffcb0639df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54d231d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5329357906328146, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53293579, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026e120>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05191c0; to 'JaxprTracer' at 0x7ffbf05194e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3c0f9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.2327739693677477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23277397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd5760>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7009c270; to 'JaxprTracer' at 0x7ffb7009e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e405260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3563522919929883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35635229, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06dbec0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0414860; to 'JaxprTracer' at 0x7ff9d0414a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4453c400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.5619465652455445, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56194657, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050e980>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4137fb0; to 'JaxprTracer' at 0x7ff7c4755ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ec5f1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.6454192381764122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64541924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679b50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40286110; to 'JaxprTracer' at 0x7ffa40284c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf9ec620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.60257705831151, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60257706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b29e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71283d760; to 'JaxprTracer' at 0x7ff71283fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93719fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6191482535852227, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61914825, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b0860>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40528360; to 'JaxprTracer' at 0x7ffa40529f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c9bb500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4422752644011546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44227526, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b2180>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7043a890; to 'JaxprTracer' at 0x7ffa287efa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7939c790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.6092576242771746, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60925762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b890>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca067de90; to 'JaxprTracer' at 0x7ffca007b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75627020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5235988970621338, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5235989, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a07f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30310ef0; to 'JaxprTracer' at 0x7ffc30312700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d7aedc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5758297490907716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57582975, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c2e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30533c40; to 'JaxprTracer' at 0x7ffc30533f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ceeac80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6071813230992248, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60718132, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd6780>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf072c540; to 'JaxprTracer' at 0x7ffca0247f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x645c5990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.6696516635899483, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66965166, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f030>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a411e520; to 'JaxprTracer' at 0x7ff7a411dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x98129d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.6460215504971897, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64602155, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050d7e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0607c40; to 'JaxprTracer' at 0x7ffaf0607150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c9e3530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6123313730336727, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61233137, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01158a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307a9ee0; to 'JaxprTracer' at 0x7ffc307a84f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96c235e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5477015340570515, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54770153, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704062a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304bde40; to 'JaxprTracer' at 0x7ffc304bed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63cf3590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.5933593676278184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59335937, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ac800>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70339210; to 'JaxprTracer' at 0x7ffb7033bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b22d7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5985266507507522, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59852665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6230>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf40878d0; to 'JaxprTracer' at 0x7ffcf40869d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e83dff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.4382314384568129, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43823144, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502658a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504a2ca0; to 'JaxprTracer' at 0x7ffa504a3a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88271c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.5949717444083708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59497174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c2d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0364f40; to 'JaxprTracer' at 0x7ffbf010f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24c59fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.6663990767447512, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66639908, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067be20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c47d1580; to 'JaxprTracer' at 0x7ff7127d7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x172a62d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.5663754541956835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56637545, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688b10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021fba0; to 'JaxprTracer' at 0x7ffb5021e890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cd5b390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.6433794592760907, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64337946, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427faa0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04558a0; to 'JaxprTracer' at 0x7ffad0456430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5896f960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5288255015989577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5288255, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50711700>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03bef70; to 'JaxprTracer' at 0x7ffaf03bc360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x501d47d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5288716517479184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52887165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a5b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125160c0; to 'JaxprTracer' at 0x7ffbd05182c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27340730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5492475012950122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5492475, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aaa00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100aa9d0; to 'JaxprTracer' at 0x7ffc100ab240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4061c090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.8664504491367876
80, epoch_train_loss=0.8664504491367876
Epoch 81
Epoch 81 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6085043630236631, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60850436, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787a40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b9183b0; to 'JaxprTracer' at 0x7ff70b91a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53964ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5483462257881835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54834623, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029f680>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf42e44a0; to 'JaxprTracer' at 0x7ffcf42e6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4977710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.23300028392266034, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23300028, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0668f20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0733560; to 'JaxprTracer' at 0x7ffb28550900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40a04df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.360486696878861, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3604867, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50265630>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7069e390; to 'JaxprTracer' at 0x7ffc7069dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa26f0000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.5773200034094025, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57732, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b2a00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94704400; to 'JaxprTracer' at 0x7ffa947070b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8391ba80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.65831575823869, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65831576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761140>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03dd490; to 'JaxprTracer' at 0x7ffcb03df970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20759b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.614467878837915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61446788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679bc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0286b10; to 'JaxprTracer' at 0x7ffad0284950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5deb070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6315973411744192, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63159734, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067a0e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3033b3d0; to 'JaxprTracer' at 0x7ffc303394e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x657fa770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.43929895065897484, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43929895, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013f9f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307d5850; to 'JaxprTracer' at 0x7ffb2813bb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24ec1e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.6276484009240051, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6276484, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367910>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1072fc90; to 'JaxprTracer' at 0x7ffc1072c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81e6f100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5358940257083077, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53589403, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6070>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4212930; to 'JaxprTracer' at 0x7ffab4211300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36150930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5884192573514105, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58841926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029da90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4798fe0; to 'JaxprTracer' at 0x7ff7c4559c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d761bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6248948339451824, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62489483, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066a5c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47ee520; to 'JaxprTracer' at 0x7ffc502b4d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d59f950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.6837029231302054, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68370292, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877ac20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02ea980; to 'JaxprTracer' at 0x7ffbb02eb3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b1cb850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.6632293476652374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66322935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42896f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700d0b30; to 'JaxprTracer' at 0x7ffa700d3f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b834c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6302304834800236, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63023048, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407621a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c339800; to 'JaxprTracer' at 0x7ff70c33b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f448b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5557610093002073, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55576101, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160500>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0248f40; to 'JaxprTracer' at 0x7ffad02489a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20ccda70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.6095991988683904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6095992, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050fbd0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb068d120; to 'JaxprTracer' at 0x7ffcb068de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80ae0820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6079321368771126, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60793214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f2a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa947b12b0; to 'JaxprTracer' at 0x7ffa947b0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x816fd8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.4416907181923228, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44169072, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7370>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0146570; to 'JaxprTracer' at 0x7ffbd01464d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96b173b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6086973896744676, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60869739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061ab50>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00756c0; to 'JaxprTracer' at 0x7ffb706b8b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17abde20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.681086102027699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6810861, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f9f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7064be70; to 'JaxprTracer' at 0x7ffa7064bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3be6110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.569754106628689, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56975411, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0535600>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc704d6980; to 'JaxprTracer' at 0x7ffc704d4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f2ad4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.655577954768969, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65557795, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a2b10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02613a0; to 'JaxprTracer' at 0x7ffcd02631a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f9a3ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5304904227860701, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53049042, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0d30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28535bc0; to 'JaxprTracer' at 0x7ffa28537560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94940590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.533234429674815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53323443, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7000>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9035f650; to 'JaxprTracer' at 0x7ffb9035c400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7730bfb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5505984420149916, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55059844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d080>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa504209a0; to 'JaxprTracer' at 0x7ffa50420ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x773010c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.843984042379388
81, epoch_train_loss=0.843984042379388
Epoch 82
Epoch 82 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6209514000989956, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6209514, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404db0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10340ea0; to 'JaxprTracer' at 0x7ffb70122c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30aa6f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5612766137947178, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56127661, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9a40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7045c8b0; to 'JaxprTracer' at 0x7ffc7045d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a005a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.23242689384558726, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.23242689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02967e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a462cfe0; to 'JaxprTracer' at 0x7ff7a462d300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ca72d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3654078032479571, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3654078, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068abd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c62ddf0; to 'JaxprTracer' at 0x7ff70c62f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20bca7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.5898480650585805, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58984807, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463fd80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad020dfd0; to 'JaxprTracer' at 0x7ffad020e980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xffdc580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.669723643094625, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66972364, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b7360>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb076ffb0; to 'JaxprTracer' at 0x7ffb900b73d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76cbbf70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6267392573865114, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62673926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407621a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf008f240; to 'JaxprTracer' at 0x7ffbf008dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72df2f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6442377511754259, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64423775, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407617e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42c8130; to 'JaxprTracer' at 0x7ffab42cacf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x528c0850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4334145105566549, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43341451, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b8b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44fdd50; to 'JaxprTracer' at 0x7ffab44ff060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79495b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.6395600516693974, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63956005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b6d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5020dfd0; to 'JaxprTracer' at 0x7ffc5020ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2df37f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5452994420429568, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54529944, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704056f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0446f20; to 'JaxprTracer' at 0x7ffcb0445210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dc55f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5961699123653459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59616991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9af0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d060ffb0; to 'JaxprTracer' at 0x7ff9d05e92b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c763c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6356931929955627, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63569319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295940>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0388ea0; to 'JaxprTracer' at 0x7ff9d038a070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f8e6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.6935533690244374, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69355337, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd700>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04e42c0; to 'JaxprTracer' at 0x7ffad04e5ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf0db50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.6750417408378347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67504174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463cdd0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02b4770; to 'JaxprTracer' at 0x7ffcd02b4fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x330cb6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6423799277516352, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64237993, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068cf30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb066c040; to 'JaxprTracer' at 0x7ffbb066e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x265cc220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5604122275018514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56041223, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2a80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07aa7a0; to 'JaxprTracer' at 0x7ff711b0a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x908a86c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.621203601734604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6212036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b1900>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285a29d0; to 'JaxprTracer' at 0x7ffb285a3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0c67620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6133667354694299, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61336674, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266fe0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940cfab0; to 'JaxprTracer' at 0x7ffa940cd3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x719909c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.443915552688731, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44391555, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506786a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9412bd30; to 'JaxprTracer' at 0x7ffa9412a7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa42cb370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6207166686157796, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62071667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536bf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3b4d60; to 'JaxprTracer' at 0x7ffb300d3d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bbec070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.691676984536026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69167698, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427cf50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41f6160; to 'JaxprTracer' at 0x7ff7a41f5cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc138880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.5709054257883316, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57090543, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7c30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713268540; to 'JaxprTracer' at 0x7ff71326bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55cadce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.6677647909491184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66776479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46160e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e7ec0; to 'JaxprTracer' at 0x7ff711fa7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dfaf080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5285948744108673, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52859487, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757cc0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa501532e0; to 'JaxprTracer' at 0x7ffa7064ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96932110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5352398742526318, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53523987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50712770>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7117fee80; to 'JaxprTracer' at 0x7ff7117fc2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c7092b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5506311944691865, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55063119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877aef0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28626020; to 'JaxprTracer' at 0x7ffb28626160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f9489c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.8232171773818389
82, epoch_train_loss=0.8232171773818389
Epoch 83
Epoch 83 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6342604095161557, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63426041, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf01617d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00b7600; to 'JaxprTracer' at 0x7ffbf00b7470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x212c6ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5740908800568635, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57409088, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de840>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4713560; to 'JaxprTracer' at 0x7ffab4712f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x405e6390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.22950303141544065, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22950303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679de0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02d13f0; to 'JaxprTracer' at 0x7ff712a868e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ffd81e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.36986616402185585, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36986616, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289a00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c40cabb0; to 'JaxprTracer' at 0x7ff7c40ca160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x803a9d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6022883494671719, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60228835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762be0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7063bce0; to 'JaxprTracer' at 0x7ffa94707920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e614420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.681740341399028, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68174034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b6530>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0389620; to 'JaxprTracer' at 0x7ff713690c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59eab060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6389841940525218, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63898419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d8c10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713987970; to 'JaxprTracer' at 0x7ff713986930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x729b0e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6575959297514558, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65759593, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d8510>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502ec090; to 'JaxprTracer' at 0x7ffc502ee200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d2d9ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.4205195243515835, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42051952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd5280>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71187d850; to 'JaxprTracer' at 0x7ff71187c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e99c290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.651179869196263, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65117987, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050f770>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c67c810; to 'JaxprTracer' at 0x7ff70c67f470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f992600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5538201477999963, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55382015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163e00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700d49f0; to 'JaxprTracer' at 0x7ffa700d4810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7562b050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6026906159558917, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60269062, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124decf0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10159210; to 'JaxprTracer' at 0x7ffc1015ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c0b6490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6456836624495569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64568366, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067b420>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30683b00; to 'JaxprTracer' at 0x7ffc30683650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63bd39f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7035552763028877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70355528, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01155b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50207c40; to 'JaxprTracer' at 0x7ffbb02eaed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68da74a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.6862949715494969, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68629497, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a1f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd07004f0; to 'JaxprTracer' at 0x7ffbd0703ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4886fd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6539149392301346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65391494, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5df0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e5c10; to 'JaxprTracer' at 0x7ff9f07e6ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42b90150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5630654793230516, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56306548, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f840>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb046ea20; to 'JaxprTracer' at 0x7ffca047eb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x318dc640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.6322630367658101, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63226304, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f820>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71227afc0; to 'JaxprTracer' at 0x7ff7122787c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31f0c370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.617109256960952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61710926, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d3b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7009ba60; to 'JaxprTracer' at 0x7ffa7009be70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x316b5650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.44289951603454525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44289952, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b9370>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4732c00; to 'JaxprTracer' at 0x7ffab4733240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x316a77f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6321187400334718, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63211874, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba3c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb041efc0; to 'JaxprTracer' at 0x7ffcb041e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44b11ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7020527875407994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70205279, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70406580>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d17970; to 'JaxprTracer' at 0x7ff711d15d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39cedff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.568114370249176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56811437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a79c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a45cda30; to 'JaxprTracer' at 0x7ffb283a4f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x483af440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.6801401448128461, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68014014, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029d750>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71348d0d0; to 'JaxprTracer' at 0x7ff71348c180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50eb3600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.522342058141014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52234206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619ae0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0144ef0; to 'JaxprTracer' at 0x7ffbd0146e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7afacb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5341841815930434, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53418418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182aba0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71345e9d0; to 'JaxprTracer' at 0x7ff71345e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88885bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.545921375132749, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54592138, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46150d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0327380; to 'JaxprTracer' at 0x7ffbb0327a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2285aa10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.7985417648723564
83, epoch_train_loss=0.7985417648723564
Epoch 84
Epoch 84 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6470650060295883, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64706501, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2510>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f3470; to 'JaxprTracer' at 0x7ff9d05f3e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36e0f720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5850104002762186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5850104, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8a30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127d4b30; to 'JaxprTracer' at 0x7ff7127d4360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x968299c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.22250934492982782, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22250934, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea400>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704ed1c0; to 'JaxprTracer' at 0x7ffb704ee110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8804f130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.37328519616750405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3732852, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b96b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71259a4d0; to 'JaxprTracer' at 0x7ff712598a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x935b7850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6118990538264576, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61189905, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e470>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04154e0; to 'JaxprTracer' at 0x7ffad0454590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f1730f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.6938479735211044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69384797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162c10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0241ee0; to 'JaxprTracer' at 0x7ffcd0241f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b8f7a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6481293490182778, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64812935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4cd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7010aa20; to 'JaxprTracer' at 0x7ffc1050f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62cae60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6711337131334887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67113371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5140>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10134810; to 'JaxprTracer' at 0x7ffc10136e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d2b8a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.3965578404635258, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39655784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762240>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab425e6b0; to 'JaxprTracer' at 0x7ffab425c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ddeef00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.6580715434025393, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65807154, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bc40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f071f420; to 'JaxprTracer' at 0x7ff9f071c400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b456d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5586507070822324, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55865071, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2950>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4230c20; to 'JaxprTracer' at 0x7ffab4231a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15815800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6038383911913566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60383839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a9590>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010b6a0; to 'JaxprTracer' at 0x7ffbf0109c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71caf410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6502633148414593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65026331, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea770>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca04ce4d0; to 'JaxprTracer' at 0x7ffca04cff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33557dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7123009528174548, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71230095, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066b220>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04e6750; to 'JaxprTracer' at 0x7ffad04e6f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38b55ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.6926762559294133, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69267626, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c5d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713506890; to 'JaxprTracer' at 0x7ff7122c4ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24904500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6605193608269607, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66051936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688970>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01918f0; to 'JaxprTracer' at 0x7ff9d0192020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95f24e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5598951473940216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55989515, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d350>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70688a90; to 'JaxprTracer' at 0x7ffb504e7e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2123ff20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.6389531922135782, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63895319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40760360>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0360e50; to 'JaxprTracer' at 0x7ffc7068bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58a4b7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.616741153299118, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61674115, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428be60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4623150; to 'JaxprTracer' at 0x7ff7c46218a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7909dcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.43674313800667436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43674314, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502671a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f074dfd0; to 'JaxprTracer' at 0x7ff9f074c400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88858db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6397948100270124, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63979481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6770>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f1bce0; to 'JaxprTracer' at 0x7ff712b4c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3cb1510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7098723695796505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70987237, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427e040>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0367a60; to 'JaxprTracer' at 0x7ff712ad9170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x508f6e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.5577945041006919, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5577945, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b8630>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c12bc40; to 'JaxprTracer' at 0x7ff70c12bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa55b7ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.6895526485405584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68955265, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786610>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900ee700; to 'JaxprTracer' at 0x7ffb900ed030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ca28ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.5074247012568438, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5074247, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a4680>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa407487c0; to 'JaxprTracer' at 0x7ffa4074a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ca182b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5267319902004339, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52673199, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754d30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ca31a0; to 'JaxprTracer' at 0x7ff712ca12b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x649b32d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.5324555405262072, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53245554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0114cc0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134dc360; to 'JaxprTracer' at 0x7ff7134dc4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fb4f0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.7662211395359432
84, epoch_train_loss=0.7662211395359432
Epoch 85
Epoch 85 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6467638945034877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64676389, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463ee40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9049a390; to 'JaxprTracer' at 0x7ffb9049b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71932d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5866670536308819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58666705, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e92f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700d34c0; to 'JaxprTracer' at 0x7ffa700d3bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92ea6790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.21048877247582448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.21048877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50264d70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7063ac00; to 'JaxprTracer' at 0x7ffc7063bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1798e9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.37503913379949555, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37503913, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b1920>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f039a160; to 'JaxprTracer' at 0x7ff9f039bdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30b5a090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6135404616875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61354046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4ec0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711a83bf0; to 'JaxprTracer' at 0x7ff711a81080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x449e67a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.6813500179645593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68135002, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162450>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50738310; to 'JaxprTracer' at 0x7ffa5073a890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d83fdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6448021071938977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64480211, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02952e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122adf30; to 'JaxprTracer' at 0x7ff7122af3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2260c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6710226433496639, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67102264, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0296770>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf43a6610; to 'JaxprTracer' at 0x7ffcf43a65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dda70e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.3597574835998925, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.35975748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704042c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4056df30; to 'JaxprTracer' at 0x7ff712f85080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f6c9f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.654813056830849, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65481306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016eb20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a446f2e0; to 'JaxprTracer' at 0x7ff7a446cb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44a7ed00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5567447021190312, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5567447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f080>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0794d10; to 'JaxprTracer' at 0x7ff9f0795da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63d324a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5914712746259231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59147127, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9fb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca07c6700; to 'JaxprTracer' at 0x7ffca07c5800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x407b0ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6444555170320952, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64445552, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502675e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0482340; to 'JaxprTracer' at 0x7ffad0482200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5113960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.6871513514016969, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68715135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d280>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0a5fd0; to 'JaxprTracer' at 0x7ff70c0a58a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f4b3dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.6888834061981561, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68888341, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50713330>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07425c0; to 'JaxprTracer' at 0x7ffad0741710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59e6a080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6593257049353998, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6593257, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161b40>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0759a80; to 'JaxprTracer' at 0x7ffbf075b100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77048f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5413181777455062, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54131818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d930>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0ca070; to 'JaxprTracer' at 0x7ff70c0c9990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8362360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.6356984551890968, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63569846, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b8f10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702be160; to 'JaxprTracer' at 0x7ffc702bcdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fb5dce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5889898041215319, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5889898, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537700>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb065f2e0; to 'JaxprTracer' at 0x7ffcb065cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbc7c720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.42248962874226786, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42248963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029d1c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d066e160; to 'JaxprTracer' at 0x7ffbf072ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ec63080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.633256988869013, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63325699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a95d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb00ff420; to 'JaxprTracer' at 0x7ffbb00fcf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6e04030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.6866441797250878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68664418, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1b80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f0ea0; to 'JaxprTracer' at 0x7ff711d5a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25584f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.5287782988935185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5287783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208ab80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0190770; to 'JaxprTracer' at 0x7ffb28553830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17aa1e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.6840675951930961, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6840676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068ef70>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00741d0; to 'JaxprTracer' at 0x7ffbf0076390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a3b52f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.47443480646936775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47443481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b95a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30526390; to 'JaxprTracer' at 0x7ffb30526d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f26390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.5041325750300023, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50413258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0669ac0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ce5a30; to 'JaxprTracer' at 0x7ff713ce5d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ccca190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.502097780328121, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50209778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786190>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4222160; to 'JaxprTracer' at 0x7ffab4222610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24747500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.7632352516847312
85, epoch_train_loss=0.7632352516847312
Epoch 86
Epoch 86 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6686375803260299, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66863758, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d190>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c46220c0; to 'JaxprTracer' at 0x7ff7c4620db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e5d200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6102199090163527, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61021991, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877b640>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d17ec0; to 'JaxprTracer' at 0x7ff711d16980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70860a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.19797638523360836, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19797639, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068cf50>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7045c130; to 'JaxprTracer' at 0x7ffc7045dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b2622d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3739075146945604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37390751, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c800>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304bf510; to 'JaxprTracer' at 0x7ffc304bec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4911db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6357635468672639, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63576355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0535500>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0457fb0; to 'JaxprTracer' at 0x7ffad0457ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e3c6040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7071703844163134, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70717038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294c60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5045f290; to 'JaxprTracer' at 0x7ffc5045f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd795e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6667770635708767, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66677706, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06db7b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a441d6c0; to 'JaxprTracer' at 0x7ff7a441dda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39f808e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6910762137969138, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69107621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d88b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c7e3e0; to 'JaxprTracer' at 0x7ff713c7d8a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x187a5310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.32142521742930746, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.32142522, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50713f50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab425c130; to 'JaxprTracer' at 0x7ffab425dc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97f32360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.6756582726455851, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67565827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98baf0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71188fd30; to 'JaxprTracer' at 0x7ff71188cd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83c41da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5693073786846274, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.56930738, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013e790>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141c73d0; to 'JaxprTracer' at 0x7ff7141c5850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x505db760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6009498758852014, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60094988, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779030>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4083790; to 'JaxprTracer' at 0x7ffcf4083830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fbbb130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6623678351366612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66236784, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068c8c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713693560; to 'JaxprTracer' at 0x7ff713691440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf2f4a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.715879219553586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71587922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb090>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04e5530; to 'JaxprTracer' at 0x7ffad04e5490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f4fa840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7085936012856233, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7085936, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05379a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287cbd30; to 'JaxprTracer' at 0x7ffcd07e7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x968166d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6789504670503366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67895047, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a1550>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9035f880; to 'JaxprTracer' at 0x7ffa7063a070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8be22780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5420106486966919, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54201065, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162c30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28551c60; to 'JaxprTracer' at 0x7ffb28550310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5508c5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.6548178029283045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6548178, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762670>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0761030; to 'JaxprTracer' at 0x7ffbd0763380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c3730a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5991779688982591, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59917797, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b8e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506655d0; to 'JaxprTracer' at 0x7ffc506666b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa521d850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.41050406314192067, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41050406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a730>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0399710; to 'JaxprTracer' at 0x7ffbb03992b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45b71e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6550843885233405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65508439, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb502647b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf06e1620; to 'JaxprTracer' at 0x7ffbf06e1260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99787a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7156132901389813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71561329, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679a60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd0240950; to 'JaxprTracer' at 0x7ffcd0241580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1cffa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.5175623429496026, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51756234, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2ac0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70587830; to 'JaxprTracer' at 0x7ffb705840e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b159220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7068623485111541, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70686235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e97e0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127d4860; to 'JaxprTracer' at 0x7ffbb00fd170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x927d6d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.4538029672492645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45380297, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702afe50>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0077510; to 'JaxprTracer' at 0x7ffbf0074310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77105ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.49483126134603717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49483126, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182b6c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00a4b30; to 'JaxprTracer' at 0x7ff9f00a6110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28a8f7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.48542124929443164, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48542125, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4290>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf007e520; to 'JaxprTracer' at 0x7ffbf007fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x691636c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.7092248004596686
86, epoch_train_loss=0.7092248004596686
Epoch 87
Epoch 87 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6771284470807806, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67712845, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e210>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f00fe4d0; to 'JaxprTracer' at 0x7ff9f00fe200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x264b08a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6230922950858394, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6230923, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d260>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa285344f0; to 'JaxprTracer' at 0x7ffa28537560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x137b4b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1796249010077337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1796249, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067bd10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f19d00; to 'JaxprTracer' at 0x7ff712f186d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22a1d030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3732073006552788, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3732073, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288250>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40220f40; to 'JaxprTracer' at 0x7ffa402234c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35096e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6485308292633435, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64853083, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40763260>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285ce1b0; to 'JaxprTracer' at 0x7ffb285cf3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e430bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7098224235491043, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70982242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd6680>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135051c0; to 'JaxprTracer' at 0x7ff713505a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e2a14c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6745426060938235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67454261, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70404c80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01df970; to 'JaxprTracer' at 0x7ff9d01dc4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6481f350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.698568806594383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69856881, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536d30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c67d9e0; to 'JaxprTracer' at 0x7ff70c67e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4de6e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.2784902526501235, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27849025, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029ecd0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287ee2f0; to 'JaxprTracer' at 0x7ffa287efe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x185a1ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.685980326585489, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68598033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0115090>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021e480; to 'JaxprTracer' at 0x7ffb5021ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e4f4880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5751362121921001, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.57513621, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015d0f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132787c0; to 'JaxprTracer' at 0x7ff71327aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d949a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5991010251285404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59910103, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c260>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0698b80; to 'JaxprTracer' at 0x7ffc30681b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e5f5550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6701560156580284, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67015602, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678b00>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124feb10; to 'JaxprTracer' at 0x7ff7124ff420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ce583f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7126473139221045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71264731, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013dae0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122b3240; to 'JaxprTracer' at 0x7ff7122b0e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d725f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7167324177295825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71673242, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507117d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2857c770; to 'JaxprTracer' at 0x7ffa2857f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cbf4510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.6901510240541606, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69015102, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d81f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5020b600; to 'JaxprTracer' at 0x7ffb50209120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47e96e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5316795929792612, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53167959, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407420>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07c1f30; to 'JaxprTracer' at 0x7ff9f07c1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31de6b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.6638191409717045, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66381914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eb6c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc700b04a0; to 'JaxprTracer' at 0x7ffc700b0540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d31c3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5857061895951585, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58570619, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1220>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141e4e00; to 'JaxprTracer' at 0x7ff9f07b8ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x610673f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.39405033505633347, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39405034, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bbea0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d58130; to 'JaxprTracer' at 0x7ff711d5a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bb64390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6606234182230988, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66062342, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dd4b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42ef650; to 'JaxprTracer' at 0x7ffab42efd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63132b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7143862752505147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71438628, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877ab70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa284ff6f0; to 'JaxprTracer' at 0x7ffa284ff420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3de85b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4947746259441592, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.49477463, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208bd70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303138d0; to 'JaxprTracer' at 0x7ffc30312d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x680d6480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7141975837449185, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71419758, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4614780>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10722ac0; to 'JaxprTracer' at 0x7ffc10722f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x680ae450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.42280933326232545, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42280933, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94366bc0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70587100; to 'JaxprTracer' at 0x7ffb70585490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x591692f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.47638640222959944, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4763864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a9540>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10159300; to 'JaxprTracer' at 0x7ff712fbf9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85cd06d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.45954205889243965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45954206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f2c90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47410d0; to 'JaxprTracer' at 0x7ffab4741210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42d69e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.6966038314327592
87, epoch_train_loss=0.6966038314327592
Epoch 88
Epoch 88 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.6896639678058918, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68966397, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160a50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132676f0; to 'JaxprTracer' at 0x7ffbd00daf20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57fbb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6351360475606382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63513605, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616f50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca067ffb0; to 'JaxprTracer' at 0x7ffca067ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72d90780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.16071288591477342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16071289, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779a00>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01540e0; to 'JaxprTracer' at 0x7ffad02498a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13275d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.37627876500412216, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37627877, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255980>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0367790; to 'JaxprTracer' at 0x7ff9f0365210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x21402a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6608152072637176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66081521, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029dbd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0455cb0; to 'JaxprTracer' at 0x7ffad0457c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4078a510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7198682684772874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71986827, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7c90>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10749710; to 'JaxprTracer' at 0x7ffc10749800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5980ee80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.6849386411694867, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68493864, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762e10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c33a750; to 'JaxprTracer' at 0x7ff70c339490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34257d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7119349686285648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71193497, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40762200>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700d40e0; to 'JaxprTracer' at 0x7ffa700d55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36942800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.2442045475751267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.24420455, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b790>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab429eed0; to 'JaxprTracer' at 0x7ffab429c810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70516cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.6965938493226301, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69659385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bc40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712a864d0; to 'JaxprTracer' at 0x7ff712a84770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49ac14a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5836663462715199, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58366635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160e90>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ad95d0; to 'JaxprTracer' at 0x7ff712adb380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55519b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6000264869945412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60002649, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4614aa0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02f0720; to 'JaxprTracer' at 0x7ffbb02f2250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8583a2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6800666401819745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68006664, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877b0c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711a80590; to 'JaxprTracer' at 0x7ff711a813f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c3cdef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.718285602881403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7182856, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c360>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307cd120; to 'JaxprTracer' at 0x7ffb307cce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45dcabf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7272239250491033, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72722393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029f410>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f039ab10; to 'JaxprTracer' at 0x7ff9f0399710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42ce2920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7035198602260149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70351986, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405520>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41a6930; to 'JaxprTracer' at 0x7ffcf41a43b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fd7ee00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5261980567126681, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52619806, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754460>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9432a890; to 'JaxprTracer' at 0x7ffa9432b240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50365840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.674336168981937, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67433617, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50713120>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf40acfe0; to 'JaxprTracer' at 0x7ffa945b66b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f2d7330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5804878957437273, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5804879, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088200>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41c3fb0; to 'JaxprTracer' at 0x7ff71348ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3df5b920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.38436395442855087, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38436395, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067b470>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06a22a0; to 'JaxprTracer' at 0x7ffaf06a29d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x856b0860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6682732365351716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66827324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb0b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ca1990; to 'JaxprTracer' at 0x7ff712ca2390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x575f06d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7210308858592706, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72103089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015dbc0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122b2fc0; to 'JaxprTracer' at 0x7ffc30683790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73cd6e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.479842211402985, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47984221, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068da10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10182f70; to 'JaxprTracer' at 0x7ffc10181ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ef5b1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.72464168307049, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72464168, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70618f40>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab42ee840; to 'JaxprTracer' at 0x7ff711d586d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c4556a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.40140514748882156, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40140515, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066ac00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca007b600; to 'JaxprTracer' at 0x7ffbb02d22a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3151e8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.46550081184090875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46550081, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a0320>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa287cb9c0; to 'JaxprTracer' at 0x7ffa287ca160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8144e030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.44195294630595366, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44195295, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267b90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124cd760; to 'JaxprTracer' at 0x7ffc1046e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f0af470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.684347365097978
88, epoch_train_loss=0.684347365097978
Epoch 89
Epoch 89 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.706525529090793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70652553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b7130>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca030ba10; to 'JaxprTracer' at 0x7ffcd0432de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15dd1370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6476623487310149, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64766235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688870>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706bbd30; to 'JaxprTracer' at 0x7ffb706ba9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f7c8090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1464967340613448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14649673, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026fa80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca02d87c0; to 'JaxprTracer' at 0x7ff9d066f420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45bc290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.3837925827517652, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38379258, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679fc0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca049a660; to 'JaxprTracer' at 0x7ffca049bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bad5930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6746074433916639, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.67460744, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288240>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07e4c70; to 'JaxprTracer' at 0x7ffcd07e6ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ccca310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7367382334385875, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73673823, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828280>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03ddb20; to 'JaxprTracer' at 0x7ffcb03deb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72a98810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7010686844934407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70106868, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd7080>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71345c720; to 'JaxprTracer' at 0x7ff71345df30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e70f450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7299467458477722, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72994675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd5420>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2829fa60; to 'JaxprTracer' at 0x7ffa2829e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4913b580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.2234954228973541, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.22349542, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b2ae0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca06cfec0; to 'JaxprTracer' at 0x7ffca06cd170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x403dfb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7103243832685906, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71032438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eb670>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30783e20; to 'JaxprTracer' at 0x7ffb30782f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9317b650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.5977052310524539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59770523, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0297430>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf417bd80; to 'JaxprTracer' at 0x7ffcf417bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x938a89a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.606845085485073, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60684509, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689dd0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4559490; to 'JaxprTracer' at 0x7ff7c455be70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cd62f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.6961876796461047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69618768, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026fd40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94361760; to 'JaxprTracer' at 0x7ffa94363060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x259d0ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7326519122282362, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73265191, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160a40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb046c2c0; to 'JaxprTracer' at 0x7ffcb046c6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fc2c4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7442608239325723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74426082, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427cb20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa404f5b20; to 'JaxprTracer' at 0x7ffa404f4310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ed710c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7221479120396275, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72214791, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829c00>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10341080; to 'JaxprTracer' at 0x7ffc103427f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x265b3890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5281122662064224, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52811227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d84c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125141d0; to 'JaxprTracer' at 0x7ff712516e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a0a2cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.689280982617987, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68928098, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029f000>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03bcc20; to 'JaxprTracer' at 0x7ffca005df30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x581489e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5852757243805448, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.58527572, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bb030>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca067d580; to 'JaxprTracer' at 0x7ffca067d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4eda85d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.3827333882855129, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38273339, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d190>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50664360; to 'JaxprTracer' at 0x7ffaf0605b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47fb3bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6813611929255723, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68136119, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28779ef0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0146160; to 'JaxprTracer' at 0x7ffbd01459e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92e3ba10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7366105283347901, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73661053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6f70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501f3330; to 'JaxprTracer' at 0x7ffb501f30b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31fcf7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4756815894722989, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47568159, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f7d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50153510; to 'JaxprTracer' at 0x7ffa50152de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x321df6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7411255896796405, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74112559, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160ad0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7015a340; to 'JaxprTracer' at 0x7ffb70158130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d155c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.39319951198402386, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39319951, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bbf90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900b4cc0; to 'JaxprTracer' at 0x7ffb900b4950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c1e1600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.4630305062701559, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46303051, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94367900>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02438d0; to 'JaxprTracer' at 0x7ffca0733060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x425e89f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.43601603370896874, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43601603, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df6c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4276a20; to 'JaxprTracer' at 0x7ffab4277d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28f6e830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.673833529835796
89, epoch_train_loss=0.673833529835796
Epoch 90
Epoch 90 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7254016470756012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72540165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755130>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141cf3d0; to 'JaxprTracer' at 0x7ff7141ccef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76e6c820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6598499842122582, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65984998, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4fa0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03608b0; to 'JaxprTracer' at 0x7ffbb0360680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b2815d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.13636242947833044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13636243, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050dff0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1050eca0; to 'JaxprTracer' at 0x7ffc1050ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97998c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.39327043277446666, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39327043, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6710>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28550db0; to 'JaxprTracer' at 0x7ffb28550270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42d4aaa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.6885840871455384, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68858409, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068dc20>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb063aed0; to 'JaxprTracer' at 0x7ffcb063b290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66071c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.755052710693497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75505271, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1c00>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02e89a0; to 'JaxprTracer' at 0x7ffbb02e8590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c078530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7189668663228546, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71896687, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd5bd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c41072e0; to 'JaxprTracer' at 0x7ffc502b46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7af30c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7489893479684983, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74898935, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd62a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c33b6f0; to 'JaxprTracer' at 0x7ff70c339d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa130f310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.2079881774276039, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.20798818, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42885d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106f26b0; to 'JaxprTracer' at 0x7ffc106f3650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc38edd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7250495360932133, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72504954, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b650>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0128360; to 'JaxprTracer' at 0x7ffbb01298f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50254930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6141640576756792, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61416406, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755ab0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2829fdd0; to 'JaxprTracer' at 0x7ffa2829ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x274de050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.61547207529716, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61547208, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5940>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd034de40; to 'JaxprTracer' at 0x7ffbd034f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97220d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7145866899242234, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71458669, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050da70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7136911c0; to 'JaxprTracer' at 0x7ff713690c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x456e3550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7497423867149452, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74974239, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc106798f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1012bfb0; to 'JaxprTracer' at 0x7ffc10129800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bce2c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7645121432014584, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76451214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068c090>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7069c8b0; to 'JaxprTracer' at 0x7ffa7063bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d346df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.740970891952923, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74097089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141bafb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10285620; to 'JaxprTracer' at 0x7ffc10284130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9016d650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5319588722092288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53195887, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02952d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05c18f0; to 'JaxprTracer' at 0x7ff9d05c2020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72ff4c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7056176247486946, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70561762, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7118284a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50189b70; to 'JaxprTracer' at 0x7ffa5018a3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4314a630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5932222672637631, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.59322227, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427dfc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70758b30; to 'JaxprTracer' at 0x7ffb7075b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f494390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.3849107882547459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38491079, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506781a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9028d3f0; to 'JaxprTracer' at 0x7ffb9028e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c2d4db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.6968943781222903, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69689438, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c340>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9408d120; to 'JaxprTracer' at 0x7ff712cda750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x869fa310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7552032758490639, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75520328, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026d2e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3b6a20; to 'JaxprTracer' at 0x7ff70c3b62a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a5eeb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.47546462210986895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47546462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0785bb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3033a070; to 'JaxprTracer' at 0x7ffc30339760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ee9cd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7606882142209587, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76068821, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702aff60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc702bfb00; to 'JaxprTracer' at 0x7ffc702bffb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15c3c1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.38889736774591643, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38889737, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8390>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47bb600; to 'JaxprTracer' at 0x7ffab47bb7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x934814c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.4626118564802886, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46261186, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619930>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70338b80; to 'JaxprTracer' at 0x7ffb7033a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39c21c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.433812396844725, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4338124, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50710b10>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f01548b0; to 'JaxprTracer' at 0x7ff9f01550d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39c120c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.6693399543645523
90, epoch_train_loss=0.6693399543645523
Epoch 91
Epoch 91 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7422374547334029, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74223745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365ee0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71353c040; to 'JaxprTracer' at 0x7ff71353d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73240bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6704672044649993, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6704672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689040>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10112250; to 'JaxprTracer' at 0x7ffc7045dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d3f3260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.12804665399857637, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12804665, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463cbc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9408d940; to 'JaxprTracer' at 0x7ffa9408de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a4ce570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.4021801123012753, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40218011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a700>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307ab470; to 'JaxprTracer' at 0x7ffc307ab5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x367a1de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7007868879070404, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70078689, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a2590>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5069dcb0; to 'JaxprTracer' at 0x7ffc5069c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4370fe10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.77020725185856, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77020725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05342f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712044090; to 'JaxprTracer' at 0x7ff712047470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69e486f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7346311021728887, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7346311, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fa30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb065c090; to 'JaxprTracer' at 0x7ffcb065d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eb257b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7649584745406668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76495847, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068f650>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01dc220; to 'JaxprTracer' at 0x7ff9d01decf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23333be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.19263817121457755, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.19263817, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161cd0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4665a80; to 'JaxprTracer' at 0x7ff7a46658a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79d52bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7379445048048459, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7379445, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c110>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1072ce50; to 'JaxprTracer' at 0x7ffc1072cd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f16e210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6295625114011569, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62956251, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943677e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b53060; to 'JaxprTracer' at 0x7ff711b53290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa421f960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6228129159318221, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62281292, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688fa0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07c01d0; to 'JaxprTracer' at 0x7ffcd07c16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24a5e750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7300663481897762, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73006635, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463f2b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94360810; to 'JaxprTracer' at 0x7ffa94360a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4089d1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7642351765088307, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76423518, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016ec90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302f9530; to 'JaxprTracer' at 0x7ffb302fa8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c31be00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7828592709235342, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78285927, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828b20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f05b4680; to 'JaxprTracer' at 0x7ff9f05b7a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20d85300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7558452957764531, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7558453, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0537380>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a4136660; to 'JaxprTracer' at 0x7ff7a4135620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39838020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5348489058862764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53484891, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0257f20>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41c1cb0; to 'JaxprTracer' at 0x7ff7a41c3600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e7558d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7196355749217123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71963557, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a6470>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cd7790; to 'JaxprTracer' at 0x7ff713cd6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9faee500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.5994485973467422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5994486, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050ed50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07aeed0; to 'JaxprTracer' at 0x7ffcb07aede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d6fde00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.38666742647638186, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38666743, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307eb660>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0093650; to 'JaxprTracer' at 0x7ff9f0090b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29148980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7110589565245939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71105896, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46171d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03e5530; to 'JaxprTracer' at 0x7ffaf03e44f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2d6c870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7713747494640507, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77137475, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5490>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712cfe2a0; to 'JaxprTracer' at 0x7ff712cff330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6311f8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.47454231793682866, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47454232, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f390>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30559440; to 'JaxprTracer' at 0x7ffb3055a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b5e2320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7779601299466962, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77796013, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016c5d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0435490; to 'JaxprTracer' at 0x7ffaf0437740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b5b9e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.38413594676966084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38413595, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70407ce0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713d13240; to 'JaxprTracer' at 0x7ff9d067ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70d37200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.46155054993694855, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46155055, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066ab30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712517650; to 'JaxprTracer' at 0x7ff713eb0810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cf917d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.43077315751234857, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43077316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015e6e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c632ac0; to 'JaxprTracer' at 0x7ff70c632f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8582cf90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.6723334322377829
91, epoch_train_loss=0.6723334322377829
Epoch 92
Epoch 92 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.753600661622052, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75360066, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061ab00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7128051c0; to 'JaxprTracer' at 0x7ff712805c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d659c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6780448973252916, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6780449, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aa270>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0723970; to 'JaxprTracer' at 0x7ffcb07230b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33ea53e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.12061744989715477, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12061745, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405c20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713266de0; to 'JaxprTracer' at 0x7ffaf06b2ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e9d07b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.4084399582414089, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40843996, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f0aa0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf01984f0; to 'JaxprTracer' at 0x7ffaf0199cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40b268d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7094633528237895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70946335, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca07542a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06389f0; to 'JaxprTracer' at 0x7ffcb06386d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x602c2680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7808606269535813, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78086063, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c150>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cccdb0; to 'JaxprTracer' at 0x7ff713ccdad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b9cfcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7464561076019863, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74645611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068f4d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7068aa70; to 'JaxprTracer' at 0x7ffc70688220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54764e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7754173941155179, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77541739, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068d270>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c605350; to 'JaxprTracer' at 0x7ff70c607790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x974ba5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.17689572653782193, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.17689573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd4760>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70418fe0; to 'JaxprTracer' at 0x7ffcf43a7ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x348fc430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.746953938223885, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74695394, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b6d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902a15d0; to 'JaxprTracer' at 0x7ffb902a00e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d11dd90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6407091643640012, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64070916, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061ad80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f87290; to 'JaxprTracer' at 0x7ff712f87fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d8b5270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6270091729144351, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62700917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8fe0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fbee80; to 'JaxprTracer' at 0x7ff712fbd8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58efec80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.740223884500174, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74022388, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704068f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d4e00; to 'JaxprTracer' at 0x7ffb302d7dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e6045a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.774421600783177, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7744216, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463fdc0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70286ca0; to 'JaxprTracer' at 0x7ffc70285710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f87fc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.7962004987890795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7962005, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757300>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70286430; to 'JaxprTracer' at 0x7ff711a80540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e3825a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.765743226270289, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76574323, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0787860>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa40220810; to 'JaxprTracer' at 0x7ffa40220360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ef81720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5351092243250044, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53510922, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013ca40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c41042c0; to 'JaxprTracer' at 0x7ff7c4107b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7edbfbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7292701134024011, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72927011, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536a60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0518180; to 'JaxprTracer' at 0x7ffbd05198a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6943cfc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6026059381853024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60260594, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4289940>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06f2020; to 'JaxprTracer' at 0x7ffaf06f2200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7eeeb3f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.38596308938811336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38596309, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a8d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02609f0; to 'JaxprTracer' at 0x7ffcd0261ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15eaa9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7214562018552627, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7214562, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208a8a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c66aa20; to 'JaxprTracer' at 0x7ff70c66bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e7d26b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7830332396053757, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78303324, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427e830>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa700d7d30; to 'JaxprTracer' at 0x7ffcf4149440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3378fd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4707015179943784, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47070152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016f7d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9409bce0; to 'JaxprTracer' at 0x7ffa9409abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4960b990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7899353253736672, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78993533, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c060>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45871f0; to 'JaxprTracer' at 0x7ff7c4585fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66fdad30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3774345750156604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37743458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94366dc0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd070f330; to 'JaxprTracer' at 0x7ffbd070e430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x437127f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.45830887956394173, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45830888, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b2880>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5026ffb0; to 'JaxprTracer' at 0x7ffb5026dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88e38230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.4253271648356127, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42532716, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d8b20>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fa6700; to 'JaxprTracer' at 0x7ff712fa7e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44e47930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.6777555132124082
92, epoch_train_loss=0.6777555132124082
Epoch 93
Epoch 93 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.759194721411281, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75919472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0254ff0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf03e6930; to 'JaxprTracer' at 0x7ffaf03e5170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a6dc530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6819242705045603, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68192427, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b300>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02c9c60; to 'JaxprTracer' at 0x7ffbb02ca6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86ec2400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.11495530049592581, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1149553, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506781e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71250cb80; to 'JaxprTracer' at 0x7ff71250fbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e42fe00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.41262646701284184, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41262647, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a32b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712771260; to 'JaxprTracer' at 0x7ff7127735b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d5d0bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7139927592810926, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71399276, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05378d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a446bc90; to 'JaxprTracer' at 0x7ff7a4468b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e592630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7867432248452851, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78674322, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163c50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30533740; to 'JaxprTracer' at 0x7ffb30530450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a4fc5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7536178804270965, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75361788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0755f30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa284fde40; to 'JaxprTracer' at 0x7ffa284ff9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22fbefc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.780549172859172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78054917, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757530>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7124fce00; to 'JaxprTracer' at 0x7ff7124ff380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfe5edc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.16248835304543574, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16248835, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287796c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc307d4040; to 'JaxprTracer' at 0x7ffc307d5670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x729fb4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.751507481637194, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75150748, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a7ef0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141d94e0; to 'JaxprTracer' at 0x7ff7141dbf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x321f9c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6470057518303757, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64700575, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0254b30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50206890; to 'JaxprTracer' at 0x7ffa50206d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b905180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6279505362695641, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62795054, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1067b990>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285b84f0; to 'JaxprTracer' at 0x7ffb285bab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b57d920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7452133426588878, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74521334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067a250>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f01364d0; to 'JaxprTracer' at 0x7ff713cce390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x960377d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7799703801685123, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77997038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761b40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302fbd30; to 'JaxprTracer' at 0x7ffb302f9800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39fd3cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(

14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.804074811242563, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80407481, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536e30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5028b470; to 'JaxprTracer' at 0x7ffbd00db010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3620f4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7708431931444388, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77084319, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068ebf0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30339800; to 'JaxprTracer' at 0x7ffc30338540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x750be340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5329661128324815, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53296611, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e8500>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c7e8e0; to 'JaxprTracer' at 0x7ff713c7d440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x85d2d210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7342378827294467, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73423788, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f29b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2829cc20; to 'JaxprTracer' at 0x7ffaf06b0450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa37c3020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.602844531887297, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60284453, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704058a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3075ccc0; to 'JaxprTracer' at 0x7ffb3075dd00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55ffdf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.38389478982349357, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38389479, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b5b10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0402520; to 'JaxprTracer' at 0x7ffaf0402fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53730b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7277441912882688, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72774419, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ad9b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50509030; to 'JaxprTracer' at 0x7ffb5050bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7127aff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7898695770486804, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78986958, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd02975c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703608b0; to 'JaxprTracer' at 0x7ffa703634c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5933b8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4647534337261747, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46475343, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf4288bc0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c437ed90; to 'JaxprTracer' at 0x7ff7c437e890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a25ab70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7963060034239122, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.796306, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40760bd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6681d0; to 'JaxprTracer' at 0x7ff70c6683b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x311d4aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.36989213940765553, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36989214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8ed0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02ac090; to 'JaxprTracer' at 0x7ffcb02ac0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31f6e930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.45335600499163664, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.453356, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df300>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712cda5c0; to 'JaxprTracer' at 0x7ff712cd8fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x877d3160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.4183352420859699, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41833524, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9068bd70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8b5300; to 'JaxprTracer' at 0x7ff70b8b5710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f43cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.6819180077524968
93, epoch_train_loss=0.6819180077524968
Epoch 94
Epoch 94 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7616933398472882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76169334, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0930>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9408ca40; to 'JaxprTracer' at 0x7ffb900d7a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c4ae330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6836317158334472, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68363172, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365f60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44d73d0; to 'JaxprTracer' at 0x7ffab44d5c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa36b87b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.11215671634399978, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11215672, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120898e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2833aca0; to 'JaxprTracer' at 0x7ffb28338450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c1976c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.41652304972463894, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41652305, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40760ed0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c129850; to 'JaxprTracer' at 0x7ff70c128ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e8092a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.71611640110708, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7161164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0297080>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71320ae30; to 'JaxprTracer' at 0x7ffb7009d8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c8ba4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.7901205012050321, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7901205, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704063d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9031a6b0; to 'JaxprTracer' at 0x7ffb90318ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59350ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7575797887127046, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75757979, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a6a30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07c3a60; to 'JaxprTracer' at 0x7ffcd07c3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33b41220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7829382166756526, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78293822, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a4750>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d241d0; to 'JaxprTracer' at 0x7ff712d24270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x674558e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.1517592148148602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15175921, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9970>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7063b600; to 'JaxprTracer' at 0x7ffa706391c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66a8f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7535811406472807, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75358114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98bfe0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd02d3fb0; to 'JaxprTracer' at 0x7ffcd02d0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97291830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6505629643694392, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65056296, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b0ce0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c456db70; to 'JaxprTracer' at 0x7ff7c456e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa6a668b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6276019805122764, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62760198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94366d60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf010e5c0; to 'JaxprTracer' at 0x7ffbf010f330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f731550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7474348162349994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74743482, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712089800>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7009a520; to 'JaxprTracer' at 0x7ffa7009a2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c4db8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7832264189840675, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78322642, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b720>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711a80900; to 'JaxprTracer' at 0x7ff711a81c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d635f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8085836029084382, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8085836, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0297d70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7069ff60; to 'JaxprTracer' at 0x7ff70c654180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fb70db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7732839265486668, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77328393, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d05b4240>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102ac0e0; to 'JaxprTracer' at 0x7ffc102acd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9346c9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5304183310860312, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53041833, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877a820>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4320a90; to 'JaxprTracer' at 0x7ff7c4323150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c54dc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7365841363203876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73658414, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050c600>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30188f90; to 'JaxprTracer' at 0x7ffc30189990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d60c080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6025240792212825, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.60252408, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068f600>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4276480; to 'JaxprTracer' at 0x7ffab4275580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59699e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.38266612319521504, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38266612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0116300>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713749c60; to 'JaxprTracer' at 0x7ff713748680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6454df40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7316743384895567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73167434, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd6a00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ce4590; to 'JaxprTracer' at 0x7ffca047c7c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53705810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7943009948799078, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79430099, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182bf90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a41373d0; to 'JaxprTracer' at 0x7ff7a4137920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48bed840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4594367578562698, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45943676, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c4616b30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c476ea70; to 'JaxprTracer' at 0x7ff7c476d080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60a95a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7992113533510172, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79921135, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50679f10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa4052b330; to 'JaxprTracer' at 0x7ffa40529ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf4f680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.36382654295935846, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36382654, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427cbe0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e58f0; to 'JaxprTracer' at 0x7ff9f07e7e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fb1f6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.44873302843866575, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44873303, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02546f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5c3100; to 'JaxprTracer' at 0x7ff70c5c01d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d7b4cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.41220963741848465, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41220964, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10678250>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71398ad40; to 'JaxprTracer' at 0x7ff71398abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a540190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.6844484819474239
94, epoch_train_loss=0.6844484819474239
Epoch 95
Epoch 95 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(0.09889843964151782, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.09889844, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0669c10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab47b8b80; to 'JaxprTracer' at 0x7ffab47b8720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54e02c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6814552926922599, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68145529, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506783b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf417a700; to 'JaxprTracer' at 0x7ffcf417b6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x28e048a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.11282913568078497, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.11282914, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a03d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711b21800; to 'JaxprTracer' at 0x7ff711b201d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56320a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.4204354994782616, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4204355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0163d70>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca049a700; to 'JaxprTracer' at 0x7ffca049ab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa38fc160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(0.07034115127125685, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.07034115, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e8170>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307ce660; to 'JaxprTracer' at 0x7ffb307cf2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x867b40b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(2.0854705692829403, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(2.08547057, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d016db10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305306d0; to 'JaxprTracer' at 0x7ffb305300e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c3fa1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7021205844800593, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70212058, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295840>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c479b6a0; to 'JaxprTracer' at 0x7ff7c4798ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f84c250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(1.735900324186841, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.73590032, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0295280>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c456e340; to 'JaxprTracer' at 0x7ff7c456c180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9d82a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.14636683498197506, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.14636683, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141b8bf0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705877e0; to 'JaxprTracer' at 0x7ffb70586a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1da7b270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7518482604682971, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75184826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad06f13f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca00e62a0; to 'JaxprTracer' at 0x7ffca00e5f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x416b1470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.4804278569179468, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48042786, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de810>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05f0f40; to 'JaxprTracer' at 0x7ff9d05f31a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b5ff3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6259017991407355, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6259018, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb506791f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c0a74c0; to 'JaxprTracer' at 0x7ff70c0a6020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2b6fb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7464117198118214, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74641172, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a1650>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45ea980; to 'JaxprTracer' at 0x7ffc703279c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f0c10a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.7060083855400346, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.70600839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b3ce0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d038a250; to 'JaxprTracer' at 0x7ffc103433d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x703f9330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8097963714452953, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80979637, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050dcc0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa28352520; to 'JaxprTracer' at 0x7ffb28551d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36d6f620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7719470725942602, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77194707, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a7050>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb285a2200; to 'JaxprTracer' at 0x7ffb285a1cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41236c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5281930203621632, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52819302, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07abc90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281b56c0; to 'JaxprTracer' at 0x7ffb281b5f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44195180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7359667473710745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.73596675, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa40761390>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41c2020; to 'JaxprTracer' at 0x7ffb501f04f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38ff2540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(0.05748038307914288, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.05748038, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712089210>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a446e8e0; to 'JaxprTracer' at 0x7ff7a446f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x109ae960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.38236870275556795, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.3823687, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50713e70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4148a40; to 'JaxprTracer' at 0x7ffcf41493f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7197b5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7122318054757579, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71223181, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026fe80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf0697600; to 'JaxprTracer' at 0x7ffaf0695850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cd33f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.7704057269035787, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77040573, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013ea00>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1008a8e0; to 'JaxprTracer' at 0x7ff9f07b8630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8381c500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.3977096672608648, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39770967, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fee0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303128e0; to 'JaxprTracer' at 0x7ffc30310c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x678034f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.7999313436892267, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79993134, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b3470>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940cffb0; to 'JaxprTracer' at 0x7ff713ce4c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d59ada0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.36044462238427694, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.36044462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702aec80>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02f0360; to 'JaxprTracer' at 0x7ffbb02f2430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f2fe20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.4265736271329975, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42657363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0786eb0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c437e8e0; to 'JaxprTracer' at 0x7ff7c437f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1b0c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.4088297661291057, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40882977, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50266ea0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c43e88b0; to 'JaxprTracer' at 0x7ff7c43e8770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71dc39e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 4.328963886551004
95, epoch_train_loss=4.328963886551004
Epoch 96
Epoch 96 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7693044742261095, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76930447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa28778bb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50206020; to 'JaxprTracer' at 0x7ffa50206ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fcebd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6898471690748422, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68984717, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463fac0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900ed760; to 'JaxprTracer' at 0x7ffb900ee250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x481eb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.12551465797408645, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.12551466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b0140>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30546d40; to 'JaxprTracer' at 0x7ffc30546520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3076bf80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.4270316388733257, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42703164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013d080>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7012f1a0; to 'JaxprTracer' at 0x7ffa7012f1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bdf2c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7233062677096761, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72330627, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b2a0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06bdb70; to 'JaxprTracer' at 0x7ffcb06befc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb9e1ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8059238463536259, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80592385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619010>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb04c1a80; to 'JaxprTracer' at 0x7ffbb04c2c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d8ac930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7696150681949809, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76961507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405fb0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad020fab0; to 'JaxprTracer' at 0x7ffad020eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c17b4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.792004250224116, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79200425, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70406690>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f0092b10; to 'JaxprTracer' at 0x7ff9f0092ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bb6d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.160534660389104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16053466, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ea8d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100c8400; to 'JaxprTracer' at 0x7ffc100c8720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8086d230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7639377849342397, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76393778, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b760>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711d584a0; to 'JaxprTracer' at 0x7ff711d58bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75044d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6607846543549009, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66078465, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa2877bee0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c668630; to 'JaxprTracer' at 0x7ff70c66ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66b9df90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6390677899776441, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63906779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463c630>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d7330; to 'JaxprTracer' at 0x7ffb302d6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x783cadc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7583547207784552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75835472, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b1d30>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2874b420; to 'JaxprTracer' at 0x7ffa287499e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa312dea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8038822210732158, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80388222, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711828270>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02abe20; to 'JaxprTracer' at 0x7ffbb02abbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x837c0f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8229447012250412, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8229447, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712088e60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc302da930; to 'JaxprTracer' at 0x7ffcf43a5ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x961377a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7825272107321622, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78252721, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba300>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca00a58a0; to 'JaxprTracer' at 0x7ffca00a6b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81ac7af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5415889695612982, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54158897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294f50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa947b08b0; to 'JaxprTracer' at 0x7ffa947b3600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b007720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7474280911774962, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74742809, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf02a5340>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd010cbd0; to 'JaxprTracer' at 0x7ffbd010f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x814453a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6197610458356231, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61976105, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0162300>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4212a20; to 'JaxprTracer' at 0x7ffab4211da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2556d890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.3944303286882529, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39443033, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f0116250>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04e1710; to 'JaxprTracer' at 0x7ffbf04e1da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67732740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7471352344601061, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74713523, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068fd30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa2829e250; to 'JaxprTracer' at 0x7ffa2829c180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51c576e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.815972152499212, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81597215, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a03b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4799940; to 'JaxprTracer' at 0x7ff7a4665440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35786030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.47024423295743745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47024423, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015c1c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf41c24d0; to 'JaxprTracer' at 0x7ffcf41c0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3870df60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.8104640468122893, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81046405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067bd40>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffaf06953a0; to 'JaxprTracer' at 0x7ffaf06954e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f243660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3767334616741109, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37673346, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134b84f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70151800; to 'JaxprTracer' at 0x7ffcd0456160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b5b77b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.45877736274393754, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45877736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d9ac0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e24d0; to 'JaxprTracer' at 0x7ffb307e0680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9dd69c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.4230458990766069, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4230459, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0536610>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b868f40; to 'JaxprTracer' at 0x7ff70b869580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ca9eb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.690495798180248
96, epoch_train_loss=0.690495798180248
Epoch 97
Epoch 97 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7716155432036934, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77161554, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0757980>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90098c70; to 'JaxprTracer' at 0x7ffb90098b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x483441b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6917926187129994, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.69179262, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943643d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2819bf60; to 'JaxprTracer' at 0x7ffb2819a890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d4f8ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.13428897013064578, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13428897, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71182a950>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb065f1a0; to 'JaxprTracer' at 0x7ffcf40c2070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x564f62e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.43085918969655407, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43085919, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f01141d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca030a8e0; to 'JaxprTracer' at 0x7ffca030b880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75d7c9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7255164991042039, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7255165, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285eab80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307cd1c0; to 'JaxprTracer' at 0x7ffb307cce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8aa47ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8121092388930353, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81210924, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02573b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd034dd00; to 'JaxprTracer' at 0x7ffbd034e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66e3e630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.7740838514048511, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77408385, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc7061be20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c66a3e0; to 'JaxprTracer' at 0x7ff70c669b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x863e1a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7951746064882939, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79517461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc70619120>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd07c04f0; to 'JaxprTracer' at 0x7ffcd07c0770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34a68990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.16873590901471539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16873591, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa507100d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705868e0; to 'JaxprTracer' at 0x7ffa9473c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e2b5950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.7677371006808915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7677371, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa407632f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7051a980; to 'JaxprTracer' at 0x7ffc70519760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3666c300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6630219778132821, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.66302198, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07aa950>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c45b5b20; to 'JaxprTracer' at 0x7ff7c45b7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x601ec030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6446226001398581, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6446226, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa943657e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94360c20; to 'JaxprTracer' at 0x7ffa943602c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e98f280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7624777853528139, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76247779, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829610>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca05fc810; to 'JaxprTracer' at 0x7ffca05feb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7840fbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8130462654231904, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81304627, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90689d80>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f0ce50; to 'JaxprTracer' at 0x7ff713f0e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f3de420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8281241675145147, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82812417, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307e9ef0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5e8360; to 'JaxprTracer' at 0x7ff70c5e89a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4de2960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7856172841840819, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78561728, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255440>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa940615d0; to 'JaxprTracer' at 0x7ffa94063c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a062ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5477945775915513, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54779458, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124de360>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904cc1d0; to 'JaxprTracer' at 0x7ffb904cdf80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e55de60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7515208891612895, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75152089, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208b3d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ed9e40; to 'JaxprTracer' at 0x7ff713ed9c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99883e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6283736034963104, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.6283736, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b1c40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44d7330; to 'JaxprTracer' at 0x7ffab44d7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96812d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.40034403743212826, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40034404, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015feb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306f4220; to 'JaxprTracer' at 0x7ffc306f5ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa58c8c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7533304566352024, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75333046, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712cd6440>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02cb0b0; to 'JaxprTracer' at 0x7ffbb02c9080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10875b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.8254329360610888, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82543294, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc702ad700>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca06ce6b0; to 'JaxprTracer' at 0x7ffca06cd300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31f48af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.47723723070193746, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47723723, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504a0350>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc70327240; to 'JaxprTracer' at 0x7ffc70326160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa41c7160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.8146978347734678, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81469783, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688300>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad024b3d0; to 'JaxprTracer' at 0x7ffad0249030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4ba16f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.3857142552578596, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38571426, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029f920>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0417560; to 'JaxprTracer' at 0x7ff9d0414090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37f05c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.4649321408476775, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46493214, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1026c4c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02f0ea0; to 'JaxprTracer' at 0x7ffbb02f0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d3358a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.43050825802204745, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.43050826, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab427f9b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a467ef20; to 'JaxprTracer' at 0x7ff7a467ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x311d41d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.6930987566026778
97, epoch_train_loss=0.6930987566026778
Epoch 98
Epoch 98 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7695872171324019, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76958722, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06d98b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713265760; to 'JaxprTracer' at 0x7ff713265a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x685b08d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6899952528726552, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68999525, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bbcf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50698450; to 'JaxprTracer' at 0x7ffb5069a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11f10b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.1379001478650589, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.13790015, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029d310>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141c4540; to 'JaxprTracer' at 0x7ff7141c6340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eefdd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.4298893050855436, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42988931, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463d120>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf02ffce0; to 'JaxprTracer' at 0x7ffbf02fdc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54189a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7234812935954398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.72348129, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b0030>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0327740; to 'JaxprTracer' at 0x7ffbf03277e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18702500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8107102669073143, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81071027, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013dbb0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb063b880; to 'JaxprTracer' at 0x7ffcb06384f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a227220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.772439622321084, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77243962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a8d90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0145e90; to 'JaxprTracer' at 0x7ffbd0147d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8aeca070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7930753350389841, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.79307534, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07a89d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc7063b790; to 'JaxprTracer' at 0x7ffc706389f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d4f040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.16709911760211413, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.16709912, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad02566f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7041b6f0; to 'JaxprTracer' at 0x7ffa70418db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3de4ba30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.765847466570442, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76584747, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c98b610>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c456ffb0; to 'JaxprTracer' at 0x7ff7c456df80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7355d140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6592450298428915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.65924503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06db8b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa284ff100; to 'JaxprTracer' at 0x7ffa284fd8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63bd2cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6432407948528852, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64324079, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7134bad90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71283d8f0; to 'JaxprTracer' at 0x7ff71283dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x658142c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7604476899551514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76044769, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029cd30>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506faf70; to 'JaxprTracer' at 0x7ffb506f8630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x423b53b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8124096684077252, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.81240967, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829d00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c4391da0; to 'JaxprTracer' at 0x7ff7c43919e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22fc0bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8265951654773336, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82659517, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3050>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa402231f0; to 'JaxprTracer' at 0x7ffa40220fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x64d94a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7833346109895919, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78333461, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca04b3fa0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4232a70; to 'JaxprTracer' at 0x7ffcf40ade90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d6a4020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5462496288148766, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.54624963, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7c46172c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf00d1710; to 'JaxprTracer' at 0x7ffbf00d1490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1d765500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7499545553815167, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74995456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa704040c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c473ffb0; to 'JaxprTracer' at 0x7ff7a41c0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93848450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6275350822213047, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.62753508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285ebfb0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa506c2e30; to 'JaxprTracer' at 0x7ffa506c04f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ca51780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.3983858597357539, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39838586, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0161020>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab44fcc20; to 'JaxprTracer' at 0x7ffab44fe070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x697f8160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.752437525463844, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75243753, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc307ea300>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb706b94e0; to 'JaxprTracer' at 0x7ffb706b9c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49440340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.8253240488772823, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.82532405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428b830>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa94704630; to 'JaxprTracer' at 0x7ffa94705fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x448b5240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.4748154740708121, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47481547, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90688970>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb2b10; to 'JaxprTracer' at 0x7ff713eb1260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99d7bec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.812616395905514, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8126164, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff711829b30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d060c6d0; to 'JaxprTracer' at 0x7ffb7075b290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cd9adb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.38431611740321503, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38431612, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb066aa60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713506ac0; to 'JaxprTracer' at 0x7ff713505b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3973fd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.46242014280206717, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46242014, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa94365960>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30545940; to 'JaxprTracer' at 0x7ffc30544c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61f29920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.42827036113523137, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.42827036, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffca0754060>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0708540; to 'JaxprTracer' at 0x7ffbb07089a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15c18b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.6883406714049778
98, epoch_train_loss=0.6883406714049778
Epoch 99
Epoch 99 :: Batch 1/1
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
0: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7638838988636938, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.7638839, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124dfcc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d066f240; to 'JaxprTracer' at 0x7ff9d066f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20cf8150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.8699083432114226
eX.__call__, rho shape: (5016, 16)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.6850819320826383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.68508193, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50678960>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c3713f0; to 'JaxprTracer' at 0x7ff70c3725c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4da91230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2440, 16)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.13855029919915135, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.1385503, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf42885d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10541cb0; to 'JaxprTracer' at 0x7ffa28310cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b86b9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.2243006675593121
eX.__call__, rho shape: (4592, 16)
eX.__call__, rho nans: 0
3: Pred stats: pred_nans = 0
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(-0.4206984953468933, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4206985, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb285e9f30>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305db1f0; to 'JaxprTracer' at 0x7ffb305d8d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3085ae10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.27879798014052015
eX.__call__, rho shape: (5040, 16)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.7177950652370774, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.71779507, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa70405290>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b91a2a0; to 'JaxprTracer' at 0x7ff70b91a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f2a92b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923530433783396
eX.__call__, rho shape: (6152, 16)
eX.__call__, rho nans: 0
5: Pred stats: pred_nans = 0
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(-0.8020846237807427, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80208462, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9f07ab760>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712cda980; to 'JaxprTracer' at 0x7ff712cd9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b08d720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688792872655398
eX.__call__, rho shape: (6088, 16)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(-0.765585610164873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.76558561, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015f780>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab4565a80; to 'JaxprTracer' at 0x7ffab4566980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54fd9a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135680157772
eX.__call__, rho shape: (6320, 16)
eX.__call__, rho nans: 0
7: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(-0.7853931557385697, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.78539316, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9015fed0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712cfefc0; to 'JaxprTracer' at 0x7ff712cfeca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x465b4c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051911985775197
eX.__call__, rho shape: (4776, 16)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.15793698669637793, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.15793699, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa287784d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffca0101030; to 'JaxprTracer' at 0x7ffca01028e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5454b120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755264
eX.__call__, rho shape: (9848, 16)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.75937441452581, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75937441, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff71208bad0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304e1440; to 'JaxprTracer' at 0x7ffc304e1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25afee50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (9752, 16)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.6479911388304006, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.64799114, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7124df320>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102ac4f0; to 'JaxprTracer' at 0x7ffc102aeed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x95a6b520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482003265
eX.__call__, rho shape: (12256, 16)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.6361117376175142, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.63611174, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5067b6d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcf4038ae0; to 'JaxprTracer' at 0x7ffcf4039940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e450bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900403
eX.__call__, rho shape: (14920, 16)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.7530149771722876, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.75301498, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcf428a510>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7012f650; to 'JaxprTracer' at 0x7ffa7012c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47956100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467689
eX.__call__, rho shape: (12208, 16)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(-0.8032735473014457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80327355, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50267180>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5021d8a0; to 'JaxprTracer' at 0x7ffb5021cae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62205ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (9824, 16)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.8195576023111242, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8195576, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0255f90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9f07e4180; to 'JaxprTracer' at 0x7ff9f07e5ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x883da230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175136
eX.__call__, rho shape: (9912, 16)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.7764120161986914, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.77641202, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb305a5ec0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10722a20; to 'JaxprTracer' at 0x7ffc10721f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c46d260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.606466115499595
eX.__call__, rho shape: (15208, 16)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.5383021337540732, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.53830213, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc1013ce90>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb900b5b70; to 'JaxprTracer' at 0x7ff9f00a42c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa136d840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.4017949750077862
eX.__call__, rho shape: (10040, 16)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.7433215157049115, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74332152, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7a463d040>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502b7c90; to 'JaxprTracer' at 0x7ffc502b4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e43d770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (8552, 16)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(-0.6184105291285469, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.61841053, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb9029c6b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7a43e0270; to 'JaxprTracer' at 0x7ff7a43e2110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61e44e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.7551401088231615
eX.__call__, rho shape: (6936, 16)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.38909001239967383, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.38909001, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10679810>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd07036a0; to 'JaxprTracer' at 0x7ffbd0701da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77541720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.2502797649212316
eX.__call__, rho shape: (11536, 16)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-0.7452722938132085, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.74527229, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffaf068ef10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ce7f60; to 'JaxprTracer' at 0x7ff713ce6e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b1ce7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (24512, 16)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(-0.8167313042383642, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.8167313, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd0294810>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7c456cdb0; to 'JaxprTracer' at 0x7ff7c456c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4a3a530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797559
eX.__call__, rho shape: (13096, 16)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(-0.46466725456523567, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.46466725, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0160e90>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71353e110; to 'JaxprTracer' at 0x7ff71353d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x539845a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869414
eX.__call__, rho shape: (12384, 16)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(-0.8051050802869577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.80510508, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb06dbfd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1072e660; to 'JaxprTracer' at 0x7ff71187f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3b24980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376160742958626
eX.__call__, rho shape: (13936, 16)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.374442930593176, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.37444293, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb702b3ae0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1072e430; to 'JaxprTracer' at 0x7ff713c70d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97d1cfa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933429
eX.__call__, rho shape: (9656, 16)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.4526520633669877, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45265206, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7141ba640>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf04e2cf0; to 'JaxprTracer' at 0x7ffbf04e3510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x564b0930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.3613714722249097
eX.__call__, rho shape: (15256, 16)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(-0.41823268693167337, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.41823269, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3050fcc0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb033d7b0; to 'JaxprTracer' at 0x7ffbb033de40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x74f367a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581492
Batch Loss = 0.676841113647691
99, epoch_train_loss=0.676841113647691

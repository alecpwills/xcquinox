/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/pyscf/dft/libxc.py:772: UserWarning: Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, the same to the B3LYP functional in Gaussian and ORCA (issue 1480). To restore the VWN5 definition, you can put the setting "B3LYP_WITH_VWN5 = True" in pyscf_conf.py
  warnings.warn('Since PySCF-2.3, B3LYP (and B3P86) are changed to the VWN-RPA variant, '
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20e950> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20e950> in UKS object of <class 'pyscf.dft.uks.UKS'>
SINGLE NETFILE MATCH FOUND. DESERIALIZING...
WARNING: External module "mldftdat" required for non-local descriptor use.
<pyscf.gto.mole.Mole object at 0x7ffd2c20e950> [['P', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffd2c20f1c0> [['N', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffd2c20c9d0> [['H', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffd2c20c6a0> [['Li', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffd2c20efb0> [['O', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffd2c20d240> [['Cl', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffd2c20c790> [['Al', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffd2c20f490> [['S', array([0., 0., 0.])]] 1
<pyscf.gto.mole.Mole object at 0x7ffd2c20f610> [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c20e3b0> [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c20e620> [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c144ca0> [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]] 3
<pyscf.gto.mole.Mole object at 0x7ffd2c144310> [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]] 3
<pyscf.gto.mole.Mole object at 0x7ffd2c147340> [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c145330> [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c144190> [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c147790> [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]] 4
<pyscf.gto.mole.Mole object at 0x7ffd2c144cd0> [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c145000> [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c146740> [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c146320> [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c147fa0> [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]] 4
<pyscf.gto.mole.Mole object at 0x7ffd2c145c30> [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]] 4
<pyscf.gto.mole.Mole object at 0x7ffd2c1477c0> [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]] 2
<pyscf.gto.mole.Mole object at 0x7ffd2c145960> [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]] 5
<pyscf.gto.mole.Mole object at 0x7ffd2c18d540> [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]] 3
<pyscf.gto.mole.Mole object at 0x7ffd2c18d4b0> [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]] 5
mol:  [['P', array([0., 0., 0.])]]
converged SCF energy = -341.104145992717  <S^2> = 3.7502984  2S+1 = 4.0001492
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20f1c0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20f1c0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-1.02859844e-02 -2.86073945e-03 -4.09993757e-03 ... -7.11627837e+00
 -7.11627837e+00 -7.11627837e+00] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc_a.shape=(6320,), exc_b.shape=(6320,)
mol.spin != 0 and sum(mol.nelec) > 1
rho.shape=(6, 12640), fxc.shape=(12640,)
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.67994866e-11, dtype=float64), Array(1059.62286844, dtype=float64))
rho0_b = (Array(4.43047991e-14, dtype=float64), Array(1059.87616936, dtype=float64))
gamma_a = (Array(5.28031237e-21, dtype=float64), Array(9.20660135e+08, dtype=float64))
gamma_b = (Array(8.5144319e-27, dtype=float64), Array(9.21228364e+08, dtype=float64))
gamma_ab = (Array(-8.14145379e-18, dtype=float64), Array(9.20944206e+08, dtype=float64))
tau_a = (Array(1.80944571e-11, dtype=float64), Array(117315.47918142, dtype=float64))
tau_b = (Array(2.4091098e-14, dtype=float64), Array(117138.81600436, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['N', array([0., 0., 0.])]]
converged SCF energy = -54.5289742046674  <S^2> = 3.7524945  2S+1 = 4.0012471
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20c9d0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20c9d0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5016, 22)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-6.03613915e-03 -2.53978880e-03 -5.86795222e-04 ... -3.21789642e+00
 -3.21789642e+00 -3.21789642e+00] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 5016), rho_b.shape=(6, 5016)
exc_a.shape=(5016,), exc_b.shape=(5016,)
mol.spin != 0 and sum(mol.nelec) > 1
rho.shape=(6, 10032), fxc.shape=(10032,)
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5016, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.01250672e-10, dtype=float64), Array(98.02349249, dtype=float64))
rho0_b = (Array(7.96767579e-13, dtype=float64), Array(98.07082061, dtype=float64))
gamma_a = (Array(7.38523929e-20, dtype=float64), Array(1678679.86597091, dtype=float64))
gamma_b = (Array(5.20206274e-24, dtype=float64), Array(1685178.28025284, dtype=float64))
gamma_ab = (Array(6.19826412e-22, dtype=float64), Array(1681925.93464514, dtype=float64))
tau_a = (Array(9.19823844e-11, dtype=float64), Array(2392.4769597, dtype=float64))
tau_b = (Array(8.16119858e-13, dtype=float64), Array(2377.12659072, dtype=float64))
retrho shape: (5016, 9)
refexc shape: (5016,)
mol:  [['H', array([0., 0., 0.])]]
converged SCF energy = -0.499812984008539  <S^2> = 0.75  2S+1 = 2
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20c6a0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20c6a0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 7, 7)
ao.shape (10, 2440, 7)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-5.68454141e-03 -2.30635934e-03 -4.18219349e-04 ... -4.64908450e-01
 -4.64908450e-01 -4.64908450e-01] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 2440), rho_b.shape=(6, 2440)
exc_a.shape=(2440,), exc_b.shape=(2440,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 2440), fxc.shape=(2440,)
get_data, dm shape = (2, 7, 7)
ao_eval.shape=(4, 2440, 7)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.6658391e-11, dtype=float64), Array(0.29561959, dtype=float64))
rho0_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_a = (Array(4.73133914e-21, dtype=float64), Array(0.26449368, dtype=float64))
gamma_b = (Array(0., dtype=float64), Array(0., dtype=float64))
gamma_ab = (Array(0., dtype=float64), Array(0., dtype=float64))
tau_a = (Array(1.61332065e-11, dtype=float64), Array(0.13786571, dtype=float64))
tau_b = (Array(0., dtype=float64), Array(0., dtype=float64))
retrho shape: (2440, 9)
refexc shape: (2440,)
mol:  [['Li', array([0., 0., 0.])]]
converged SCF energy = -7.46006188627842  <S^2> = 0.75000049  2S+1 = 2.0000005
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20efb0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20efb0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 4592, 22)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.01101619 -0.0039025  -0.0039025  ... -0.02009377 -1.30976556
 -1.30976556] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 4592), rho_b.shape=(6, 4592)
exc_a.shape=(4592,), exc_b.shape=(4592,)
mol.spin != 0 and sum(mol.nelec) > 1
rho.shape=(6, 9184), fxc.shape=(9184,)
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 4592, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.98682912e-08, dtype=float64), Array(6.61008772, dtype=float64))
rho0_b = (Array(5.00919173e-12, dtype=float64), Array(6.40126477, dtype=float64))
gamma_a = (Array(8.7831563e-16, dtype=float64), Array(1337.91712145, dtype=float64))
gamma_b = (Array(4.51852966e-22, dtype=float64), Array(1252.60460758, dtype=float64))
gamma_ab = (Array(-7.10811059e-13, dtype=float64), Array(1294.55828409, dtype=float64))
tau_a = (Array(3.70309247e-09, dtype=float64), Array(28.9347713, dtype=float64))
tau_b = (Array(2.38827694e-13, dtype=float64), Array(27.96947733, dtype=float64))
retrho shape: (4592, 9)
refexc shape: (4592,)
mol:  [['O', array([0., 0., 0.])]]
converged SCF energy = -75.0033802698968  <S^2> = 2.0027445  2S+1 = 3.0018291
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20d240> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20d240> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 22, 22)
ao.shape (10, 5040, 22)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-3.10312394e-03 -9.58674860e-04 -1.32885768e-04 ... -3.69605142e+00
 -3.69605142e+00 -3.69605142e+00] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 5040), rho_b.shape=(6, 5040)
exc_a.shape=(5040,), exc_b.shape=(5040,)
mol.spin != 0 and sum(mol.nelec) > 1
rho.shape=(6, 10080), fxc.shape=(10080,)
get_data, dm shape = (2, 22, 22)
ao_eval.shape=(4, 5040, 22)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.72367525e-13, dtype=float64), Array(148.53260274, dtype=float64))
rho0_b = (Array(9.91563417e-16, dtype=float64), Array(148.54626071, dtype=float64))
gamma_a = (Array(5.88152545e-24, dtype=float64), Array(4945153.17830616, dtype=float64))
gamma_b = (Array(1.7773936e-29, dtype=float64), Array(4956867.5343233, dtype=float64))
gamma_ab = (Array(9.08811353e-27, dtype=float64), Array(4950937.65981016, dtype=float64))
tau_a = (Array(1.10323541e-12, dtype=float64), Array(4773.97006933, dtype=float64))
tau_b = (Array(1.44364877e-14, dtype=float64), Array(4747.12460908, dtype=float64))
retrho shape: (5040, 9)
refexc shape: (5040,)
mol:  [['Cl', array([0., 0., 0.])]]
converged SCF energy = -459.957577125547  <S^2> = 0.75161942  2S+1 = 2.0016188
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20c790> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20c790> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6152, 30)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-2.93500687e-03 -2.90408675e-03 -1.62452028e-03 ... -8.09934070e+00
 -8.09934070e+00 -8.09934070e+00] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 6152), rho_b.shape=(6, 6152)
exc_a.shape=(6152,), exc_b.shape=(6152,)
mol.spin != 0 and sum(mol.nelec) > 1
rho.shape=(6, 12304), fxc.shape=(12304,)
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6152, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.25731366e-11, dtype=float64), Array(1561.9047126, dtype=float64))
rho0_b = (Array(6.76422186e-13, dtype=float64), Array(1561.95787094, dtype=float64))
gamma_a = (Array(1.30522345e-20, dtype=float64), Array(2.7317145e+09, dtype=float64))
gamma_b = (Array(2.76266432e-24, dtype=float64), Array(2.73215978e+09, dtype=float64))
gamma_ab = (Array(-1.17079707e-17, dtype=float64), Array(2.73193398e+09, dtype=float64))
tau_a = (Array(3.15248956e-11, dtype=float64), Array(239540.9486794, dtype=float64))
tau_b = (Array(6.7184113e-13, dtype=float64), Array(239371.75942569, dtype=float64))
retrho shape: (6152, 9)
refexc shape: (6152,)
mol:  [['Al', array([0., 0., 0.])]]
converged SCF energy = -242.226560993727  <S^2> = 0.75226415  2S+1 = 2.0022629
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20f490> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20f490> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6088, 30)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.02537908 -0.0175606  -0.01033501 ... -0.0009163  -0.00395318
 -0.00066127] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 6088), rho_b.shape=(6, 6088)
exc_a.shape=(6088,), exc_b.shape=(6088,)
mol.spin != 0 and sum(mol.nelec) > 1
rho.shape=(6, 12176), fxc.shape=(12176,)
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6088, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.95727589e-12, dtype=float64), Array(679.40140666, dtype=float64))
rho0_b = (Array(5.90720751e-12, dtype=float64), Array(679.49865978, dtype=float64))
gamma_a = (Array(9.77885345e-23, dtype=float64), Array(2.66170711e+08, dtype=float64))
gamma_b = (Array(9.76673963e-23, dtype=float64), Array(2.66254716e+08, dtype=float64))
gamma_ab = (Array(1.07716243e-22, dtype=float64), Array(2.6621271e+08, dtype=float64))
tau_a = (Array(3.69847758e-12, dtype=float64), Array(56081.37751184, dtype=float64))
tau_b = (Array(2.09876331e-12, dtype=float64), Array(56073.2312341, dtype=float64))
retrho shape: (6088, 9)
refexc shape: (6088,)
mol:  [['S', array([0., 0., 0.])]]
converged SCF energy = -397.93878680366  <S^2> = 2.0022329  2S+1 = 3.0014882
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20f610> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20f610> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 30, 30)
ao.shape (10, 6320, 30)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-5.25486203e-03 -2.97502101e-03 -2.87098575e-03 ... -7.60863359e+00
 -7.60863359e+00 -7.60863359e+00] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 6320), rho_b.shape=(6, 6320)
exc_a.shape=(6320,), exc_b.shape=(6320,)
mol.spin != 0 and sum(mol.nelec) > 1
rho.shape=(6, 12640), fxc.shape=(12640,)
get_data, dm shape = (2, 30, 30)
ao_eval.shape=(4, 6320, 30)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.91079505e-12, dtype=float64), Array(1294.97546987, dtype=float64))
rho0_b = (Array(9.47175404e-15, dtype=float64), Array(1295.10901125, dtype=float64))
gamma_a = (Array(1.97545023e-23, dtype=float64), Array(1.63838353e+09, dtype=float64))
gamma_b = (Array(5.09633672e-28, dtype=float64), Array(1.63892047e+09, dtype=float64))
gamma_ab = (Array(-1.48357496e-15, dtype=float64), Array(1.63865079e+09, dtype=float64))
tau_a = (Array(1.30186351e-12, dtype=float64), Array(172116.85519904, dtype=float64))
tau_b = (Array(9.85408013e-15, dtype=float64), Array(171895.27138756, dtype=float64))
retrho shape: (6320, 9)
refexc shape: (6320,)
mol:  [['H', array([0.      , 0.      , 0.371395])], ['H', array([ 0.      ,  0.      , -0.371395])]]
converged SCF energy = -1.16580491182913  <S^2> = 0  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20e3b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20e3b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 14, 14)
ao.shape (10, 4776, 14)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-7.26413890e-04 -1.18381353e-04 -1.56992301e-03 ... -3.54024005e-01
 -3.54024005e-01 -3.54024005e-01] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 4776), rho_b.shape=(6, 4776)
exc_a.shape=(4776,), exc_b.shape=(4776,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 4776), fxc.shape=(4776,)
get_data, dm shape = (2, 14, 14)
ao_eval.shape=(4, 4776, 14)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.44689399e-13, dtype=float64), Array(0.20861087, dtype=float64))
rho0_b = (Array(1.44689332e-13, dtype=float64), Array(0.20861087, dtype=float64))
gamma_a = (Array(7.72165748e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_b = (Array(7.72165033e-26, dtype=float64), Array(0.17008873, dtype=float64))
gamma_ab = (Array(7.72165391e-26, dtype=float64), Array(0.17008873, dtype=float64))
tau_a = (Array(6.67089084e-14, dtype=float64), Array(0.12766215, dtype=float64))
tau_b = (Array(6.67088776e-14, dtype=float64), Array(0.12766216, dtype=float64))
retrho shape: (4776, 9)
refexc shape: (4776,)
mol:  [['N', array([0.      , 0.      , 0.549396])], ['N', array([ 0.      ,  0.      , -0.549396])]]
converged SCF energy = -109.439263799566  <S^2> = 1.5987212e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c20e620> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c20e620> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9848, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00073837 -0.00352423 -0.00142302 ... -0.00029279 -0.00029279
 -0.00073837] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 9848), rho_b.shape=(6, 9848)
exc_a.shape=(9848,), exc_b.shape=(9848,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 9848), fxc.shape=(9848,)
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9848, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.14686831e-11, dtype=float64), Array(97.7451329, dtype=float64))
rho0_b = (Array(1.14686957e-11, dtype=float64), Array(97.74513282, dtype=float64))
gamma_a = (Array(1.02439634e-21, dtype=float64), Array(1675905.6447569, dtype=float64))
gamma_b = (Array(1.02439863e-21, dtype=float64), Array(1675905.63933664, dtype=float64))
gamma_ab = (Array(1.02439749e-21, dtype=float64), Array(1675905.64204677, dtype=float64))
tau_a = (Array(1.12920136e-11, dtype=float64), Array(2385.36851255, dtype=float64))
tau_b = (Array(1.12920262e-11, dtype=float64), Array(2385.36850635, dtype=float64))
retrho shape: (9848, 9)
refexc shape: (9848,)
mol:  [['Li', array([ 0.      ,  0.      , -1.172697])], ['F', array([0.      , 0.      , 0.390899])]]
converged SCF energy = -107.339357395734  <S^2> = 1.7763568e-15  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c144ca0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c144ca0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9752, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00214641 -0.00173897 -0.00179924 ... -0.00203924 -0.56515366
 -0.56515366] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 9752), rho_b.shape=(6, 9752)
exc_a.shape=(9752,), exc_b.shape=(9752,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 9752), fxc.shape=(9752,)
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9752, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.45847479e-10, dtype=float64), Array(213.38344803, dtype=float64))
rho0_b = (Array(6.45847123e-10, dtype=float64), Array(213.38344813, dtype=float64))
gamma_a = (Array(7.30703612e-21, dtype=float64), Array(12045972.15074667, dtype=float64))
gamma_b = (Array(7.30703495e-21, dtype=float64), Array(12045972.15767306, dtype=float64))
gamma_ab = (Array(7.30703553e-21, dtype=float64), Array(12045972.15420987, dtype=float64))
tau_a = (Array(8.2392185e-12, dtype=float64), Array(8296.09746707, dtype=float64))
tau_b = (Array(8.23921436e-12, dtype=float64), Array(8296.09747258, dtype=float64))
retrho shape: (9752, 9)
refexc shape: (9752,)
mol:  [['C', array([ 0.      ,  0.      , -0.499686])], ['N', array([0.      , 0.      , 0.652056])], ['H', array([ 0.        ,  0.        , -1.56627401])]]
converged SCF energy = -93.337792446513  <S^2> = 4.0072301e-10  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c144310> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c144310> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 12256, 51)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-1.38295888e-03 -2.66805498e-04 -3.06405234e-04 ... -4.38438748e-01
 -4.38438748e-01 -4.38438748e-01] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 12256), rho_b.shape=(6, 12256)
exc_a.shape=(12256,), exc_b.shape=(12256,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 12256), fxc.shape=(12256,)
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 12256, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(5.47734201e-14, dtype=float64), Array(97.63905609, dtype=float64))
rho0_b = (Array(5.47744418e-14, dtype=float64), Array(97.63905217, dtype=float64))
gamma_a = (Array(2.1109048e-26, dtype=float64), Array(1672514.39746183, dtype=float64))
gamma_b = (Array(2.11098406e-26, dtype=float64), Array(1672514.37036922, dtype=float64))
gamma_ab = (Array(2.11094443e-26, dtype=float64), Array(1672514.38391552, dtype=float64))
tau_a = (Array(4.84017018e-14, dtype=float64), Array(2383.14480496, dtype=float64))
tau_b = (Array(4.84026185e-14, dtype=float64), Array(2383.14461777, dtype=float64))
retrho shape: (12256, 9)
refexc shape: (12256,)
mol:  [['C', array([0., 0., 0.])], ['O', array([0.      , 0.      , 1.162879])], ['O', array([ 0.      ,  0.      , -1.162879])]]
converged SCF energy = -188.456965322844  <S^2> = 1.9539925e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c147340> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c147340> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 66, 66)
ao.shape (10, 14920, 66)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-1.29083979e-03 -1.15920008e-03 -3.32405260e-03 ... -6.57422270e-05
 -2.73173120e+00 -2.73173120e+00] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 14920), rho_b.shape=(6, 14920)
exc_a.shape=(14920,), exc_b.shape=(14920,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 14920), fxc.shape=(14920,)
get_data, dm shape = (2, 66, 66)
ao_eval.shape=(4, 14920, 66)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.26912701e-14, dtype=float64), Array(148.00725437, dtype=float64))
rho0_b = (Array(2.26912687e-14, dtype=float64), Array(148.00725431, dtype=float64))
gamma_a = (Array(3.64491259e-27, dtype=float64), Array(4932043.35237509, dtype=float64))
gamma_b = (Array(3.64491214e-27, dtype=float64), Array(4932043.35046429, dtype=float64))
gamma_ab = (Array(3.64491237e-27, dtype=float64), Array(4932043.35141969, dtype=float64))
tau_a = (Array(2.01975405e-14, dtype=float64), Array(4763.25601495, dtype=float64))
tau_b = (Array(2.01975393e-14, dtype=float64), Array(4763.25601224, dtype=float64))
retrho shape: (14920, 9)
refexc shape: (14920,)
mol:  [['Cl', array([0.      , 0.      , 1.008241])], ['Cl', array([ 0.      ,  0.      , -1.008241])]]
converged SCF energy = -920.005608888959  <S^2> = 4.9737992e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c145330> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c145330> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12208, 60)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00376868 -0.00297928 -0.00401079 ... -0.00297928 -0.29073348
 -0.29073348] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 12208), rho_b.shape=(6, 12208)
exc_a.shape=(12208,), exc_b.shape=(12208,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 12208), fxc.shape=(12208,)
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12208, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.03699875e-10, dtype=float64), Array(1561.84909056, dtype=float64))
rho0_b = (Array(1.03699908e-10, dtype=float64), Array(1561.84909229, dtype=float64))
gamma_a = (Array(4.91102934e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
gamma_b = (Array(4.91103253e-20, dtype=float64), Array(2.73287725e+09, dtype=float64))
gamma_ab = (Array(4.91103094e-20, dtype=float64), Array(2.73287724e+09, dtype=float64))
tau_a = (Array(6.02564479e-11, dtype=float64), Array(239560.02664872, dtype=float64))
tau_b = (Array(6.02564657e-11, dtype=float64), Array(239560.02652209, dtype=float64))
retrho shape: (12208, 9)
refexc shape: (12208,)
mol:  [['F', array([0.      , 0.      , 0.693963])], ['F', array([ 0.      ,  0.      , -0.693963])]]
converged SCF energy = -199.394370591172  <S^2> = 1.2434498e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c144190> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c144190> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9824, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-1.28783692e-03 -2.82644621e-04 -4.34324771e-03 ... -3.64362230e-01
 -3.64362230e-01 -3.64362230e-01] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 9824), rho_b.shape=(6, 9824)
exc_a.shape=(9824,), exc_b.shape=(9824,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 9824), fxc.shape=(9824,)
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9824, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.87956275e-12, dtype=float64), Array(213.92658889, dtype=float64))
rho0_b = (Array(2.87956309e-12, dtype=float64), Array(213.9265899, dtype=float64))
gamma_a = (Array(1.17053094e-22, dtype=float64), Array(12130448.41996835, dtype=float64))
gamma_b = (Array(1.17053126e-22, dtype=float64), Array(12130448.47158331, dtype=float64))
gamma_ab = (Array(1.1705311e-22, dtype=float64), Array(12130448.44577581, dtype=float64))
tau_a = (Array(5.2690727e-12, dtype=float64), Array(8330.31451392, dtype=float64))
tau_b = (Array(5.26907329e-12, dtype=float64), Array(8330.31451124, dtype=float64))
retrho shape: (9824, 9)
refexc shape: (9824,)
mol:  [['O', array([0.      , 0.      , 0.603195])], ['O', array([ 0.      ,  0.      , -0.603195])]]
converged SCF energy = -150.214894510018  <S^2> = 1.0018599  2S+1 = 2.2377309
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c147790> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c147790> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 9912, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-2.81259808e-03 -8.81976581e-04 -1.24342996e-04 ... -4.50036607e-01
 -4.50036607e-01 -4.50036607e-01] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 9912), rho_b.shape=(6, 9912)
exc_a.shape=(9912,), exc_b.shape=(9912,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 9912), fxc.shape=(9912,)
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 9912, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.73358609e-13, dtype=float64), Array(148.29947236, dtype=float64))
rho0_b = (Array(1.73358563e-13, dtype=float64), Array(148.29947236, dtype=float64))
gamma_a = (Array(4.03900016e-25, dtype=float64), Array(4951708.97821369, dtype=float64))
gamma_b = (Array(4.03899808e-25, dtype=float64), Array(4951708.97813175, dtype=float64))
gamma_ab = (Array(2.13621399e-24, dtype=float64), Array(4951708.97817272, dtype=float64))
tau_a = (Array(2.99116325e-13, dtype=float64), Array(4771.62334773, dtype=float64))
tau_b = (Array(2.99116254e-13, dtype=float64), Array(4771.62334772, dtype=float64))
retrho shape: (9912, 9)
refexc shape: (9912,)
mol:  [['C', array([0.      , 0.      , 0.599454])], ['C', array([ 0.      ,  0.      , -0.599454])], ['H', array([ 0.        ,  0.        , -1.66162301])], ['H', array([0.        , 0.        , 1.66162301])]]
converged SCF energy = -77.2435048346372  <S^2> = 1.2434498e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c144cd0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c144cd0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 58, 58)
ao.shape (10, 15208, 58)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00060513 -0.00060513 -0.0032515  ... -0.00031965 -0.00031863
 -0.00031863] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 15208), rho_b.shape=(6, 15208)
exc_a.shape=(15208,), exc_b.shape=(15208,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 15208), fxc.shape=(15208,)
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15208, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(6.13931845e-12, dtype=float64), Array(59.9351633, dtype=float64))
rho0_b = (Array(6.13931316e-12, dtype=float64), Array(59.93516325, dtype=float64))
gamma_a = (Array(1.65925574e-22, dtype=float64), Array(440696.01493247, dtype=float64))
gamma_b = (Array(1.65925309e-22, dtype=float64), Array(440696.01409496, dtype=float64))
gamma_ab = (Array(1.65925441e-22, dtype=float64), Array(440696.01451371, dtype=float64))
tau_a = (Array(3.4327454e-12, dtype=float64), Array(998.29901851, dtype=float64))
tau_b = (Array(3.43274276e-12, dtype=float64), Array(998.29901762, dtype=float64))
retrho shape: (15208, 9)
refexc shape: (15208,)
mol:  [['O', array([0.      , 0.      , 0.484676])], ['C', array([ 0.      ,  0.      , -0.646235])]]
converged SCF energy = -113.221335689652  <S^2> = 6.6435746e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c145000> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c145000> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 44, 44)
ao.shape (10, 10040, 44)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00219858 -0.00302532 -0.0063971  ... -0.499356   -0.499356
 -0.499356  ] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 10040), rho_b.shape=(6, 10040)
exc_a.shape=(10040,), exc_b.shape=(10040,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 10040), fxc.shape=(10040,)
get_data, dm shape = (2, 44, 44)
ao_eval.shape=(4, 10040, 44)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.33751683e-14, dtype=float64), Array(148.14285767, dtype=float64))
rho0_b = (Array(4.33752459e-14, dtype=float64), Array(148.14285736, dtype=float64))
gamma_a = (Array(1.33620756e-26, dtype=float64), Array(4935292.34683902, dtype=float64))
gamma_b = (Array(1.33621237e-26, dtype=float64), Array(4935292.3412988, dtype=float64))
gamma_ab = (Array(1.33620996e-26, dtype=float64), Array(4935292.34406891, dtype=float64))
tau_a = (Array(3.85913574e-14, dtype=float64), Array(4761.65762933, dtype=float64))
tau_b = (Array(3.8591427e-14, dtype=float64), Array(4761.65760861, dtype=float64))
retrho shape: (10040, 9)
refexc shape: (10040,)
mol:  [['Cl', array([0.      , 0.      , 0.071315])], ['H', array([ 0.      ,  0.      , -1.212358])]]
converged SCF energy = -460.624592374077  <S^2> = 6.750156e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c146740> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c146740> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 37, 37)
ao.shape (10, 8552, 37)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-1.16123527e-03 -2.16521491e-04 -2.58936524e-04 ... -2.38746776e+00
 -2.38746776e+00 -2.38746776e+00] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 8552), rho_b.shape=(6, 8552)
exc_a.shape=(8552,), exc_b.shape=(8552,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 8552), fxc.shape=(8552,)
get_data, dm shape = (2, 37, 37)
ao_eval.shape=(4, 8552, 37)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.16474784e-13, dtype=float64), Array(1561.4701971, dtype=float64))
rho0_b = (Array(1.16474765e-13, dtype=float64), Array(1561.47019709, dtype=float64))
gamma_a = (Array(6.83811728e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_b = (Array(6.83811477e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
gamma_ab = (Array(6.83811603e-26, dtype=float64), Array(2.73154427e+09, dtype=float64))
tau_a = (Array(7.41738348e-14, dtype=float64), Array(239519.29876293, dtype=float64))
tau_b = (Array(7.41738193e-14, dtype=float64), Array(239519.29876104, dtype=float64))
retrho shape: (8552, 9)
refexc shape: (8552,)
mol:  [['Li', array([0.      , 0.      , 0.403632])], ['H', array([ 0.      ,  0.      , -1.210897])]]
converged SCF energy = -8.04458854018922  <S^2> = 7.6605389e-14  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c146320> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c146320> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 29, 29)
ao.shape (10, 6936, 29)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00280242 -0.0029288  -0.0029288  ... -0.41296789 -0.41296789
 -0.41296789] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 6936), rho_b.shape=(6, 6936)
exc_a.shape=(6936,), exc_b.shape=(6936,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 6936), fxc.shape=(6936,)
get_data, dm shape = (2, 29, 29)
ao_eval.shape=(4, 6936, 29)
get_rhos2 stats: mins/maxs
rho0_a = (Array(1.1956466e-09, dtype=float64), Array(6.49224216, dtype=float64))
rho0_b = (Array(1.19564647e-09, dtype=float64), Array(6.49224223, dtype=float64))
gamma_a = (Array(6.99865839e-19, dtype=float64), Array(1296.00260034, dtype=float64))
gamma_b = (Array(6.99867634e-19, dtype=float64), Array(1296.00262925, dtype=float64))
gamma_ab = (Array(6.99866736e-19, dtype=float64), Array(1296.00261479, dtype=float64))
tau_a = (Array(7.59635231e-11, dtype=float64), Array(28.56238368, dtype=float64))
tau_b = (Array(7.5963734e-11, dtype=float64), Array(28.56238403, dtype=float64))
retrho shape: (6936, 9)
refexc shape: (6936,)
mol:  [['Na', array([0.        , 0.        , 1.50747901])], ['Na', array([ 0.        ,  0.        , -1.50747901])]]
converged SCF energy = -324.340512506578  <S^2> = 1.5862867e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c147fa0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c147fa0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 11536, 60)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00664295 -0.00664295 -0.00843917 ... -0.00664295 -0.00664295
 -0.00843917] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 11536), rho_b.shape=(6, 11536)
exc_a.shape=(11536,), exc_b.shape=(11536,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 11536), fxc.shape=(11536,)
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 11536, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.52246293e-10, dtype=float64), Array(403.20885679, dtype=float64))
rho0_b = (Array(2.52300149e-10, dtype=float64), Array(403.20885662, dtype=float64))
gamma_a = (Array(6.89938397e-19, dtype=float64), Array(74474467.6558491, dtype=float64))
gamma_b = (Array(6.90222033e-19, dtype=float64), Array(74474467.43498126, dtype=float64))
gamma_ab = (Array(6.900802e-19, dtype=float64), Array(74474467.54541518, dtype=float64))
tau_a = (Array(9.39053862e-10, dtype=float64), Array(25611.04602866, dtype=float64))
tau_b = (Array(9.39060981e-10, dtype=float64), Array(25611.04594205, dtype=float64))
retrho shape: (11536, 9)
refexc shape: (11536,)
mol:  [['Al', array([0., 0., 0.])], ['Cl', array([0.        , 2.08019101, 0.        ])], ['Cl', array([ 1.80149801, -1.040095  ,  0.        ])], ['Cl', array([-1.80149801, -1.040095  ,  0.        ])]]
converged SCF energy = -1622.57507845814  <S^2> = 8.3488771e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c145c30> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c145c30> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 120, 120)
ao.shape (10, 24512, 120)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-9.24414694e-04 -1.96285905e-03 -4.54269432e-03 ... -6.13261799e+00
 -6.13261799e+00 -6.13261799e+00] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 24512), rho_b.shape=(6, 24512)
exc_a.shape=(24512,), exc_b.shape=(24512,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 24512), fxc.shape=(24512,)
get_data, dm shape = (2, 120, 120)
ao_eval.shape=(4, 24512, 120)
get_rhos2 stats: mins/maxs
rho0_a = (Array(2.46952787e-13, dtype=float64), Array(1561.49823004, dtype=float64))
rho0_b = (Array(2.46953012e-13, dtype=float64), Array(1561.49822975, dtype=float64))
gamma_a = (Array(3.44377657e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_b = (Array(3.44378235e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
gamma_ab = (Array(3.44377946e-25, dtype=float64), Array(2.73128852e+09, dtype=float64))
tau_a = (Array(1.76995542e-13, dtype=float64), Array(239490.70443847, dtype=float64))
tau_b = (Array(1.76995676e-13, dtype=float64), Array(239490.70434005, dtype=float64))
retrho shape: (24512, 9)
refexc shape: (24512,)
mol:  [['P', array([0.      , 0.      , 0.128906])], ['H', array([ 0.      ,  1.19333 , -0.644531])], ['H', array([ 1.033455, -0.596665, -0.644531])], ['H', array([-1.033455, -0.596665, -0.644531])]]
converged SCF energy = -342.979728469575  <S^2> = 2.5393021e-11  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c1477c0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c1477c0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 51, 51)
ao.shape (10, 13096, 51)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-3.12429067e-03 -1.72805857e-03 -3.47612003e-04 ... -1.45346571e+00
 -1.45346571e+00 -1.45346571e+00] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 13096), rho_b.shape=(6, 13096)
exc_a.shape=(13096,), exc_b.shape=(13096,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 13096), fxc.shape=(13096,)
get_data, dm shape = (2, 51, 51)
ao_eval.shape=(4, 13096, 51)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.01629307e-12, dtype=float64), Array(1058.86187873, dtype=float64))
rho0_b = (Array(4.01622475e-12, dtype=float64), Array(1058.86187689, dtype=float64))
gamma_a = (Array(6.24753832e-23, dtype=float64), Array(9.1992722e+08, dtype=float64))
gamma_b = (Array(6.24732653e-23, dtype=float64), Array(9.19927223e+08, dtype=float64))
gamma_ab = (Array(6.24743242e-23, dtype=float64), Array(9.19927221e+08, dtype=float64))
tau_a = (Array(1.97470238e-12, dtype=float64), Array(117220.07289163, dtype=float64))
tau_b = (Array(1.97466879e-12, dtype=float64), Array(117220.07268553, dtype=float64))
retrho shape: (13096, 9)
refexc shape: (13096,)
mol:  [['Si', array([0.      , 0.      , 1.135214])], ['Si', array([ 0.      ,  0.      , -1.135214])]]
converged SCF energy = -578.56533656531  <S^2> = 1.0034706  2S+1 = 2.2391701
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c145960> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c145960> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 60, 60)
ao.shape (10, 12384, 60)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00094044 -0.00130984 -0.00130236 ... -0.25567961 -0.25567961
 -0.25567961] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 12384), rho_b.shape=(6, 12384)
exc_a.shape=(12384,), exc_b.shape=(12384,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 12384), fxc.shape=(12384,)
get_data, dm shape = (2, 60, 60)
ao_eval.shape=(4, 12384, 60)
get_rhos2 stats: mins/maxs
rho0_a = (Array(8.43516183e-12, dtype=float64), Array(856.05048834, dtype=float64))
rho0_b = (Array(8.43516184e-12, dtype=float64), Array(856.05048834, dtype=float64))
gamma_a = (Array(2.88176461e-22, dtype=float64), Array(5.06808652e+08, dtype=float64))
gamma_b = (Array(2.88176462e-22, dtype=float64), Array(5.06808652e+08, dtype=float64))
gamma_ab = (Array(2.93965421e-22, dtype=float64), Array(5.06808652e+08, dtype=float64))
tau_a = (Array(4.29394899e-12, dtype=float64), Array(79367.69620957, dtype=float64))
tau_b = (Array(4.293949e-12, dtype=float64), Array(79367.69620957, dtype=float64))
retrho shape: (12384, 9)
refexc shape: (12384,)
mol:  [['C', array([0., 0., 0.])], ['H', array([0.630382, 0.630382, 0.630382])], ['H', array([-0.630382, -0.630382,  0.630382])], ['H', array([ 0.630382, -0.630382, -0.630382])], ['H', array([-0.630382,  0.630382, -0.630382])]]
converged SCF energy = -40.4598214864077  <S^2> = 3.1530334e-13  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c18d540> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c18d540> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 50, 50)
ao.shape (10, 13936, 50)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00295239 -0.00121221 -0.00020691 ... -0.00027028 -0.00027028
 -0.00027028] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 13936), rho_b.shape=(6, 13936)
exc_a.shape=(13936,), exc_b.shape=(13936,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 13936), fxc.shape=(13936,)
get_data, dm shape = (2, 50, 50)
ao_eval.shape=(4, 13936, 50)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.44212404e-12, dtype=float64), Array(59.76454746, dtype=float64))
rho0_b = (Array(4.44211909e-12, dtype=float64), Array(59.76454814, dtype=float64))
gamma_a = (Array(7.40422815e-23, dtype=float64), Array(437657.06370626, dtype=float64))
gamma_b = (Array(7.40421202e-23, dtype=float64), Array(437657.07271681, dtype=float64))
gamma_ab = (Array(7.40422008e-23, dtype=float64), Array(437657.06821154, dtype=float64))
tau_a = (Array(2.21705267e-12, dtype=float64), Array(994.09544356, dtype=float64))
tau_b = (Array(2.21705041e-12, dtype=float64), Array(994.09545666, dtype=float64))
retrho shape: (13936, 9)
refexc shape: (13936,)
mol:  [['C', array([0.      , 0.      , 0.179918])], ['H', array([ 0.      ,  0.855475, -0.539754])], ['H', array([ 0.      , -0.855475, -0.539754])]]
converged SCF energy = -39.0756147483503  <S^2> = 6.2043704e-12  2S+1 = 1
Warning: <pyscf.gto.mole.Mole object at 0x7ffd2c18d4b0> must be initialized before calling SCF.
Initialize <pyscf.gto.mole.Mole object at 0x7ffd2c18d4b0> in UKS object of <class 'pyscf.dft.uks.UKS'>
New DM shape: (2, 36, 36)
ao.shape (10, 9656, 36)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-2.63868890e-03 -4.00273256e-04 -1.08588888e-03 ... -9.42413202e-01
 -9.42413202e-01 -9.42413202e-01] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 9656), rho_b.shape=(6, 9656)
exc_a.shape=(9656,), exc_b.shape=(9656,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 9656), fxc.shape=(9656,)
get_data, dm shape = (2, 36, 36)
ao_eval.shape=(4, 9656, 36)
get_rhos2 stats: mins/maxs
rho0_a = (Array(3.97325576e-13, dtype=float64), Array(60.29192193, dtype=float64))
rho0_b = (Array(3.97312799e-13, dtype=float64), Array(60.2919211, dtype=float64))
gamma_a = (Array(1.45216607e-24, dtype=float64), Array(446896.79345498, dtype=float64))
gamma_b = (Array(1.45209229e-24, dtype=float64), Array(446896.79069891, dtype=float64))
gamma_ab = (Array(1.45212918e-24, dtype=float64), Array(446896.79207694, dtype=float64))
tau_a = (Array(4.14746853e-13, dtype=float64), Array(1005.74223904, dtype=float64))
tau_b = (Array(4.14752919e-13, dtype=float64), Array(1005.74223364, dtype=float64))
retrho shape: (9656, 9)
refexc shape: (9656,)
mol:  [['Si', array([0., 0., 0.])], ['H', array([0.855876, 0.855876, 0.855876])], ['H', array([-0.855876, -0.855876,  0.855876])], ['H', array([-0.855876,  0.855876, -0.855876])], ['H', array([ 0.855876, -0.855876, -0.855876])]]
converged SCF energy = -291.719272437819  <S^2> = 1.3155699e-11  2S+1 = 1
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
New DM shape: (2, 58, 58)
ao.shape (10, 15256, 58)
Exchange contribution only
PBE0 detected. changing xc_func to be combination of HF and PBE
0.25*HF + 0.75*PBE,
spin scaling
exc with xc_func = [-0.00288016 -0.00118217 -0.00020989 ... -0.00022176 -0.00022176
 -0.00022176] = 0.25*HF + 0.75*PBE,
rho_a.shape=(6, 15256), rho_b.shape=(6, 15256)
exc_a.shape=(15256,), exc_b.shape=(15256,)
NOT (mol.spin != 0 and sum(mol.nelec) > 1)
rho.shape=(6, 15256), fxc.shape=(15256,)
get_data, dm shape = (2, 58, 58)
ao_eval.shape=(4, 15256, 58)
get_rhos2 stats: mins/maxs
rho0_a = (Array(4.5975292e-12, dtype=float64), Array(854.88974535, dtype=float64))
rho0_b = (Array(4.59745479e-12, dtype=float64), Array(854.88973823, dtype=float64))
gamma_a = (Array(7.56370859e-23, dtype=float64), Array(5.05221649e+08, dtype=float64))
gamma_b = (Array(7.56346804e-23, dtype=float64), Array(5.0522164e+08, dtype=float64))
gamma_ab = (Array(7.56358831e-23, dtype=float64), Array(5.05221645e+08, dtype=float64))
tau_a = (Array(2.07913851e-12, dtype=float64), Array(79243.89454595, dtype=float64))
tau_b = (Array(2.07910628e-12, dtype=float64), Array(79243.89351869, dtype=float64))
retrho shape: (15256, 9)
refexc shape: (15256,)
Epoch 0
Step = 0: initializing inp_model and inp_opt_state.
Epoch 0 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 170
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306537f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304fbe70; to 'JaxprTracer' at 0x7ffc304fbd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e4770a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 0
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(-0.5753858951066873, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.5753859, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bbb20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10159530; to 'JaxprTracer' at 0x7ffc10158310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38bf61d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 0
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(-0.29434122725915457, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.29434123, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fb690>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd055f420; to 'JaxprTracer' at 0x7ffbd055f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48964130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 558
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0343130>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb019a340; to 'JaxprTracer' at 0x7ffbb019a750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c32ac80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 0
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(-0.4874644206529385, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.48746442, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070aad0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705d4310; to 'JaxprTracer' at 0x7ffb7075fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55825ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28a190>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5040bbf0; to 'JaxprTracer' at 0x7ffb5040bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bc8d0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 0
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(0.6599345647406523, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.65993456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd42931a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026ccc0; to 'JaxprTracer' at 0x7ffb304fea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ccedbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 172
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d86e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30305da0; to 'JaxprTracer' at 0x7ffb30305d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6488ded0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 0
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(-0.2723236268418566, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.27232363, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cd480>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28184e50; to 'JaxprTracer' at 0x7ffb28184cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66b0de80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 0
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(-0.552823082807577, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.55282308, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da920>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07536a0; to 'JaxprTracer' at 0x7ffad0753510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b1b7dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 0
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(-0.40402235353085586, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.40402235, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055eb60>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab05ec090; to 'JaxprTracer' at 0x7ffab05ecb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x728b0c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 0
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(-0.5004049953833882, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.500405, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10186ea0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9844be70; to 'JaxprTracer' at 0x7ffa983f5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77d48e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 0
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(-0.5213771427468411, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.52137714, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cacc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70285c60; to 'JaxprTracer' at 0x7ffa70285fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e0ace60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 0
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(3.886146618186588, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(3.88614662, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022e100>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500c0b80; to 'JaxprTracer' at 0x7ffa500c0cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83f0b1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 0
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(-0.44043470866355655, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.44043471, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675420>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301aad90; to 'JaxprTracer' at 0x7ffa301ab600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x885abd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 0
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(-0.502986669735505, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.50298667, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a6330>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0876ae80; to 'JaxprTracer' at 0x7ffa1030c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cbbf710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 0
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(-0.4577796172012169, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.45777962, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9160>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06c4900; to 'JaxprTracer' at 0x7ff9d064f970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9026d760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 0
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(-0.519465564657977, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.51946556, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284177a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788d394e0; to 'JaxprTracer' at 0x7ff788d397b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91be5680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 0
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(2.6991747449313204, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(2.69917474, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2ca0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71464c450; to 'JaxprTracer' at 0x7ff71464c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9659fb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(-0.4735411620271364, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.47354116, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079f480>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714146e30; to 'JaxprTracer' at 0x7ff714146f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f09dcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 0
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(-3.1719148909490538, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-3.17191489, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847cd10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71372fab0; to 'JaxprTracer' at 0x7ff71372f970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4839aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 0
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(3.02778504535604, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(3.02778505, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055e9c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71303d8f0; to 'JaxprTracer' at 0x7ff71303d760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5189bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 0
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(0.7829143741734398, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.78291437, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb903820a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125ceb60; to 'JaxprTracer' at 0x7ff7125ce9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa25e2e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 0
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(1.297281060049059, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(1.29728106, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719280>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6e8b80; to 'JaxprTracer' at 0x7ff70c6e89f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb27d4750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 0
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(-0.39181621941809525, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.39181622, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f7bf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf43b50; to 'JaxprTracer' at 0x7ff70bf43dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2763cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 0
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(-0.4179455992004915, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(-0.4179456, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b54a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb6aca0; to 'JaxprTracer' at 0x7ff70bb6b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbfca350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 0
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(0.356636200098107, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(0.3566362, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88646960>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b110d60; to 'JaxprTracer' at 0x7ff70b3f4130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7f789b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 10.604812145551087
0, epoch_train_loss=10.604812145551087
Epoch 1
Epoch 1 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dc9c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4f5d50; to 'JaxprTracer' at 0x7ff70c4f71a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72ce56f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5220>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71323b1a0; to 'JaxprTracer' at 0x7ff7132ff100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e2431e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672810>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122aa2a0; to 'JaxprTracer' at 0x7ff7122a8d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24cf0b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b42d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714828860; to 'JaxprTracer' at 0x7ff71482a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58e06c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f7720>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa084400e0; to 'JaxprTracer' at 0x7ffa08443830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53885eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ef30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50137b50; to 'JaxprTracer' at 0x7ffa50137510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b11d920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760270>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70230fe0; to 'JaxprTracer' at 0x7ffa70504ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6af4bbd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0762ca0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd076c450; to 'JaxprTracer' at 0x7ffbd076cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b0e9380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d8c70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0650040; to 'JaxprTracer' at 0x7ffab0650db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48401840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557090>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0707ba0; to 'JaxprTracer' at 0x7ffad0705580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x245de7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce63af0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28619ad0; to 'JaxprTracer' at 0x7ffb28618130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xde14230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2960>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5021ccc0; to 'JaxprTracer' at 0x7ffc5021d350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d6d4d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672be0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5040b290; to 'JaxprTracer' at 0x7ffb50193ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10f97200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4eb0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703ff380; to 'JaxprTracer' at 0x7ffb703fd850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x346cfff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3740>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9066c180; to 'JaxprTracer' at 0x7ffb90394360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cdd60e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0125d10>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03f8400; to 'JaxprTracer' at 0x7ffbb03fa4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7bdd9790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876bd60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0737a60; to 'JaxprTracer' at 0x7ffbb03c85e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ab10410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1e10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0383920; to 'JaxprTracer' at 0x7ffbf0381620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d541170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261c50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1039c270; to 'JaxprTracer' at 0x7ffbf013e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2dea070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676a40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30592980; to 'JaxprTracer' at 0x7ffc30592610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ea62730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70709c80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506dcc70; to 'JaxprTracer' at 0x7ffc506dea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d12f850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022ff70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902662f0; to 'JaxprTracer' at 0x7ffc502e4ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c770150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08664820>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb021d8a0; to 'JaxprTracer' at 0x7ffcb021dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x576da770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139710>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06aed90; to 'JaxprTracer' at 0x7ffcb07b00e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x347e3ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0220870>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c1f5b20; to 'JaxprTracer' at 0x7ffd2c1f4860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4110b860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf06272b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd021a3e0; to 'JaxprTracer' at 0x7ffbd021aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e395460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8db790>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd420e5c0; to 'JaxprTracer' at 0x7ffcd420c6d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89085440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
1, epoch_train_loss=3.2796184744785317
Epoch 2
Epoch 2 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4293c30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0693100; to 'JaxprTracer' at 0x7ffcb0691df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ad5a0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882dadd0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88316c00; to 'JaxprTracer' at 0x7ffc883176f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e850af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b8af0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c35b0; to 'JaxprTracer' at 0x7ffc102c2b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x575cd780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cb9d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03dec50; to 'JaxprTracer' at 0x7ffbf03df650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d55f260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f6b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907f2cf0; to 'JaxprTracer' at 0x7ffb907f18f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4f7b860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676d40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb506689a0; to 'JaxprTracer' at 0x7ffb50668e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41ee0d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3820>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30307a10; to 'JaxprTracer' at 0x7ffb303044a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2de34420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0360>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2861be70; to 'JaxprTracer' at 0x7ffb2861a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2fbe4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415850>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa986233d0; to 'JaxprTracer' at 0x7ffa98622570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x346e57b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bf80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa984b03b0; to 'JaxprTracer' at 0x7ffa984b0fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2eb2fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4bb0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70269c60; to 'JaxprTracer' at 0x7ffa702693a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x840b5570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e23d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303c7740; to 'JaxprTracer' at 0x7ffa507c2840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ea3120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b570>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080d1c60; to 'JaxprTracer' at 0x7ffa080d2de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22374f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0342530>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04444a0; to 'JaxprTracer' at 0x7ff9d0447b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49cade40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70709330>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148b8450; to 'JaxprTracer' at 0x7ff7148b9530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47f302e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677740>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712004270; to 'JaxprTracer' at 0x7ff712005120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9187cb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c05d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326f6f0; to 'JaxprTracer' at 0x7ff71326fa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29b58520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414990>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b49a80; to 'JaxprTracer' at 0x7ff712b49e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8be4f510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e940>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7126337e0; to 'JaxprTracer' at 0x7ff7126318a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3063ce20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847edb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4276890; to 'JaxprTracer' at 0x7ff70b8a6390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97b35190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b0920>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30775a80; to 'JaxprTracer' at 0x7ffb30775b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c332070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f74c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07d09a0; to 'JaxprTracer' at 0x7ffab07d1bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87ebaf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90383c10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083a04a0; to 'JaxprTracer' at 0x7ffa083a2ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c7a2f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719fe0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713953010; to 'JaxprTracer' at 0x7ffa5016c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8396b7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5db0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb021cd10; to 'JaxprTracer' at 0x7ffcb021fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b8be280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671110>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7143ca160; to 'JaxprTracer' at 0x7ffd2c1f7a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4877d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055f800>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8867ae30; to 'JaxprTracer' at 0x7ff70c212f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x963b5f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
2, epoch_train_loss=3.2796184744785317
Epoch 3
Epoch 3 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651720>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788867380; to 'JaxprTracer' at 0x7ff788865cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xdf13750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2634e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70449f30; to 'JaxprTracer' at 0x7ffb704489f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8029740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e42f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c968270; to 'JaxprTracer' at 0x7ff70c9682c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc5a3d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7146705f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137f8bd0; to 'JaxprTracer' at 0x7ff7137fac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17c22cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b5ab0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00ad850; to 'JaxprTracer' at 0x7ffcb00ad8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3469d5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b0070>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0813aed0; to 'JaxprTracer' at 0x7ffa08139ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38c50990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124500>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102dc360; to 'JaxprTracer' at 0x7ffa102dcf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12735c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760180>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303c6ac0; to 'JaxprTracer' at 0x7ffa303c4360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33d0a640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d8870>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa704d68e0; to 'JaxprTracer' at 0x7ffa704d65c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc07480c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c3d10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98209fd0; to 'JaxprTracer' at 0x7ffa9820a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7012d3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0222800>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08150d60; to 'JaxprTracer' at 0x7ffb08153560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x434a4c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce61fa0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce5cb80; to 'JaxprTracer' at 0x7ff70ce5c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c0a09c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6540>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30460400; to 'JaxprTracer' at 0x7ff712fadc10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd08fcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670ed0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70699440; to 'JaxprTracer' at 0x7ffb7069ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b91c5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5270>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7022e9d0; to 'JaxprTracer' at 0x7ffb7022d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c018ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847de20>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90465b20; to 'JaxprTracer' at 0x7ffb90464360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xceb2b700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0763840>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd059a1b0; to 'JaxprTracer' at 0x7ffbd05c3560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4930d020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768f00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1039d940; to 'JaxprTracer' at 0x7ffc1039de40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53a6d800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184ed0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712e4df80; to 'JaxprTracer' at 0x7ff712e4c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb3092d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a52d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c33cb30; to 'JaxprTracer' at 0x7ffd2c33ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcee4a7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0960>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906f1a80; to 'JaxprTracer' at 0x7ffc902f9940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e5f5dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706747e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd47a44a0; to 'JaxprTracer' at 0x7ffcb04be3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d023590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec31d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712aaa570; to 'JaxprTracer' at 0x7ffd2c0a1da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97759ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa501384f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083a10d0; to 'JaxprTracer' at 0x7ffa083a2c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcfafa130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847f7f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30396ca0; to 'JaxprTracer' at 0x7ffc30394e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcfab8df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cbce0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98652390; to 'JaxprTracer' at 0x7ff70ba9d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41660b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feea70>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f8d850; to 'JaxprTracer' at 0x7ff712f8e2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dced730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
3, epoch_train_loss=3.2796184744785317
Epoch 4
Epoch 4 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0064e90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa505cd8f0; to 'JaxprTracer' at 0x7ffa505cf470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a6564d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e43a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02b3790; to 'JaxprTracer' at 0x7ffcb02b1d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39d1b350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bb100>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106cfe20; to 'JaxprTracer' at 0x7ffc106cf7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4da67910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c93e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0346d90; to 'JaxprTracer' at 0x7ffbf0347c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x614b2370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022fdf0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03614e0; to 'JaxprTracer' at 0x7ffbb0361710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42cfbab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675700>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50669170; to 'JaxprTracer' at 0x7ffb50669760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfaddc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0320>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712820360; to 'JaxprTracer' at 0x7ff712823fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x443ddd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3440>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788916ac0; to 'JaxprTracer' at 0x7ff788916110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b24fc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb087695b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01a05e0; to 'JaxprTracer' at 0x7ffab01a21b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcccf2600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08665ca0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70762e30; to 'JaxprTracer' at 0x7ffab0382020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35fa11c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bfc10>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50599760; to 'JaxprTracer' at 0x7ffa5059b290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bb82b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882dbbc0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03ee660; to 'JaxprTracer' at 0x7ffcb03ee2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x545d8980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8800>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080d1f80; to 'JaxprTracer' at 0x7ffa080d32e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9044cc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382150>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10565b70; to 'JaxprTracer' at 0x7ffa10567bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6297900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719fe0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7143a5080; to 'JaxprTracer' at 0x7ffa0836d7b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5152f9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677c00>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fd8fe0; to 'JaxprTracer' at 0x7ff712344bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87a409d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1180>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b65b20; to 'JaxprTracer' at 0x7ff788b662a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9faf5620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9990>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71285c860; to 'JaxprTracer' at 0x7ff71285c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d3e3320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e04c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c55ae80; to 'JaxprTracer' at 0x7ff70c559350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3db98b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847e690>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c530db0; to 'JaxprTracer' at 0x7ff70c533920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38ce3430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b0ae0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cace00; to 'JaxprTracer' at 0x7ff713cac040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc84e0a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50138570>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134d03b0; to 'JaxprTracer' at 0x7ff7134d3b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43451c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341ec0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90443ab0; to 'JaxprTracer' at 0x7ffc906f16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3919fb70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070a4c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0439f80; to 'JaxprTracer' at 0x7ffcb0438f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62f6f480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d39f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0397920; to 'JaxprTracer' at 0x7ffbb0395710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd04aadf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557510>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c054e50; to 'JaxprTracer' at 0x7ffd2c057d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79034e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8dad60>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05e9580; to 'JaxprTracer' at 0x7ffbb05e97b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79021ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
4, epoch_train_loss=3.2796184744785317
Epoch 5
Epoch 5 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0763e40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd47a4e00; to 'JaxprTracer' at 0x7ffcd47a47c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfada7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184450>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137c94e0; to 'JaxprTracer' at 0x7ff7137ca250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d8114a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261e40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712e1df80; to 'JaxprTracer' at 0x7ff712e1d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37fdbe40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e52c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712dc6c00; to 'JaxprTracer' at 0x7ff712dc7b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35f51440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1760>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122e6570; to 'JaxprTracer' at 0x7ff7122e7d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c4ac8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2160>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa086224d0; to 'JaxprTracer' at 0x7ffa08622930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52c82630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0126b30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50137f10; to 'JaxprTracer' at 0x7ffa501363e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc6df0b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416fa0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50790180; to 'JaxprTracer' at 0x7ffa50792f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d23cef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768df0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98299c10; to 'JaxprTracer' at 0x7ffa9829af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46b7c2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708556640>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04fc130; to 'JaxprTracer' at 0x7ffad04fc3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa23b55a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f7dd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08205bc0; to 'JaxprTracer' at 0x7ffb08205b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b5c9d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6ddcd0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf063bce0; to 'JaxprTracer' at 0x7ffbf063bbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29ef4e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62e10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce5c130; to 'JaxprTracer' at 0x7ffd2c19b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8427c530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e48b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c455ad0; to 'JaxprTracer' at 0x7ffd2c455b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x627c9c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec0aa0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907a2c50; to 'JaxprTracer' at 0x7ffb907a1d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7299d240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079c650>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01706d0; to 'JaxprTracer' at 0x7ffbd0172fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x389ed480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416960>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03af600; to 'JaxprTracer' at 0x7ffbd03ae070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x389e5160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28aa20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88706bb0; to 'JaxprTracer' at 0x7ffc88704a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xca525450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce3760>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50644a90; to 'JaxprTracer' at 0x7ffc506454e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bb96c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d3490>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88448c20; to 'JaxprTracer' at 0x7ffc8844b3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62244c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5ef0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30303dd0; to 'JaxprTracer' at 0x7ffc30301f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b624290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707082a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4402610; to 'JaxprTracer' at 0x7ffcd4401710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57a8f230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5670>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5016c630; to 'JaxprTracer' at 0x7ffa5016f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d29c820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4390>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0813b3d0; to 'JaxprTracer' at 0x7ffa0813bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d275020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847e440>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90297970; to 'JaxprTracer' at 0x7ffc90296980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x520ef740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f9290>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28166840; to 'JaxprTracer' at 0x7ffb28166a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbdd75630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055dfc0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb0849cfe0; to 'JaxprTracer' at 0x7ffb0849d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3372d210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
5, epoch_train_loss=3.2796184744785317
Epoch 6
Epoch 6 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904ce400>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90467fb0; to 'JaxprTracer' at 0x7ffb90464f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f45c5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be4f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa505cd940; to 'JaxprTracer' at 0x7ffa505cd350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab0c6170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882db700>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03facf0; to 'JaxprTracer' at 0x7ffbb03f98a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x598b7e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb03409f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03dfbf0; to 'JaxprTracer' at 0x7ffbf03de7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cfb16f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718a30>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0738040; to 'JaxprTracer' at 0x7ffbb073b970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3117ad60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3130>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50191e40; to 'JaxprTracer' at 0x7ffb50191120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a7e1580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28a870>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce5c5e0; to 'JaxprTracer' at 0x7ff70ce5f880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32cafc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28b6e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712822930; to 'JaxprTracer' at 0x7ff712822e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9be83e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce0eb0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa982091c0; to 'JaxprTracer' at 0x7ffa9820be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a358d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013bea0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06eec00; to 'JaxprTracer' at 0x7ffbd06ecea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33d46800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08666d00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa502ba020; to 'JaxprTracer' at 0x7ffa502baca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67230950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e65e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd47632e0; to 'JaxprTracer' at 0x7ffcd4762f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf508c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b84c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0840c1d0; to 'JaxprTracer' at 0x7ffa0840cf40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x471d4fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb903831f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e3dd00; to 'JaxprTracer' at 0x7ff788e3f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x440465d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071aa60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71417c180; to 'JaxprTracer' at 0x7ff71417e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac20f5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2530>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085911c0; to 'JaxprTracer' at 0x7ff708590130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8caceb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769a80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc507c7790; to 'JaxprTracer' at 0x7ffc507c4d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77e59620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124de0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506aa700; to 'JaxprTracer' at 0x7ffb280f13f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f05e140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676800>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2838c400; to 'JaxprTracer' at 0x7ffb2838ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf451f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b1430>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2835eac0; to 'JaxprTracer' at 0x7ffb2835ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a87b7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b6920>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6e8d10; to 'JaxprTracer' at 0x7ff70c6e91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2d4f4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7146711c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa702844a0; to 'JaxprTracer' at 0x7ffa70286e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x84241f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022efe0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0794040; to 'JaxprTracer' at 0x7ffc8829de40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ba3b210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4e60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5016fa60; to 'JaxprTracer' at 0x7ffa5016d300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2615a950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e3060>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0638bd0; to 'JaxprTracer' at 0x7ffbf0638f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c31b740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd02236d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c240450; to 'JaxprTracer' at 0x7ff70c2400e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x320d7880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fecdb0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507175b0; to 'JaxprTracer' at 0x7ffb50717a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c28af60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
6, epoch_train_loss=3.2796184744785317
Epoch 7
Epoch 7 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085555e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90232930; to 'JaxprTracer' at 0x7ffc90231ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12568560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0763a00>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b4a890; to 'JaxprTracer' at 0x7ff712583150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e3e02f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184fd0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306aee30; to 'JaxprTracer' at 0x7ffc306acdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd9b2df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263f90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b728bd0; to 'JaxprTracer' at 0x7ff70b72a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5534f6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4190>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d9a660; to 'JaxprTracer' at 0x7ff712d9a520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f533ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b1b70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788833f10; to 'JaxprTracer' at 0x7ff788830b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f5d11d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ee50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5008ca40; to 'JaxprTracer' at 0x7ffc5008f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7466ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124dc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c1f5850; to 'JaxprTracer' at 0x7ffd2c1f7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d7bb7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416270>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105654e0; to 'JaxprTracer' at 0x7ffa10565530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x580e9690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d8540>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98703f60; to 'JaxprTracer' at 0x7ffa98703e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2ea4ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fa6b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01a3880; to 'JaxprTracer' at 0x7ffab01a11c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd2129f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653280>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c3f2430; to 'JaxprTracer' at 0x7ffd2c3f3ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd0f3b5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6ded60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025e4d0; to 'JaxprTracer' at 0x7ffcb025dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e222730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262660>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302a6200; to 'JaxprTracer' at 0x7ffb302a4770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb60b0af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a51b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703ca200; to 'JaxprTracer' at 0x7ffb505eda30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1df7bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3b30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888e4630; to 'JaxprTracer' at 0x7ffb705d4810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20d73020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124730>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf059cb30; to 'JaxprTracer' at 0x7ffbf059c0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x545a1300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417060>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3036b1f0; to 'JaxprTracer' at 0x7ffc30331b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x480ff6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070ad10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1057cdb0; to 'JaxprTracer' at 0x7ffc884c77e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc9a3500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0f90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc305915d0; to 'JaxprTracer' at 0x7ffc305938d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x414684f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4f20>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd424bc90; to 'JaxprTracer' at 0x7ffcd42485e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd44b330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719250>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28409300; to 'JaxprTracer' at 0x7ffb2840a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c1406a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804c00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2812d620; to 'JaxprTracer' at 0x7ffb2812e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd08c8f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec21f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9064e110; to 'JaxprTracer' at 0x7ffa5016e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56e39d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079d680>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf06013a0; to 'JaxprTracer' at 0x7ffbf0603060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0a7060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca3a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c3c040; to 'JaxprTracer' at 0x7ff713c3eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bb966f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8dada0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0696d90; to 'JaxprTracer' at 0x7ff70bf88860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xacf36d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
7, epoch_train_loss=3.2796184744785317
Epoch 8
Epoch 8 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62bb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d30b0; to 'JaxprTracer' at 0x7ffb302d1f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2997d1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086659e0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07b1e40; to 'JaxprTracer' at 0x7ffcb07b26b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc718d9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055da80>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50047b00; to 'JaxprTracer' at 0x7ffc500453a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x136b0ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b9270>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0106ac0; to 'JaxprTracer' at 0x7ffbf0104b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c028e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90381890>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0537420; to 'JaxprTracer' at 0x7ffc303309f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x616914f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1e10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc884e9620; to 'JaxprTracer' at 0x7ffc884ebf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69abc7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706771c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134d2f70; to 'JaxprTracer' at 0x7ff7134d0310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61851fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70674f60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa507c2570; to 'JaxprTracer' at 0x7ffa507c36a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x834d9930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce0ab0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0757330; to 'JaxprTracer' at 0x7ffab0754bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55ddaad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473c800>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b6d5490; to 'JaxprTracer' at 0x7ffa70328d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b65c750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50138a00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502e7240; to 'JaxprTracer' at 0x7ff714145710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x447b7440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd42903f0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30458450; to 'JaxprTracer' at 0x7ffa102dfb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bb60230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4810>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105c1df0; to 'JaxprTracer' at 0x7ffa105c06d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72e116e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb03438b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01a6ca0; to 'JaxprTracer' at 0x7ff9d01a6a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa24e0a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0830>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d017ca40; to 'JaxprTracer' at 0x7ff9d017c680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4c7f130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3960>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e5a30; to 'JaxprTracer' at 0x7ff7139e67f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cb40c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415d30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b69d940; to 'JaxprTracer' at 0x7ff70b8a7fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31d0a650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070ada0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127ed9e0; to 'JaxprTracer' at 0x7ff7127ee700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38aa17e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670520>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5312b0; to 'JaxprTracer' at 0x7ff70c531300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71724700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b27f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a3420; to 'JaxprTracer' at 0x7ff70c1a0770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c43a780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1260>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10514860; to 'JaxprTracer' at 0x7ffb501c3920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc998570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7c20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98652430; to 'JaxprTracer' at 0x7ffa986505e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b206e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022d1b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88317010; to 'JaxprTracer' at 0x7ffc88314b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13957560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5350>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9011dbc0; to 'JaxprTracer' at 0x7ffc9011e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55367920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0223c00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139b2e80; to 'JaxprTracer' at 0x7ff7085acc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbc6fdc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10185fb0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f8e7a0; to 'JaxprTracer' at 0x7ff71466d760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52c1e500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055cd50>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30461c60; to 'JaxprTracer' at 0x7ff712d84590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55390c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
8, epoch_train_loss=3.2796184744785317
Epoch 9
Epoch 9 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c95f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10597060; to 'JaxprTracer' at 0x7ffa10594180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x19ac6a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0763d30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8ffc40; to 'JaxprTracer' at 0x7ff70b8fc0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcec3e1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101849c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712e1e610; to 'JaxprTracer' at 0x7ff712e1c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bfca570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712806960>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b729120; to 'JaxprTracer' at 0x7ff70b72bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b7ff1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2100>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71231a7f0; to 'JaxprTracer' at 0x7ff7123190d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20f33460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079dc70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107cd080; to 'JaxprTracer' at 0x7ffa107cc9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fa3b8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707090e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306d59e0; to 'JaxprTracer' at 0x7ffa306d4720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49834760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2bc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03eeb10; to 'JaxprTracer' at 0x7ffcb03edfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540eb110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670570>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa982990d0; to 'JaxprTracer' at 0x7ff714145300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc534a580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0126aa0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0721f30; to 'JaxprTracer' at 0x7ffab07239c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35eb4b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708556060>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb084dec00; to 'JaxprTracer' at 0x7ffb084dce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xad094b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652160>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06571f0; to 'JaxprTracer' at 0x7ff9d0657470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11611b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0221ad0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025f6a0; to 'JaxprTracer' at 0x7ffb7078d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2320740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4d20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507043b0; to 'JaxprTracer' at 0x7ffb507040e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x319a5fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1270>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70474450; to 'JaxprTracer' at 0x7ffb7075e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e2bb4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079d6a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03c9df0; to 'JaxprTracer' at 0x7ffbb03cb6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35f7e960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2140>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc305780e0; to 'JaxprTracer' at 0x7ffbf0565490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c5be5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673fc0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70546700; to 'JaxprTracer' at 0x7ffc306d3e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c657d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bdcf0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02b0900; to 'JaxprTracer' at 0x7ffcb02b38d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc8a8d240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0720>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb044ee30; to 'JaxprTracer' at 0x7ffcb044e980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3271ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d2a20>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07a0ae0; to 'JaxprTracer' at 0x7ffbb07a2a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20e480d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90380d30>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf06389f0; to 'JaxprTracer' at 0x7ffd2c2f5c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15c57970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5220>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707900e0; to 'JaxprTracer' at 0x7ffc904c93f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26198a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b5b40>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026de90; to 'JaxprTracer' at 0x7ffb3026d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b7f3a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847f780>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcaed90; to 'JaxprTracer' at 0x7ff70bcae980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcdc09c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055f9e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107253a0; to 'JaxprTracer' at 0x7ffab07d1ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x431ae2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fedb30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d066dbc0; to 'JaxprTracer' at 0x7ff9d066dcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x977fe870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
9, epoch_train_loss=3.2796184744785317
Epoch 10
Epoch 10 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce63070>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902319e0; to 'JaxprTracer' at 0x7ffc902306d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b97b100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086666b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709acaed0; to 'JaxprTracer' at 0x7ff709ac8d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xdbaac70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055ce10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5028b790; to 'JaxprTracer' at 0x7ffc5028a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c1d6690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022e360>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a08bd0; to 'JaxprTracer' at 0x7ff713a0a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87d020d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d3600>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb503c16c0; to 'JaxprTracer' at 0x7ffb503c20c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x532be5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1040>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30111ad0; to 'JaxprTracer' at 0x7ffb30110540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cb67560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769e70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132cc6d0; to 'JaxprTracer' at 0x7ff7132cf4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6002b8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876ada0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134d01d0; to 'JaxprTracer' at 0x7ff7134d1c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eab6fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2450>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab078d4e0; to 'JaxprTracer' at 0x7ffab078da80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7174b5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb507187d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f4a40; to 'JaxprTracer' at 0x7ffab0721e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81e884d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce60a90>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90443330; to 'JaxprTracer' at 0x7ffcb008fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e339a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd710>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1057c860; to 'JaxprTracer' at 0x7ffc1057c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3da10730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4d40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa304589a0; to 'JaxprTracer' at 0x7ffa3045bec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x209d9700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb903815a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00ad9e0; to 'JaxprTracer' at 0x7ffcb00aea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xda5f620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c19d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90265e40; to 'JaxprTracer' at 0x7ffc902653f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2330c2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706751c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71231bab0; to 'JaxprTracer' at 0x7ffb701f6f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9057b0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416940>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137fa2a0; to 'JaxprTracer' at 0x7ff70ce23330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41486580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847cc00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712dae7a0; to 'JaxprTracer' at 0x7ff712daf010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x468525f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6ddba0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1e9210; to 'JaxprTracer' at 0x7ff70c1eb4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f213860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b51d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085e37e0; to 'JaxprTracer' at 0x7ff7085e2a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6db2e7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4db0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b37740; to 'JaxprTracer' at 0x7ff788b361b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cd47840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128070b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b9341d0; to 'JaxprTracer' at 0x7ff70b934950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31c8e3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a77d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981e3ce0; to 'JaxprTracer' at 0x7ffcd47a5ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69e6ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c288600>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9069f290; to 'JaxprTracer' at 0x7ffbd055fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39c5cc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652530>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3d94e0; to 'JaxprTracer' at 0x7ff70b3d9170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e6407e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0763cf0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0363600; to 'JaxprTracer' at 0x7ffad03622f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9170ca70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d84e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc100ec040; to 'JaxprTracer' at 0x7ffc100ec4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x614b5010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
10, epoch_train_loss=3.2796184744785317
Epoch 11
Epoch 11 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127270>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712371990; to 'JaxprTracer' at 0x7ff712373b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x521eb3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557660>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135c6200; to 'JaxprTracer' at 0x7ff7135c4d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48346a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651a90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1eb790; to 'JaxprTracer' at 0x7ff70c1eb4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86e1e400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128052c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712dc6340; to 'JaxprTracer' at 0x7ffb283c75b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb633a730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b7a00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714482c50; to 'JaxprTracer' at 0x7ff7144803b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9715b7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847eb70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa087971f0; to 'JaxprTracer' at 0x7ffa08794d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b1e2b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0c80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2812da30; to 'JaxprTracer' at 0x7ffb2812e9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18709ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c09d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03ec360; to 'JaxprTracer' at 0x7ffcb03ef650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x201718e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70674500>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712006d90; to 'JaxprTracer' at 0x7ff712006f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d76a360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707092f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300db240; to 'JaxprTracer' at 0x7ffb300d9e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80c58430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c9200>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb084dc270; to 'JaxprTracer' at 0x7ffb084dc8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b34b100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0761190>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139b2930; to 'JaxprTracer' at 0x7ff7139b2de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e544db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10186da0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0773560; to 'JaxprTracer' at 0x7ffbf0772520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4efde0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4da0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713790360; to 'JaxprTracer' at 0x7ff713792700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a772b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b7ab0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb059fbf0; to 'JaxprTracer' at 0x7ffbb059e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2a23a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847fe90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9074b010; to 'JaxprTracer' at 0x7ffb505ecdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48da1050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c03a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03ac540; to 'JaxprTracer' at 0x7ffbd03ad760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x698dc610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676f50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30117740; to 'JaxprTracer' at 0x7ffc301177e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66498270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0625df0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90494e00; to 'JaxprTracer' at 0x7ffc90497470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bd57040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c288ce0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd0a4d0; to 'JaxprTracer' at 0x7ff70bd080e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3279860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d2390>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb047a020; to 'JaxprTracer' at 0x7ff70c240220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bf3cb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4a80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ae3b00; to 'JaxprTracer' at 0x7ff712ae3010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd08add70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2940>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0648a90; to 'JaxprTracer' at 0x7ffcb0649e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57c85b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b20d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50331760; to 'JaxprTracer' at 0x7ffa50332de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38b684a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055cda0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd424be20; to 'JaxprTracer' at 0x7ffcd4249bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cf7f950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be860>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8864be70; to 'JaxprTracer' at 0x7ff70b3dbe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61e00100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d83c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff78886f8d0; to 'JaxprTracer' at 0x7ff78886fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd337830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
11, epoch_train_loss=3.2796184744785317
Epoch 12
Epoch 12 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce60cf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71255bfb0; to 'JaxprTracer' at 0x7ff7125590d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fbb57b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08664ad0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0625f30; to 'JaxprTracer' at 0x7ff9d0626160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x232b3fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055d9e0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50784810; to 'JaxprTracer' at 0x7ffc50784a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b726180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022eb90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc884c78d0; to 'JaxprTracer' at 0x7ffc884c4b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x380fdfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28ae40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70731df0; to 'JaxprTracer' at 0x7ffb70732430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20ac8590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671b70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025cf40; to 'JaxprTracer' at 0x7ffb7069aa20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35dba9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6de5c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0770db0; to 'JaxprTracer' at 0x7ff7143ca750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xced1f720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0626090>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad05b9b70; to 'JaxprTracer' at 0x7ffad05bade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb83963e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415580>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b70a8e0; to 'JaxprTracer' at 0x7ff70b70abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fd5d630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0064e70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa502b8360; to 'JaxprTracer' at 0x7ffa502bbf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dc22ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa501389b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107746d0; to 'JaxprTracer' at 0x7ffc10777bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e55bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd1e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50414f40; to 'JaxprTracer' at 0x7ffb504174c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57695ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b97e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bfb58f0; to 'JaxprTracer' at 0x7ff70bfb4ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x473cbe70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb903813a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08623330; to 'JaxprTracer' at 0x7ffa08622930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab38b640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0d60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90265c10; to 'JaxprTracer' at 0x7ffc902667a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc8274a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677ad0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4f4130; to 'JaxprTracer' at 0x7ff70c4f6de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x203d0610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0626f60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122e7ec0; to 'JaxprTracer' at 0x7ff7122e62a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc6df7810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce06d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0381170; to 'JaxprTracer' at 0x7ffbf0381080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbe910c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719680>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb021d440; to 'JaxprTracer' at 0x7ffcb021e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d19d740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b1fa0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714851c60; to 'JaxprTracer' at 0x7ff7148515d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c88e030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5cc0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10516340; to 'JaxprTracer' at 0x7ffc10517e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66ee6650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec27a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301744a0; to 'JaxprTracer' at 0x7ffa301762a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e5df120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d2480>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281768e0; to 'JaxprTracer' at 0x7ffb28177b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3ab6e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1120>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa986531a0; to 'JaxprTracer' at 0x7ff71397ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa036bd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676970>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c4564d0; to 'JaxprTracer' at 0x7ffd2c456930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66b74500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6d60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705476a0; to 'JaxprTracer' at 0x7ffa70545620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2444bc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0221870>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0592e80; to 'JaxprTracer' at 0x7ffbf05929d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x201ace10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
12, epoch_train_loss=3.2796184744785317
Epoch 13
Epoch 13 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473faf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1035f330; to 'JaxprTracer' at 0x7ffc1035e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xdcabd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fee150>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9844bd30; to 'JaxprTracer' at 0x7ffa9844a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86ffb4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f9a20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707bf380; to 'JaxprTracer' at 0x7ffa707bc4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1869ec80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4130>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326f970; to 'JaxprTracer' at 0x7ff71326f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e7bac70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2636e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71464c4a0; to 'JaxprTracer' at 0x7ff71464d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e430d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5070>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71482b7e0; to 'JaxprTracer' at 0x7ff714829710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69e182b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079dd70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d02549f0; to 'JaxprTracer' at 0x7ff9d0256d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaab48420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079e210>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0394090; to 'JaxprTracer' at 0x7ffbb0394c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc6b57e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417c00>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01a2c00; to 'JaxprTracer' at 0x7ffbf01a2700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c65bce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5e90>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b346160; to 'JaxprTracer' at 0x7ff70b3453a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22787a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41e210>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280cce00; to 'JaxprTracer' at 0x7ffb08206cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd0940cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070a270>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98689120; to 'JaxprTracer' at 0x7ffa98688180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7370efb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8b60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0151d50; to 'JaxprTracer' at 0x7ffbf0150950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45364f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07629d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712823060; to 'JaxprTracer' at 0x7ff712821f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37788120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101859e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd44d0860; to 'JaxprTracer' at 0x7ffcd44d0ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e714be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6010>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90193510; to 'JaxprTracer' at 0x7ffb90190e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47dba030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079f8e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03c8db0; to 'JaxprTracer' at 0x7ffbb03c8720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3d46e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416280>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30115670; to 'JaxprTracer' at 0x7ffc30114fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c46c1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e7350>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90497bf0; to 'JaxprTracer' at 0x7ffc90497ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x864cb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6de180>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc886783b0; to 'JaxprTracer' at 0x7ffc8867b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc6f88e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676e20>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1027be70; to 'JaxprTracer' at 0x7ffa102789a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51ae86e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0b50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902300e0; to 'JaxprTracer' at 0x7ffcd478f330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xce53bb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653070>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b9351c0; to 'JaxprTracer' at 0x7ff70b934810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c26f2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712806ec0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90294db0; to 'JaxprTracer' at 0x7ffc90294360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bcead90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4ec0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c2f69d0; to 'JaxprTracer' at 0x7ffd2c2f46d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bce8920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7970>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709b0ba60; to 'JaxprTracer' at 0x7ff709b08ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc8b7b790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882db6b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70972d260; to 'JaxprTracer' at 0x7ff70972d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dfdbbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
13, epoch_train_loss=3.2796184744785317
Epoch 14
Epoch 14 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673ef0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c241da0; to 'JaxprTracer' at 0x7ff70c241e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x305fcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50138250>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704a09f0; to 'JaxprTracer' at 0x7ffb704a1210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b8b160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bcdc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5016e110; to 'JaxprTracer' at 0x7ffa5016c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0065e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d3c20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0201580; to 'JaxprTracer' at 0x7ffc90045ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6280a220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e0300>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307a0900; to 'JaxprTracer' at 0x7ffb307a3f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x444fd2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dd710>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107a22a0; to 'JaxprTracer' at 0x7ffc107a05e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc26efc50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0430>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8829e660; to 'JaxprTracer' at 0x7ffc8829dda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cc65b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0fd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9043ad40; to 'JaxprTracer' at 0x7ffb90438e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81e7f7a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce3f90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad02b84a0; to 'JaxprTracer' at 0x7ffad02b9d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c924f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055e340>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712007f60; to 'JaxprTracer' at 0x7ff712007920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33ea2800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00653e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0840df80; to 'JaxprTracer' at 0x7ffa0840cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc27b3620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08665090>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb044d8f0; to 'JaxprTracer' at 0x7ffcb044e930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e8e2fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055c7c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3072ede0; to 'JaxprTracer' at 0x7ffb3072c360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54c50100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382aa0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88479a80; to 'JaxprTracer' at 0x7ffc8847a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40344290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876b880>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06c70b0; to 'JaxprTracer' at 0x7ff9d017fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b10b680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb507190e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d067be70; to 'JaxprTracer' at 0x7ffa080ffd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf86f360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417b40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b72bb00; to 'JaxprTracer' at 0x7ff70b729b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1882faf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5f40>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048c090; to 'JaxprTracer' at 0x7ff712dac270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46ff2f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f360>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0383bf0; to 'JaxprTracer' at 0x7ffbf03837e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b5e6a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4bf0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ae7650; to 'JaxprTracer' at 0x7ffb50448680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8daa6e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184830>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad031dd00; to 'JaxprTracer' at 0x7ffad031fba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22540680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805cf0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0724180; to 'JaxprTracer' at 0x7ffcb0726f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58b4fd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28bbc0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ae04f0; to 'JaxprTracer' at 0x7ff712ae1120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cd064b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677460>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709aca4d0; to 'JaxprTracer' at 0x7ff709acb330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49c58e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071b040>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900db240; to 'JaxprTracer' at 0x7ffc900d9940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60b91420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fb920>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb064a160; to 'JaxprTracer' at 0x7ffa107640e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23b60240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d90f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b897dd0; to 'JaxprTracer' at 0x7ffbb0747d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fe81150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
14, epoch_train_loss=3.2796184744785317
Epoch 15
Epoch 15 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d8200>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306d5da0; to 'JaxprTracer' at 0x7ffa306d5fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2bcb040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341120>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102df1a0; to 'JaxprTracer' at 0x7ffa102de6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaac45680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01249a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712e1d2b0; to 'JaxprTracer' at 0x7ff712e1cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b486ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6ee0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71468aa70; to 'JaxprTracer' at 0x7ff71468b470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc3635c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261c80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122e7380; to 'JaxprTracer' at 0x7ff7145d6c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd0cd7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7cd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71482ab10; to 'JaxprTracer' at 0x7ff71482a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x418756a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079fd00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0254fe0; to 'JaxprTracer' at 0x7ff9d0257470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcfc31ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079f050>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080d0e00; to 'JaxprTracer' at 0x7ffa080d1300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42342950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284163e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd41df060; to 'JaxprTracer' at 0x7ffcd41df4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42de0b60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8280>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07d1c10; to 'JaxprTracer' at 0x7ffa98703ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3b7cd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7eb0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981aefc0; to 'JaxprTracer' at 0x7ffa981ad670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd7418b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41ea90>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281b72e0; to 'JaxprTracer' at 0x7ffa0813b7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab2b41f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70709fd0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd055f3d0; to 'JaxprTracer' at 0x7ffbd055d120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xce2a7370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652440>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7078fab0; to 'JaxprTracer' at 0x7ffb7078c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x573d1d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128072a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50786c00; to 'JaxprTracer' at 0x7ffb50787830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc8524ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b46f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7022c4a0; to 'JaxprTracer' at 0x7ffb7022c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59e12b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4a70>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07a3a10; to 'JaxprTracer' at 0x7ffbf07a1df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1335b4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847cbb0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30670d10; to 'JaxprTracer' at 0x7ffc30672930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23ca0b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec13e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90044360; to 'JaxprTracer' at 0x7ffc90046250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61af8980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718180>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0743560; to 'JaxprTracer' at 0x7ffbf013f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b3e9b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf06271b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704a3e20; to 'JaxprTracer' at 0x7ffb704a28e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d123440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768530>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085056c0; to 'JaxprTracer' at 0x7ff7085076a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x210e2210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0761670>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902e2f70; to 'JaxprTracer' at 0x7ffc902e0590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x448ad570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10186880>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca4ea0; to 'JaxprTracer' at 0x7ff713ca41d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ba95ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4560>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd037d5d0; to 'JaxprTracer' at 0x7ffbd037e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54aec710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055f800>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb01f06d0; to 'JaxprTracer' at 0x7ffc9069de40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ca60c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0223570>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713550310; to 'JaxprTracer' at 0x7ff713550180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4035300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
15, epoch_train_loss=3.2796184744785317
Epoch 16
Epoch 16 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085575d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127ed440; to 'JaxprTracer' at 0x7ff7127ee7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fcb540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cfc60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f7aa70; to 'JaxprTracer' at 0x7ff7141618f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36d8c180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4291160>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcac8b0; to 'JaxprTracer' at 0x7ff70bcac860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcd16430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055ca90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0598ea0; to 'JaxprTracer' at 0x7ffbd059ae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7619cc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90381e90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa507459e0; to 'JaxprTracer' at 0x7ffc50786070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d1e6970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dc080>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30774720; to 'JaxprTracer' at 0x7ffb30776750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61267a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719ae0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122a8b80; to 'JaxprTracer' at 0x7ff7122a8cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c1b1ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c2c70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50332610; to 'JaxprTracer' at 0x7ffa50330c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3132d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847c9f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10595670; to 'JaxprTracer' at 0x7ffa10597ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33af6550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5130>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712006cf0; to 'JaxprTracer' at 0x7ff712007830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e8e12b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce626f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa085c7240; to 'JaxprTracer' at 0x7ffa085c76f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ca7b090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067290>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c78b420; to 'JaxprTracer' at 0x7ff70c78b010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7388150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086642a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bfb7d30; to 'JaxprTracer' at 0x7ff70bfb4ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x161075d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d2670>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50681030; to 'JaxprTracer' at 0x7ffa0816ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x569ba060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e3220>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06c4540; to 'JaxprTracer' at 0x7ff9d06c4400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa39ebec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dcc50>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4f50d0; to 'JaxprTracer' at 0x7ff70c4f51c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314e27c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0690>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122e6610; to 'JaxprTracer' at 0x7ff7122e7240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61058540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417e10>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708531990; to 'JaxprTracer' at 0x7ff708533f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x965ec810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0050>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712e1d530; to 'JaxprTracer' at 0x7ff70c986a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc12dcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce63390>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905c5c10; to 'JaxprTracer' at 0x7ffb905c6b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x696c9ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2100>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50792f20; to 'JaxprTracer' at 0x7ffa50793880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x580791a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7de0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7069ab60; to 'JaxprTracer' at 0x7ffb7069a070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa04359b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28ba10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904948b0; to 'JaxprTracer' at 0x7ffc90494950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1287f360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650260>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0219530; to 'JaxprTracer' at 0x7ffbd021a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b32a470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0627bd0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714688680; to 'JaxprTracer' at 0x7ff714689260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabb5ca40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708410>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c9035b0; to 'JaxprTracer' at 0x7ff70c902070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x580b1e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da7c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb064b6a0; to 'JaxprTracer' at 0x7ffa98263150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33461180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
16, epoch_train_loss=3.2796184744785317
Epoch 17
Epoch 17 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bae90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28409800; to 'JaxprTracer' at 0x7ffb28408720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31687f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e40b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5008f970; to 'JaxprTracer' at 0x7ffc88274590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc6fea140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41cda0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501c0e50; to 'JaxprTracer' at 0x7ff788b37d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab621bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70709640>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb9d00; to 'JaxprTracer' at 0x7ff713eb8180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f81020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650320>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90266480; to 'JaxprTracer' at 0x7ffc902676f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd0faa210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4320>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fd8e00; to 'JaxprTracer' at 0x7ff711fd8950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b04b580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079fb20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080d2e30; to 'JaxprTracer' at 0x7ffb90728db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69e66c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079ecc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c78a8e0; to 'JaxprTracer' at 0x7ff70c78bba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ce76460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417780>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90441300; to 'JaxprTracer' at 0x7ffc904427a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0359d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4c20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0584ae0; to 'JaxprTracer' at 0x7ffad0586fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f37d950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c9bc0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145abd30; to 'JaxprTracer' at 0x7ff7145a9120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31572750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb03437a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa503338d0; to 'JaxprTracer' at 0x7ffa50331300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb859ef60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127480>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703fccc0; to 'JaxprTracer' at 0x7ffb703fca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ccab00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4be0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8829fd80; to 'JaxprTracer' at 0x7ffc8829ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a279ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10186500>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788831760; to 'JaxprTracer' at 0x7ff788832a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77090010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b0e70>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0564090; to 'JaxprTracer' at 0x7ffbf0567dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2d0c240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec3640>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb056b880; to 'JaxprTracer' at 0x7ffb705d75b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45f4e760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f1f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30117f10; to 'JaxprTracer' at 0x7ffc30116980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5afadcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261040>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306735b0; to 'JaxprTracer' at 0x7ffc30670950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40dd8b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071b7f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00d6570; to 'JaxprTracer' at 0x7ffc304ba6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bf03300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0626cf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714161df0; to 'JaxprTracer' at 0x7ff70bd4f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39f65c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70674310>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026d2b0; to 'JaxprTracer' at 0x7ffc1039f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x384da0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760810>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5047eac0; to 'JaxprTracer' at 0x7ffb5047fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43241550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807d20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e7c270; to 'JaxprTracer' at 0x7ff7132fcfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cfe2410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b25a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707bf6f0; to 'JaxprTracer' at 0x7ffd2c1f7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56162f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be210>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb906840e0; to 'JaxprTracer' at 0x7ffb90686b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56f18270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d84d0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f856c0; to 'JaxprTracer' at 0x7ff713f85850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b248090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
17, epoch_train_loss=3.2796184744785317
Epoch 18
Epoch 18 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768bd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71285d530; to 'JaxprTracer' at 0x7ff71285e070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54537ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672d00>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb021e7f0; to 'JaxprTracer' at 0x7ffcb021c130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3063df80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013aec0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306737e0; to 'JaxprTracer' at 0x7ffc30673fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2270c180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055e050>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc105173d0; to 'JaxprTracer' at 0x7ffc10516a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7714160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382940>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1070efc0; to 'JaxprTracer' at 0x7ffc1070f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c4d1840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb507188d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0749300; to 'JaxprTracer' at 0x7ffcb0748db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b615ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c34c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa984b0090; to 'JaxprTracer' at 0x7ffa984b1210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45808d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022e3d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad05ba8e0; to 'JaxprTracer' at 0x7ffad05b9a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d69110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec35f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b347290; to 'JaxprTracer' at 0x7ff70b344bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9020abe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847eaa0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300d80e0; to 'JaxprTracer' at 0x7ffbf0346070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cf7a920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055fb40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5062cc20; to 'JaxprTracer' at 0x7ffb5062dc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41bb1d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce61fb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad031db20; to 'JaxprTracer' at 0x7ffad031f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e591f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00678d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0816c4a0; to 'JaxprTracer' at 0x7ffa0816d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc8117b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28bc40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107cc1d0; to 'JaxprTracer' at 0x7ffa107ccb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabb273f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e3a50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714480590; to 'JaxprTracer' at 0x7ff714481300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78edd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718050>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106ce610; to 'JaxprTracer' at 0x7ffc106cc680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x335a0930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022ee40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71464d260; to 'JaxprTracer' at 0x7ff71464d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x640f2210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2de0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd420e8e0; to 'JaxprTracer' at 0x7ffcd420f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x412f5040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08666ff0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd445d5d0; to 'JaxprTracer' at 0x7ffcd445c810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3d11da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7c30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a2ca0; to 'JaxprTracer' at 0x7ff70c1a3420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x607e56e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101846a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf058ccc0; to 'JaxprTracer' at 0x7ffbf058d300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dc36720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805fd0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b65800; to 'JaxprTracer' at 0x7ff788b67e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc23532b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0760>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa704d6de0; to 'JaxprTracer' at 0x7ffa70496fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bf884b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4a40>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50046520; to 'JaxprTracer' at 0x7ffc50047ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7253b590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0e00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01e9df0; to 'JaxprTracer' at 0x7ff9d01ea2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fb42880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127be0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c240310; to 'JaxprTracer' at 0x7ff70c2423e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcea141c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0220fc0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7076ca90; to 'JaxprTracer' at 0x7ffb7076cdb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ce6a150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
18, epoch_train_loss=3.2796184744785317
Epoch 19
Epoch 19 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9fa0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135080e0; to 'JaxprTracer' at 0x7ff71350b4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37404a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8190>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50017970; to 'JaxprTracer' at 0x7ffc50017ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42e59520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341da0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd445cae0; to 'JaxprTracer' at 0x7ffcd445f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c997d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0125100>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c8a520; to 'JaxprTracer' at 0x7ff713c897b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37467ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f7730>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9066d030; to 'JaxprTracer' at 0x7ffb9066f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb8468680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101865c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f7c90; to 'JaxprTracer' at 0x7ffa983f6110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4eda9f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2d60>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05f85e0; to 'JaxprTracer' at 0x7ffbd05fb560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x227f6840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3e00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048ee80; to 'JaxprTracer' at 0x7ffa3048fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30dca7f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1d70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50137240; to 'JaxprTracer' at 0x7ffa50135e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51de4070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70674230>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07562f0; to 'JaxprTracer' at 0x7ffab07570b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5f05c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5b80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa984b2660; to 'JaxprTracer' at 0x7ffa984b37e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7731fbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5bd0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c1c60; to 'JaxprTracer' at 0x7ffc102c1d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88780780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41f3b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c33f830; to 'JaxprTracer' at 0x7ffd2c33e700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c711330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070ba80>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70733240; to 'JaxprTracer' at 0x7ffb70732f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39c17e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261c20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107a37e0; to 'JaxprTracer' at 0x7ffc107a1a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4fd3700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a53f0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ba9cd60; to 'JaxprTracer' at 0x7ff70ba9c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9a9bd010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079eef0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e5850; to 'JaxprTracer' at 0x7ffb307e7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fae6f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414470>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30117c90; to 'JaxprTracer' at 0x7ff7139531a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43ad90a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be8c0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01cf290; to 'JaxprTracer' at 0x7ffbf01cc400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2489d200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c10a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc886da340; to 'JaxprTracer' at 0x7ffc88315580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37f2a1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0624110>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10278d60; to 'JaxprTracer' at 0x7ffa102792b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c71fd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6df9e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8fefc0; to 'JaxprTracer' at 0x7ff70b8fe8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36fec860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07624e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132fc630; to 'JaxprTracer' at 0x7ffb90394db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fdd2810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306533b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707915d0; to 'JaxprTracer' at 0x7ffa70792110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56f073f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4b20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb003c360; to 'JaxprTracer' at 0x7ffcb003e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75e81d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067110>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98209e40; to 'JaxprTracer' at 0x7ffa50791030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2373d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d8610>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50034ef0; to 'JaxprTracer' at 0x7ffc50034d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa272f540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
19, epoch_train_loss=3.2796184744785317
Epoch 20
Epoch 20 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5a40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0743ba0; to 'JaxprTracer' at 0x7ffbf0743c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f3e8620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673f60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0627650; to 'JaxprTracer' at 0x7ff9d06274c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40dd5110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0065cc0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303003b0; to 'JaxprTracer' at 0x7ffc30302e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31203710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28ad00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901900e0; to 'JaxprTracer' at 0x7ffbb073a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd09ed910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718340>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025f790; to 'JaxprTracer' at 0x7ffcb025cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5058a090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08665fd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c1b7bf0; to 'JaxprTracer' at 0x7ffd2c1b7f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2d9d7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079c730>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ae16c0; to 'JaxprTracer' at 0x7ff712ae2b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3def1e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce09c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb212b0; to 'JaxprTracer' at 0x7ff70bb228e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cd6d760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b09e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70506d90; to 'JaxprTracer' at 0x7ffa70506390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48fa790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022d1c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502e4450; to 'JaxprTracer' at 0x7ffc502e66b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46aa50a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085552a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a0a6b0; to 'JaxprTracer' at 0x7ff713a09710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56527c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cedf0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048cfe0; to 'JaxprTracer' at 0x7ffa3048c8b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x403e2e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055ebe0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50394720; to 'JaxprTracer' at 0x7ffa50396d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x544de2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6de4e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ab2bb0; to 'JaxprTracer' at 0x7ff788ab3dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0de1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1ef0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06c6750; to 'JaxprTracer' at 0x7ff9d06c49a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f5ba1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414fd0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01a5440; to 'JaxprTracer' at 0x7ff9d01a72e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f2f3570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce3d10>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c0310; to 'JaxprTracer' at 0x7ff7125fd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81d3370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7cc0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f79620; to 'JaxprTracer' at 0x7ff712f784f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3461b660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807f30>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1eb290; to 'JaxprTracer' at 0x7ff70c1e9d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47393250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262cf0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148509a0; to 'JaxprTracer' at 0x7ff714850a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c490fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f72e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca4270; to 'JaxprTracer' at 0x7ff713ca55d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22863d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070bf50>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08745800; to 'JaxprTracer' at 0x7ffb087473d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76102500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf06264a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30304ae0; to 'JaxprTracer' at 0x7ffb30307510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e86c2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c16d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90395b20; to 'JaxprTracer' at 0x7ffb90394d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xce695bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417ee0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa704951c0; to 'JaxprTracer' at 0x7ffa70791a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x232fbc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fed4f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02367a0; to 'JaxprTracer' at 0x7ffbb0236cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c153ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8da230>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd57010; to 'JaxprTracer' at 0x7ff70bd575b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabfa5290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
20, epoch_train_loss=3.2796184744785317
Epoch 21
Epoch 21 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4292ba0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70741580; to 'JaxprTracer' at 0x7ffa707406d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd135300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473cf40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0360400; to 'JaxprTracer' at 0x7ffbb0362e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xda31b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fec850>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bce6840; to 'JaxprTracer' at 0x7ff7135a82c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33cff790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fbed0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70cc98c20; to 'JaxprTracer' at 0x7ff70cc9bc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d0e9020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4dc0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106ce930; to 'JaxprTracer' at 0x7ffc106cd080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8363a050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101860e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f7ce0; to 'JaxprTracer' at 0x7ffa983f51c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x771315d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b19a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b708bd0; to 'JaxprTracer' at 0x7ff70b708ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bc84420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bfad0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71357fdd0; to 'JaxprTracer' at 0x7ff71357e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc86e5e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079ed70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcb1c10; to 'JaxprTracer' at 0x7ff70bcb1620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x404038a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e08c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712006d40; to 'JaxprTracer' at 0x7ff712004130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ce321d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b8120>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0722c00; to 'JaxprTracer' at 0x7ffab0723010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ecec9a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5570>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad02b88b0; to 'JaxprTracer' at 0x7ffad02b8d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d402260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e41f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c33f510; to 'JaxprTracer' at 0x7ff712b7eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d021690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760810>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9043aed0; to 'JaxprTracer' at 0x7ffb9043ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd0861a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653410>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0352110; to 'JaxprTracer' at 0x7ffbd03511c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbb09560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b64b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e79c0; to 'JaxprTracer' at 0x7ff7139e64d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x776651f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bfdb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10196020; to 'JaxprTracer' at 0x7ffc101962f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4e310a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079e640>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301176a0; to 'JaxprTracer' at 0x7ffc301143b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x303b9490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302da370>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa505cc2c0; to 'JaxprTracer' at 0x7ffa505cdee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e886830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b8840>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145ff3d0; to 'JaxprTracer' at 0x7ff7145fe020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bfc8bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0ca0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507f1fd0; to 'JaxprTracer' at 0x7ffb507f1a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f41e280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071a5d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90465440; to 'JaxprTracer' at 0x7ffc90466c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43108d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070bea0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705471a0; to 'JaxprTracer' at 0x7ffa70544fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb320d8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262c20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30147ec0; to 'JaxprTracer' at 0x7ffa30145760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x19533270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b77e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10765ee0; to 'JaxprTracer' at 0x7ffa10767d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x367cf3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce603b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708530f40; to 'JaxprTracer' at 0x7ff7085335b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76040bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876a2e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c7ee80; to 'JaxprTracer' at 0x7ff713c7ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcfc0cbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
21, epoch_train_loss=3.2796184744785317
Epoch 22
Epoch 22 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f6d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5028afc0; to 'JaxprTracer' at 0x7ffc50289350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c7aa70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708554840>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07714e0; to 'JaxprTracer' at 0x7ffbb0770630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3df5bcd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904ccd40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd429cea0; to 'JaxprTracer' at 0x7ffcd429da30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e2dca70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28b970>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0569990; to 'JaxprTracer' at 0x7ffbb056af70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb86a9ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c11b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8829d710; to 'JaxprTracer' at 0x7ffc8829c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66924230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415c50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7078cc20; to 'JaxprTracer' at 0x7ffb7078d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e1eaee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2780>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326d300; to 'JaxprTracer' at 0x7ff71326e610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5286fad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bdb60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06ec810; to 'JaxprTracer' at 0x7ffbd06efb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83273160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b6090>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd055ca40; to 'JaxprTracer' at 0x7ff71355dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bfa40c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127d90>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcb1f80; to 'JaxprTracer' at 0x7ff70bcb3060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6df09d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5070>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca13a0; to 'JaxprTracer' at 0x7ff713ca0540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15de41d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673b60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026d850; to 'JaxprTracer' at 0x7ffc88648cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6277b8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066a90>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c2f6b60; to 'JaxprTracer' at 0x7ffd2c2f6340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d288cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6df6c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88449080; to 'JaxprTracer' at 0x7ffc88448bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9087d4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086651e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145d4c20; to 'JaxprTracer' at 0x7ffa105c2020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40939470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079fe90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101cce00; to 'JaxprTracer' at 0x7ffc101ce4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40b4d9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bc710>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b72bab0; to 'JaxprTracer' at 0x7ffb9066c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4acf65a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b6880>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd445eac0; to 'JaxprTracer' at 0x7ffcd445c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a937170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847df50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e7ea20; to 'JaxprTracer' at 0x7ff788e7ea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76fab90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2636d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905c60c0; to 'JaxprTracer' at 0x7ffb905c6570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x568cc210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f75e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141023e0; to 'JaxprTracer' at 0x7ff714100f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54e62b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8d30>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0478630; to 'JaxprTracer' at 0x7ffcb047a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6299ff60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c38b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1027a200; to 'JaxprTracer' at 0x7ffa1027af70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcdb51240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667350>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71285c720; to 'JaxprTracer' at 0x7ff71285ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c796e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079ccf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132a0680; to 'JaxprTracer' at 0x7ff70bf77e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x977237f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ba1d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88704a40; to 'JaxprTracer' at 0x7ffc88706200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5588c960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055df30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa087dd800; to 'JaxprTracer' at 0x7ffa087ddc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56dbe0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
22, epoch_train_loss=3.2796184744785317
Epoch 23
Epoch 23 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41f680>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303d8ea0; to 'JaxprTracer' at 0x7ffc303db600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x237986e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676610>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0349b20; to 'JaxprTracer' at 0x7ffab0348450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c572820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8830>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d9bab0; to 'JaxprTracer' at 0x7ff712d99c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2796a7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e41c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501c3ab0; to 'JaxprTracer' at 0x7ffb501c1440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20598d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2620c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712559e40; to 'JaxprTracer' at 0x7ff712558270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5e42a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5ed0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01a4590; to 'JaxprTracer' at 0x7ff9d01a7290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b1c36b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302db1e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05c2980; to 'JaxprTracer' at 0x7ffbd05c25c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc6eb0f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bfd70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05d3ec0; to 'JaxprTracer' at 0x7ffbd05d39c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b4ebc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804680>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502be2f0; to 'JaxprTracer' at 0x7ffa500c0e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cca0e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0761b00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9011f290; to 'JaxprTracer' at 0x7ffc9011e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc821aba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e0930>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0380e50; to 'JaxprTracer' at 0x7ffab03827a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7829a1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ba790>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce94cc0; to 'JaxprTracer' at 0x7ff70ce94f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37325830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fed1b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081526b0; to 'JaxprTracer' at 0x7ffb08150ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x645d0ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fb0b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5042e200; to 'JaxprTracer' at 0x7ff7122a9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x266e6760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650ed0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0772b10; to 'JaxprTracer' at 0x7ffbf0773d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d8be550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b7070>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ccc1f80; to 'JaxprTracer' at 0x7ff70ccc1e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32768430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bc1e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788866390; to 'JaxprTracer' at 0x7ff788865e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2b429da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712806840>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb019aa70; to 'JaxprTracer' at 0x7ffbb019b790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56138b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6220>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07b0a90; to 'JaxprTracer' at 0x7ffc88317100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78b9aa30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0d00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900892b0; to 'JaxprTracer' at 0x7ffc90088400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d608890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c01b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c2972e0; to 'JaxprTracer' at 0x7ffd2c294540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ade7c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066420>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127ef600; to 'JaxprTracer' at 0x7ff7127efba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94bd0c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d1df0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712e1dad0; to 'JaxprTracer' at 0x7ff712e1e5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x547dbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101872d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eb9e40; to 'JaxprTracer' at 0x7ff713ebb880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x908d7440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62040>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce5fce0; to 'JaxprTracer' at 0x7ff70ce5dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71a7590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4a80>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712006930; to 'JaxprTracer' at 0x7ff712007650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbe4af4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90380c90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3078cf40; to 'JaxprTracer' at 0x7ffb3078c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x456f0050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
23, epoch_train_loss=3.2796184744785317
Epoch 24
Epoch 24 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0126a10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07078d0; to 'JaxprTracer' at 0x7ffad0705620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bf9fc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055dbf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28165350; to 'JaxprTracer' at 0x7ffb28164590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2062d040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce619b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306d3470; to 'JaxprTracer' at 0x7ffc306d3380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97e4cce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d20a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e4900; to 'JaxprTracer' at 0x7ff7139e41d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc8316e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3500>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137914e0; to 'JaxprTracer' at 0x7ff713792750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cf23000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284177e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb464d0; to 'JaxprTracer' at 0x7ffc506abbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bfaa320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ebc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e7f6f0; to 'JaxprTracer' at 0x7ff788e7cc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20699810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bc590>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145abab0; to 'JaxprTracer' at 0x7ff7145a8f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x418d2eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9bc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981ad6c0; to 'JaxprTracer' at 0x7ffa981aefc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92c8bb60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d9500>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300db510; to 'JaxprTracer' at 0x7ffb300d8630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9180f820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8da730>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0704ae0; to 'JaxprTracer' at 0x7ffbb0705b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f919dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4bd0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0876b510; to 'JaxprTracer' at 0x7ffa0876b010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xacabb260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670f60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08622e80; to 'JaxprTracer' at 0x7ffa08620770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c629400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28b360>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01a7fb0; to 'JaxprTracer' at 0x7ff9d01a5210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x645d50f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2f50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d017d530; to 'JaxprTracer' at 0x7ff9d017d490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x515259b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128070a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306534c0; to 'JaxprTracer' at 0x7ffbb0534680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d8c9f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bdcc0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902fa3e0; to 'JaxprTracer' at 0x7ff7145a89f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c386f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3240>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c94270; to 'JaxprTracer' at 0x7ff713c958a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4888510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079cca0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102dc130; to 'JaxprTracer' at 0x7ff70b8a7d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30079ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2624b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1039c090; to 'JaxprTracer' at 0x7ffc1039dc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x630db280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f42e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30221260; to 'JaxprTracer' at 0x7ffb30223150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbba9bc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feca60>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50793e70; to 'JaxprTracer' at 0x7ffa507937e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6773b410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c26b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70cead760; to 'JaxprTracer' at 0x7ff70ceaf290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5816f510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086658d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301a0a40; to 'JaxprTracer' at 0x7ffc301a3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31931000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804030>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50747970; to 'JaxprTracer' at 0x7ffa50747420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcc0c380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e2770>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7022f240; to 'JaxprTracer' at 0x7ffa301473d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93ebbf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070b050>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c8f5940; to 'JaxprTracer' at 0x7ff70c8f7dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcad8f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
24, epoch_train_loss=3.2796184744785317
Epoch 25
Epoch 25 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718500>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281b4360; to 'JaxprTracer' at 0x7ffb281b7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12667d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fb7b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900daa70; to 'JaxprTracer' at 0x7ffc900daca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1560f2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41eea0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5061d080; to 'JaxprTracer' at 0x7ffcb061f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x111bf3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706752e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120a3ab0; to 'JaxprTracer' at 0x7ff7120a0c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66c28550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cb3d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb283c6890; to 'JaxprTracer' at 0x7ff70c4f7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x237b5330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5650>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71229f060; to 'JaxprTracer' at 0x7ff71229dda0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd367c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306529f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50394770; to 'JaxprTracer' at 0x7ffa50394a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb9827f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652810>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05c01d0; to 'JaxprTracer' at 0x7ffbd05c39c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61852a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302dbb80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500c1b70; to 'JaxprTracer' at 0x7ffa500c0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cba4500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769500>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4761c60; to 'JaxprTracer' at 0x7ffcd4762610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5040b4e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644310>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bee4a40; to 'JaxprTracer' at 0x7ff70bee5530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83581e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b74c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703c9300; to 'JaxprTracer' at 0x7ffb703c9580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90dc44e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4291ac0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb073bd80; to 'JaxprTracer' at 0x7ff71326cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33c3cd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473ff70>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb084dc1d0; to 'JaxprTracer' at 0x7ffb084dc310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69ecb230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0342f00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107af790; to 'JaxprTracer' at 0x7ff9d0655bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b641620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4620>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ced8f0; to 'JaxprTracer' at 0x7ff713ced300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4eeb8430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652f70>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788831d50; to 'JaxprTracer' at 0x7ff70c728c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35f2b430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302da4a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0198e00; to 'JaxprTracer' at 0x7ffbb01980e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b6dcef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067b90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306d18f0; to 'JaxprTracer' at 0x7ffc306d24d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9066eb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847e1d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303022a0; to 'JaxprTracer' at 0x7ffc30300180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ba10a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805240>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30522520; to 'JaxprTracer' at 0x7ffc305219e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcfc3140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415880>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0725300; to 'JaxprTracer' at 0x7ffcb0726bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5213a840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b8640>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71285c3b0; to 'JaxprTracer' at 0x7ffc1070c4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26179d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feff90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507c4270; to 'JaxprTracer' at 0x7ffb507c74c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa43964d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289dd0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902322a0; to 'JaxprTracer' at 0x7ffc90230ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x80bf3960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671b90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0145f80; to 'JaxprTracer' at 0x7ffab01468e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xca250030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd02214b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30523c40; to 'JaxprTracer' at 0x7ffb30523ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38bd4960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
25, epoch_train_loss=3.2796184744785317
Epoch 26
Epoch 26 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055f790>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08442ed0; to 'JaxprTracer' at 0x7ffa08440630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d482bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055d5b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8867a250; to 'JaxprTracer' at 0x7ffc8867a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55c15890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce625d0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025cfe0; to 'JaxprTracer' at 0x7ffcb025cd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23d402f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28aeb0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30331b70; to 'JaxprTracer' at 0x7ffb08745670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18b290e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec0e60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8d5940; to 'JaxprTracer' at 0x7ff70b8d7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10542600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805670>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5047c630; to 'JaxprTracer' at 0x7ffb5047c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1765e190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be8a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703ca200; to 'JaxprTracer' at 0x7ffb703caac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48e414b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e66a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08546a70; to 'JaxprTracer' at 0x7ffb085460c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24e09670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4610>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1057f920; to 'JaxprTracer' at 0x7ffc1057f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97f89810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf06253e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301a9260; to 'JaxprTracer' at 0x7ffa301ab3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5d611c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882db3d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05d1800; to 'JaxprTracer' at 0x7ffbd05d1bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e9ee200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557000>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0876bec0; to 'JaxprTracer' at 0x7ffa08769da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91bfa990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672e30>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04fea20; to 'JaxprTracer' at 0x7ffad04ff1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabf3b980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3050>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04aaac0; to 'JaxprTracer' at 0x7ffa0816ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b1008d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414950>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d02149f0; to 'JaxprTracer' at 0x7ff9d0214b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56691520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847e830>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30652b60; to 'JaxprTracer' at 0x7ffa30653420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5da57f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5cd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c985030; to 'JaxprTracer' at 0x7ff70c985670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ca1b380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067470>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70287880; to 'JaxprTracer' at 0x7ffa70285620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8702a990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d1c10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf058fbf0; to 'JaxprTracer' at 0x7ffbf058d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa38037d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5b80>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0636980; to 'JaxprTracer' at 0x7ff9d0637ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c4d2a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5a60>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505eec00; to 'JaxprTracer' at 0x7ffb505ee5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xce5a41c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c9c40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107469d0; to 'JaxprTracer' at 0x7ffc10745fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x622dd920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08666140>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083ca570; to 'JaxprTracer' at 0x7ffa083c96c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2af1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce0200>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f96ed0; to 'JaxprTracer' at 0x7ff713f96a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c29cd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4290ea0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71350b5b0; to 'JaxprTracer' at 0x7ff7135089a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c9e3260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b6e00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88649490; to 'JaxprTracer' at 0x7ffc88648680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6243f600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90383bb0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad02da070; to 'JaxprTracer' at 0x7ffad02d9ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d4c6920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
26, epoch_train_loss=3.2796184744785317
Epoch 27
Epoch 27 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022d170>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502e59e0; to 'JaxprTracer' at 0x7ffc502e60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6d16c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718270>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70a83ce50; to 'JaxprTracer' at 0x7ff70a83f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1dd4d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fbda0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306d71a0; to 'JaxprTracer' at 0x7ffa306d7a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f07f290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41f370>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707bffb0; to 'JaxprTracer' at 0x7ffa707bdb20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c13da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bbf30>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05da7f0; to 'JaxprTracer' at 0x7ffbb05d9f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75ff2710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0343c70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04aaca0; to 'JaxprTracer' at 0x7ff9d04a8f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x19a0bf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2600f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4492a70; to 'JaxprTracer' at 0x7ffcd4492ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x222c0c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10186a50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50396f70; to 'JaxprTracer' at 0x7ffa50395f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa344d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a60e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0707c40; to 'JaxprTracer' at 0x7ffbb0705490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42d93a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01276d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd41dee30; to 'JaxprTracer' at 0x7ffcd41dd530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc20e2a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fec040>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b9364d0; to 'JaxprTracer' at 0x7ff70b9362f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x730d1870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50138610>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05707c0; to 'JaxprTracer' at 0x7ffbb05722f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aba94b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0762650>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b69d670; to 'JaxprTracer' at 0x7ff70b69eb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c336ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd42920f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326c4a0; to 'JaxprTracer' at 0x7ff71326c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5166d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e110>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5047cfe0; to 'JaxprTracer' at 0x7ffad07ecd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd603a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e6f70>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06578d0; to 'JaxprTracer' at 0x7ff9d06552b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46e32c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101865d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107a35b0; to 'JaxprTracer' at 0x7ffc107a24d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86dada40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7500>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e5580; to 'JaxprTracer' at 0x7ff7139e5620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc784b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2a40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3049ff10; to 'JaxprTracer' at 0x7ffb3049dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6bbdd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847e440>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03fd4e0; to 'JaxprTracer' at 0x7ffab03fc270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49589300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079fe30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08206b60; to 'JaxprTracer' at 0x7ffb08207240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1eeb8410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce1620>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ff6ca0; to 'JaxprTracer' at 0x7ff712ff7c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c2637a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675260>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30777380; to 'JaxprTracer' at 0x7ff712dc7920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3de5bbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cac90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05c2570; to 'JaxprTracer' at 0x7ffbd05c0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x314351b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6d60>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b360db0; to 'JaxprTracer' at 0x7ff70b3636f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97b33910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0d80>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd478cae0; to 'JaxprTracer' at 0x7ffcd478d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71c4e5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707095c0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08389260; to 'JaxprTracer' at 0x7ffa083890d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49b2eae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
27, epoch_train_loss=3.2796184744785317
Epoch 28
Epoch 28 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e0900>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa982992b0; to 'JaxprTracer' at 0x7ffa98298680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbc5d8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055e880>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07729d0; to 'JaxprTracer' at 0x7ffc8867bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bd9aa20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62b30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301f5a30; to 'JaxprTracer' at 0x7ffa301f54e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5a61960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667c20>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f6750; to 'JaxprTracer' at 0x7ffa983f7880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e6a3830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2bf0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd076df80; to 'JaxprTracer' at 0x7ffbd076c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b04ff90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847d4a0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb073af70; to 'JaxprTracer' at 0x7ffbb073a020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69798350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9ed0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70723100; to 'JaxprTracer' at 0x7ffa70720a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a21a580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4b90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306ac040; to 'JaxprTracer' at 0x7ffc306ae250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60763dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b1bc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01cc040; to 'JaxprTracer' at 0x7ffbf01cf790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3364ed40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6ed0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105678d0; to 'JaxprTracer' at 0x7ffa105656c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ba334d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8da2b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30702570; to 'JaxprTracer' at 0x7ffb307032e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7771c510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5020>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98209a80; to 'JaxprTracer' at 0x7ffa98208040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x99d24040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672730>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb01f14e0; to 'JaxprTracer' at 0x7ffcb01f3420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fa7f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1310>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08747f10; to 'JaxprTracer' at 0x7ffb08746a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72a17510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128056b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00d5ad0; to 'JaxprTracer' at 0x7ffcb00d6c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5f551d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd4b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5075f290; to 'JaxprTracer' at 0x7ffb5075fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24cfec30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6cb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902f8900; to 'JaxprTracer' at 0x7ffc902f97b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x117a5390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2d80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0479ad0; to 'JaxprTracer' at 0x7ffcb047b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x528f7fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416ab0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf058f3d0; to 'JaxprTracer' at 0x7ffbf058d440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x231f4a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4c10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc500153f0; to 'JaxprTracer' at 0x7ffc50017100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x534517c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb03427c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302213f0; to 'JaxprTracer' at 0x7ffb30223790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ab804f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bbef0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07b06d0; to 'JaxprTracer' at 0x7ffcb07b2f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd01be540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec0f50>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c8b510; to 'JaxprTracer' at 0x7ff713c8a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e3dc1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079c730>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e6750; to 'JaxprTracer' at 0x7ff7139e4cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f430cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bc790>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70790ea0; to 'JaxprTracer' at 0x7ffa70791f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5759e560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fa380>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135085e0; to 'JaxprTracer' at 0x7ff7135098a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71857d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0221190>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c18c810; to 'JaxprTracer' at 0x7ff70c18c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c172f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
28, epoch_train_loss=3.2796184744785317
Epoch 29
Epoch 29 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cf180>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71285e890; to 'JaxprTracer' at 0x7ff71285d6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbf7c9350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022e8a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90045490; to 'JaxprTracer' at 0x7ffbf01a1ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd2d6960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071bc30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135c6980; to 'JaxprTracer' at 0x7ff7135c4f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x340c2c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8940>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712face50; to 'JaxprTracer' at 0x7ff9d04112b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc36ff40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677fe0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90264ae0; to 'JaxprTracer' at 0x7ffc902679c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x154507c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0342960>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0816f240; to 'JaxprTracer' at 0x7ffa0816dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18a66310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263fd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98651800; to 'JaxprTracer' at 0x7ffa986509f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55b9abf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262f40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3443b0; to 'JaxprTracer' at 0x7ff70b345440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x630047a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651020>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca2d90; to 'JaxprTracer' at 0x7ff713ca1ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bc7f960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf06248a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10798fe0; to 'JaxprTracer' at 0x7ffa303f90d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc9fc0060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0460>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0691c10; to 'JaxprTracer' at 0x7ffcb0691a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bd84660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769c10>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa502b94e0; to 'JaxprTracer' at 0x7ffa502bb420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d6a9700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647240>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04bcfe0; to 'JaxprTracer' at 0x7ffab0146b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x975d9630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760a00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4234770; to 'JaxprTracer' at 0x7ffcd42379c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaca4a7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd42900e0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0382340; to 'JaxprTracer' at 0x7ffbf0380a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcdc24f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0340ba0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0352160; to 'JaxprTracer' at 0x7ffbd0351850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7b1c2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2639f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0836d350; to 'JaxprTracer' at 0x7ffa0836eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bb04040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652500>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01d93f0; to 'JaxprTracer' at 0x7ffbd01db330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc30c830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca1f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcaf420; to 'JaxprTracer' at 0x7ff70bcaf100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x566ab430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd6e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd07349a0; to 'JaxprTracer' at 0x7ffbd0734b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a5c9c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ddf0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708590590; to 'JaxprTracer' at 0x7ffc30638400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b7b55c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805770>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507f2110; to 'JaxprTracer' at 0x7ffb507f0fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b42d4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41ee00>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0600810; to 'JaxprTracer' at 0x7ffc30592980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22200720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b8350>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125ff560; to 'JaxprTracer' at 0x7ff7125fe430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd108b080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6ae0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70546c00; to 'JaxprTracer' at 0x7ffa70544a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2399df20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce61cc0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28166390; to 'JaxprTracer' at 0x7ffb281668e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x412ba480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382870>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4723b50; to 'JaxprTracer' at 0x7ffcd4723d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6490d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
29, epoch_train_loss=3.2796184744785317
Epoch 30
Epoch 30 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce05e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0707330; to 'JaxprTracer' at 0x7ffad07064d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e5338e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e3bd0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd037f970; to 'JaxprTracer' at 0x7ffbd037e890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d8c9a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055d190>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888e5300; to 'JaxprTracer' at 0x7ff7888e7fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f87440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce639e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137927f0; to 'JaxprTracer' at 0x7ff7137914e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e590140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1400>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd043e480; to 'JaxprTracer' at 0x7ffbd043ede0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e33710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847c810>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c211e90; to 'JaxprTracer' at 0x7ff70c211030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcdf40850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417f10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa507936a0; to 'JaxprTracer' at 0x7ffa50791490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaae181d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5130>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714689620; to 'JaxprTracer' at 0x7ff714688770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bb4aee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b1670>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708531c60; to 'JaxprTracer' at 0x7ff7085338d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc8396c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9de0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd41df290; to 'JaxprTracer' at 0x7ffcd41dc590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4f3f9f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b57c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb044cef0; to 'JaxprTracer' at 0x7ffcb044d350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b653d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d9790>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d01d0; to 'JaxprTracer' at 0x7ffb302d2d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xad264b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708554fc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06ec900; to 'JaxprTracer' at 0x7ffbd06ed990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d113dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28b360>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98702ca0; to 'JaxprTracer' at 0x7ffa98701a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c4a3930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2a50>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00d4130; to 'JaxprTracer' at 0x7ffb901cfab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2316fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d1d30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102a5d50; to 'JaxprTracer' at 0x7ffa102a49f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x186190e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5520>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707be4d0; to 'JaxprTracer' at 0x7ffa707bc270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58c768d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b03d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01cc2c0; to 'JaxprTracer' at 0x7ffa70741530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x887f5fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670c40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788da0130; to 'JaxprTracer' at 0x7ffb08190810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6cfa790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f64b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0348e00; to 'JaxprTracer' at 0x7ffab0349080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb24f6130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0340c80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07f21b0; to 'JaxprTracer' at 0x7ffab07f0770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x776ebe80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd42906a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106b75b0; to 'JaxprTracer' at 0x7ffc106b7bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x567cc260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086670b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c533ec0; to 'JaxprTracer' at 0x7ff788ecafc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2ba5690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079e870>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708591d50; to 'JaxprTracer' at 0x7ff708593b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37c78e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0d10>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90611a80; to 'JaxprTracer' at 0x7ffc90611260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x965c6de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013a220>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7078f330; to 'JaxprTracer' at 0x7ffb7078eb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac96c850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070a050>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad054ed40; to 'JaxprTracer' at 0x7ffad054eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x977e5510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
30, epoch_train_loss=3.2796184744785317
Epoch 31
Epoch 31 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102baeb0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90047ba0; to 'JaxprTracer' at 0x7ffc90044b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xe0ee400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127a90>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05fbf10; to 'JaxprTracer' at 0x7ffbd05fbc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa41aad60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fee130>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7075dc60; to 'JaxprTracer' at 0x7ffb7075e070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58df4ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647850>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0411260; to 'JaxprTracer' at 0x7ff9d04103b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17a86cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07617b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc884eb8d0; to 'JaxprTracer' at 0x7ffc884eb790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x506c3130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341ab0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4f4a40; to 'JaxprTracer' at 0x7ffbf07067f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25c6f190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263120>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06ecbd0; to 'JaxprTracer' at 0x7ffa304053a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaaea57b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cbba0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d3ba0; to 'JaxprTracer' at 0x7ffb302d36a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x520b6050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650e50>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c061260; to 'JaxprTracer' at 0x7ffd2c0622a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd0f8490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10185b20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3045bd30; to 'JaxprTracer' at 0x7ffa30458ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30c0c260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dfa70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145a8db0; to 'JaxprTracer' at 0x7ff7145abd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e0fadd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c3f00>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ccc0b30; to 'JaxprTracer' at 0x7ffab0380400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13ff4550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876a3f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132a2e30; to 'JaxprTracer' at 0x7ff7132a35b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x906ead20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8810>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b897920; to 'JaxprTracer' at 0x7ff70b894400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ca11a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676510>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085057b0; to 'JaxprTracer' at 0x7ff708507650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xceb72370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f7550>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5012fba0; to 'JaxprTracer' at 0x7ffa5012e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x641c8280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cbcd0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb059fec0; to 'JaxprTracer' at 0x7ff9d01a6570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51db0cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650560>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb902326b0; to 'JaxprTracer' at 0x7ffb90230bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc925b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807df0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10194cc0; to 'JaxprTracer' at 0x7ffc10196c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bcaca70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d3f60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03839c0; to 'JaxprTracer' at 0x7ffc304f8810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc16c2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bf440>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa704946d0; to 'JaxprTracer' at 0x7ffa70496a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x600f80b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c10b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712dc6cf0; to 'JaxprTracer' at 0x7ff712dc5350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d0506f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41ce60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5076ed90; to 'JaxprTracer' at 0x7ffa5076e0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbb09420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473ed30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb019b1a0; to 'JaxprTracer' at 0x7ffa704d5580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb72aff10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f48f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05d9760; to 'JaxprTracer' at 0x7ffbb05dbf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96cbd430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085549f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70544ef0; to 'JaxprTracer' at 0x7ffa705452b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c477e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0220970>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7093cec00; to 'JaxprTracer' at 0x7ff7093cf060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66ffdec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
31, epoch_train_loss=3.2796184744785317
Epoch 32
Epoch 32 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302daa50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07418a0; to 'JaxprTracer' at 0x7ffbf0742b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91786380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e3f80>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70496d90; to 'JaxprTracer' at 0x7ffa70495a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38e743b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055eb70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306d3dd0; to 'JaxprTracer' at 0x7ffc306d2e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x223e1e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667720>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713790360; to 'JaxprTracer' at 0x7ff713790ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73218130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847d7d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5047cfe0; to 'JaxprTracer' at 0x7ffb5047cb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90e0a040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284170b0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03638d0; to 'JaxprTracer' at 0x7ff9d067a390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7306e850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653360>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3f49a0; to 'JaxprTracer' at 0x7ff70b3f4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c33dea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652a70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712580770; to 'JaxprTracer' at 0x7ff712580270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3daa2370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807980>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01cf600; to 'JaxprTracer' at 0x7ff70b935da0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xba0f5ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4293890>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107aed40; to 'JaxprTracer' at 0x7ffc107aec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc731690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5ac0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5062e2a0; to 'JaxprTracer' at 0x7ffb5062e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a5eb8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d8100>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01a8720; to 'JaxprTracer' at 0x7ffbd01aa390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d98bb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085558a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0657ec0; to 'JaxprTracer' at 0x7ff9d0657600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b9d3e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28a270>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3d8b30; to 'JaxprTracer' at 0x7ff70b3d8950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9faefb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847c3d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03dbb50; to 'JaxprTracer' at 0x7ffbd03d8810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bfbe50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769230>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b728090; to 'JaxprTracer' at 0x7ffc90266a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x669348f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306503a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902f8c70; to 'JaxprTracer' at 0x7ffc902fba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92ac8d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261e60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5008fe70; to 'JaxprTracer' at 0x7ffc5008f510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ad06ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa501396d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd021af70; to 'JaxprTracer' at 0x7ffa306d7e70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52139330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb03419a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505eed40; to 'JaxprTracer' at 0x7ffa08139440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36c1de70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e470>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fc9760; to 'JaxprTracer' at 0x7ffa080970b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f2034a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0762220>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc887047c0; to 'JaxprTracer' at 0x7ffc88707650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4de5f740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2530>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50047600; to 'JaxprTracer' at 0x7ffc50044770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f5c3990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644260>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb01f2020; to 'JaxprTracer' at 0x7ffb28433f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8369bdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671190>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01a0310; to 'JaxprTracer' at 0x7ff9d06c54e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e1f7bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fef710>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab00d1cb0; to 'JaxprTracer' at 0x7ffab00d31f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37d5b180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90381c80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05b5670; to 'JaxprTracer' at 0x7ffbb05b5760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f189a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
32, epoch_train_loss=3.2796184744785317
Epoch 33
Epoch 33 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055d6a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03464d0; to 'JaxprTracer' at 0x7ffbf0345cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d0568c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cda50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122e41d0; to 'JaxprTracer' at 0x7ff7122e7560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a274620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022c350>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab078f6a0; to 'JaxprTracer' at 0x7ffab078c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x730c41c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768c00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50744a90; to 'JaxprTracer' at 0x7ff712822c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76f30c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fa600>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b72bec0; to 'JaxprTracer' at 0x7ff70b72acf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83b249d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bae0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3d9e40; to 'JaxprTracer' at 0x7ff70b3dae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31960500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261880>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2840bf10; to 'JaxprTracer' at 0x7ffb28408a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f4b6520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262a30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71440c040; to 'JaxprTracer' at 0x7ff71440c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62f2ae50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2e30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eef790; to 'JaxprTracer' at 0x7ff713eee750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bb14b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cb990>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5042e200; to 'JaxprTracer' at 0x7ffa3048c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ef70b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a6270>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98623ba0; to 'JaxprTracer' at 0x7ffa98622a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3346540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dfff0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad031e750; to 'JaxprTracer' at 0x7ffad031c2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dc42590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c2cf0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf76d90; to 'JaxprTracer' at 0x7ff70bf75850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3c031e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644510>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b69fd80; to 'JaxprTracer' at 0x7ff70b69d8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4587b870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760e20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ae1d00; to 'JaxprTracer' at 0x7ff712ae0450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23f81310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0343100>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326d3a0; to 'JaxprTracer' at 0x7ff7085071f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2be9ab30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261940>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f7a10; to 'JaxprTracer' at 0x7ffa983f7f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43105cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b0860>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30333290; to 'JaxprTracer' at 0x7ffc303300e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77bc6ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3d70>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5021c180; to 'JaxprTracer' at 0x7ffc5021d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb8630590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416d30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98299ad0; to 'JaxprTracer' at 0x7ffa9829ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41d675c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be8e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad05b8180; to 'JaxprTracer' at 0x7ffad05baac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cf754d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847cf70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c89f30; to 'JaxprTracer' at 0x7ff713c88450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13b382c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41f930>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303d8fe0; to 'JaxprTracer' at 0x7ff713a08310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b38c0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec0430>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ae7740; to 'JaxprTracer' at 0x7ff9d064c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5982c950>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4b70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0152890; to 'JaxprTracer' at 0x7ffbf0151f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86cffac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce61600>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8a78d0; to 'JaxprTracer' at 0x7ff70b8a7e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc0757ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070a510>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff6ac3a0090; to 'JaxprTracer' at 0x7ff6ac3a04f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62fa0ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
33, epoch_train_loss=3.2796184744785317
Epoch 34
Epoch 34 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce0cd0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900443b0; to 'JaxprTracer' at 0x7ffc90046840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x279962b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4f20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad05b92b0; to 'JaxprTracer' at 0x7ffad05b9440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2094f8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d87b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00ae7a0; to 'JaxprTracer' at 0x7ffcb00aed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x419b5690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557220>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ced670; to 'JaxprTracer' at 0x7ff713cedb70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d0028a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079d260>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03ca890; to 'JaxprTracer' at 0x7ffbb03c9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ac51030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414c50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b7f330; to 'JaxprTracer' at 0x7ff712b7f7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x905dbd20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50138c30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad031e4d0; to 'JaxprTracer' at 0x7ffad031d7b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac968fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013a820>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137cbdd0; to 'JaxprTracer' at 0x7ff7137ca6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6690740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0065c30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c0a1c60; to 'JaxprTracer' at 0x7ffd2c0a3470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ee746a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6db0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085adad0; to 'JaxprTracer' at 0x7ff7085af920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dc40190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071bc50>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28175d50; to 'JaxprTracer' at 0x7ffb28175ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd3355b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e60c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500fc7c0; to 'JaxprTracer' at 0x7ffa500fe660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x445a9f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d8330>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa503337e0; to 'JaxprTracer' at 0x7ffa50333880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2117be50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086655c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71229cc70; to 'JaxprTracer' at 0x7ffc107a0720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61480840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079d190>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc884eb380; to 'JaxprTracer' at 0x7ffc884e9e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d7888c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414ea0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106cf920; to 'JaxprTracer' at 0x7ffc106ce6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43d51840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013a0a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888e6c00; to 'JaxprTracer' at 0x7ff7888e6390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e740390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3900>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce978d0; to 'JaxprTracer' at 0x7ff70ce96f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7be4f7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101847b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab078fec0; to 'JaxprTracer' at 0x7ffab078c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4034c8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e42b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc882764d0; to 'JaxprTracer' at 0x7ffc88277ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71b5ca40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677590>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0625bc0; to 'JaxprTracer' at 0x7ff9d0472e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ede07b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473cef0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0479e40; to 'JaxprTracer' at 0x7ffcb047b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb67f4ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec11f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1050b510; to 'JaxprTracer' at 0x7ffa10508e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17b6f9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41f040>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105321b0; to 'JaxprTracer' at 0x7ffa105323e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x878c5c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671af0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505ecd60; to 'JaxprTracer' at 0x7ffb505ec770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa439bb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fed220>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07c83b0; to 'JaxprTracer' at 0x7ffbb07cb970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b7cc6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0223f20>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb286b17b0; to 'JaxprTracer' at 0x7ffb286b2d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3033f160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
34, epoch_train_loss=3.2796184744785317
Epoch 35
Epoch 35 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0624720>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712043420; to 'JaxprTracer' at 0x7ff712043880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f243c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4790>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08138540; to 'JaxprTracer' at 0x7ffa08139d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a173600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6df670>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0778810; to 'JaxprTracer' at 0x7ffcb077a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ac314d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769da0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd420e250; to 'JaxprTracer' at 0x7ffcd420eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x279b55e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06faee0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141ae660; to 'JaxprTracer' at 0x7ff7141ad670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb807d910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6f70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714829350; to 'JaxprTracer' at 0x7ff714828bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6058e230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3dc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10165530; to 'JaxprTracer' at 0x7ffc101660c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc28e7840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0064da0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90296340; to 'JaxprTracer' at 0x7ffc90297f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x606f58d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10186bd0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e3eca0; to 'JaxprTracer' at 0x7ff788e3cc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x565215a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0761b40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048ef20; to 'JaxprTracer' at 0x7ffa3048d990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39b8cda0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055e0a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8851bdd0; to 'JaxprTracer' at 0x7ffc8851b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc6119e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cea70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139e4220; to 'JaxprTracer' at 0x7ff7139e5580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab384820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022c270>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc886aa430; to 'JaxprTracer' at 0x7ffc886a9030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cd8ff60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41e6d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0678040; to 'JaxprTracer' at 0x7ff9d06795d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d98bbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675dd0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c2244f0; to 'JaxprTracer' at 0x7ffd2c2278d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x884b5fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5880>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fafe70; to 'JaxprTracer' at 0x7ff711fad030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dea5ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066940>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713793470; to 'JaxprTracer' at 0x7ff713793ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10529d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10185520>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90190860; to 'JaxprTracer' at 0x7ffb90191940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb80b6e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62340>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c759df0; to 'JaxprTracer' at 0x7ffc30331e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c189b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284167b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50192430; to 'JaxprTracer' at 0x7ffb50193ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d987b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bc450>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03de930; to 'JaxprTracer' at 0x7ffbf03ddb70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92c33c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079dee0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9820a160; to 'JaxprTracer' at 0x7ffa9820af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62d6e3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647f30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6e9710; to 'JaxprTracer' at 0x7ff70c6eac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a16b1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0340370>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708593d80; to 'JaxprTracer' at 0x7ff7085918a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bfbe2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261420>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71464f7e0; to 'JaxprTracer' at 0x7ff71464f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x63f7d960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882dbd30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ae7010; to 'JaxprTracer' at 0x7ff788ae5300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcdf2b540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90380860>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff6ac20a5c0; to 'JaxprTracer' at 0x7ff6ac20a610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5095bc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
35, epoch_train_loss=3.2796184744785317
Epoch 36
Epoch 36 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473cec0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0674a90; to 'JaxprTracer' at 0x7ff9d0674b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x564b51e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7900>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b6d40e0; to 'JaxprTracer' at 0x7ff70b6d7560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b25bd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071ad40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30331a80; to 'JaxprTracer' at 0x7ffc303327a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x126c4f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882db390>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107a3970; to 'JaxprTracer' at 0x7ffbd03acb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a7859c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08665690>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326f6a0; to 'JaxprTracer' at 0x7ff71326e070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbf0ae90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417ba0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf76520; to 'JaxprTracer' at 0x7ff70bf76070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x615b9b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b0b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd0a390; to 'JaxprTracer' at 0x7ff70bd0bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36734440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013bb90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708531da0; to 'JaxprTracer' at 0x7ff708530e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7742440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805a80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0693600; to 'JaxprTracer' at 0x7ff70c901170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5344c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070a100>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71357e070; to 'JaxprTracer' at 0x7ff71357e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66413500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847c210>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70859b2e0; to 'JaxprTracer' at 0x7ff708598770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x679c8390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2120>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a08130; to 'JaxprTracer' at 0x7ff713a0bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x315841a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4bf0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc500b3d30; to 'JaxprTracer' at 0x7ffc500b0310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81d3c4a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708556310>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10237f10; to 'JaxprTracer' at 0x7ffa10237060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54e54880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079eaf0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c18b7e0; to 'JaxprTracer' at 0x7ffd2c18a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6690c2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414130>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03da930; to 'JaxprTracer' at 0x7ffbd03db290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b3c3210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b680>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145aafc0; to 'JaxprTracer' at 0x7ff7145aad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc60e0820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805490>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5072fba0; to 'JaxprTracer' at 0x7ffb5072d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x202de1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d9760>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0280a40; to 'JaxprTracer' at 0x7ffcb0280180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57598410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1040>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad02ef330; to 'JaxprTracer' at 0x7ffad02ee750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46462a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f7f90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08544ea0; to 'JaxprTracer' at 0x7ffc10119c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xce7389d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7970>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712823740; to 'JaxprTracer' at 0x7ff712821800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2b716bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec23c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135c4e50; to 'JaxprTracer' at 0x7ff7135c5670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7a80980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be2c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50707bf0; to 'JaxprTracer' at 0x7ffbb0198950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7af8da50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673130>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c96b380; to 'JaxprTracer' at 0x7ff70c96a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d111c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022ea60>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10530b30; to 'JaxprTracer' at 0x7ffa10531e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77a2f9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0221b60>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08705210; to 'JaxprTracer' at 0x7ffb08704130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cd359e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
36, epoch_train_loss=3.2796184744785317
Epoch 37
Epoch 37 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06faa10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303d8040; to 'JaxprTracer' at 0x7ffc303dbc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1714ede0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bb990>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4760db0; to 'JaxprTracer' at 0x7ffcd4761e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc871920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0125850>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904cbe20; to 'JaxprTracer' at 0x7ffc904cb3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x195d0ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88645d50>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102a7e20; to 'JaxprTracer' at 0x7ffa102a61b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a5d3ac0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e48e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4f5b20; to 'JaxprTracer' at 0x7ff70c4f5210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabc457a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2760>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712346390; to 'JaxprTracer' at 0x7ff712347c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xdd8ac60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62790>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0876bec0; to 'JaxprTracer' at 0x7ffab013b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b33f650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce603c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707eaca0; to 'JaxprTracer' at 0x7ffa707ebfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24dfaf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b01a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e3f9c0; to 'JaxprTracer' at 0x7ff788e3eb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fea2b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6df130>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0771300; to 'JaxprTracer' at 0x7ffc90441300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x378ee880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055eb40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa984b1b70; to 'JaxprTracer' at 0x7ff7137ca4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c9f0ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055fb80>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0840e7a0; to 'JaxprTracer' at 0x7ffa0840dbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47e7dcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cfa70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7146898f0; to 'JaxprTracer' at 0x7ff71468a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d146c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644190>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb084de610; to 'JaxprTracer' at 0x7ffb084df060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88168ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e6db0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b896fc0; to 'JaxprTracer' at 0x7ff70b896840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x770cb1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c27b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301ab650; to 'JaxprTracer' at 0x7ffa301a9530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43282690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805480>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709e63600; to 'JaxprTracer' at 0x7ff709e621b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x719415b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8db230>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709e63060; to 'JaxprTracer' at 0x7ffc303013a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x726aefb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28a2f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28184ea0; to 'JaxprTracer' at 0x7ffb28187fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17a4f6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0625d40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3049d490; to 'JaxprTracer' at 0x7ffb3049d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7c42dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d28f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc500459e0; to 'JaxprTracer' at 0x7ffc500456c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6202abf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079e660>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90611620; to 'JaxprTracer' at 0x7ffc90612570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6fd10c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41e600>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902fa5c0; to 'JaxprTracer' at 0x7ffc902fbd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x125aaa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6130>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc305782c0; to 'JaxprTracer' at 0x7ffc3057a700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4886ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90381540>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb304dad90; to 'JaxprTracer' at 0x7ffb304dbd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44e8f4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718ef0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122aab10; to 'JaxprTracer' at 0x7ff7122a8fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ab931f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e2580>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b180b30; to 'JaxprTracer' at 0x7ff70b180f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52857f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
37, epoch_train_loss=3.2796184744785317
Epoch 38
Epoch 38 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0342460>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01a1620; to 'JaxprTracer' at 0x7ffab01a0ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8806f5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c2970>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907f2d40; to 'JaxprTracer' at 0x7ffb907f27f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5ec19d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847e080>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00acef0; to 'JaxprTracer' at 0x7ffcb00acc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f495800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2b40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506a8720; to 'JaxprTracer' at 0x7ffc506a9d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac05f320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708556a80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03fa430; to 'JaxprTracer' at 0x7ffbb03fa9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x586038d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd9d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0380fe0; to 'JaxprTracer' at 0x7ffbf0382110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bd62150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671a50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28165490; to 'JaxprTracer' at 0x7ffb28164400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a0a3070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7146728e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5076f4c0; to 'JaxprTracer' at 0x7ffa5076f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3152deb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8db700>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98623ce0; to 'JaxprTracer' at 0x7ffa986231f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x227e7de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760b20>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5062fbf0; to 'JaxprTracer' at 0x7ffb5062f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55ee3830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4370>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2865f330; to 'JaxprTracer' at 0x7ffb2865cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dc9d2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708800>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2840ab60; to 'JaxprTracer' at 0x7ffb30702a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54585240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7710>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8a4360; to 'JaxprTracer' at 0x7ffab013b8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x557a71e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719300>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa304046d0; to 'JaxprTracer' at 0x7ffa30404130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e0376c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708556700>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00d5800; to 'JaxprTracer' at 0x7ffc504dd2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37051660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bfa90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4f5850; to 'JaxprTracer' at 0x7ff70c4f7740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d669820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671ad0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70286160; to 'JaxprTracer' at 0x7ffa70287920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71d29e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3810>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5075c450; to 'JaxprTracer' at 0x7ffb5075ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50544310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca760>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502bea70; to 'JaxprTracer' at 0x7ffc502bf4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b0c980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289860>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90464900; to 'JaxprTracer' at 0x7ffbf03fb650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x185dfe80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382ee0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fc81d0; to 'JaxprTracer' at 0x7ff712fcbf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb9843460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5110>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0707740; to 'JaxprTracer' at 0x7ffad0707a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5afbcd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882daf70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07b37e0; to 'JaxprTracer' at 0x7ffc303dba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x113e33d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675a20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0636e80; to 'JaxprTracer' at 0x7ff9d06344a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58aff560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0d90>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10279da0; to 'JaxprTracer' at 0x7ffa10278b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d79d0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650470>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30110180; to 'JaxprTracer' at 0x7ffb30111f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76e5ff90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0220050>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0627790; to 'JaxprTracer' at 0x7ffab0627a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fbe5d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
38, epoch_train_loss=3.2796184744785317
Epoch 39
Epoch 39 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5db0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07a0090; to 'JaxprTracer' at 0x7ffbb07a3560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43769b40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf06276c0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026cae0; to 'JaxprTracer' at 0x7ffb3026de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x115d5e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a75f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702a5e40; to 'JaxprTracer' at 0x7ffb702a6f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc28e7050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769cd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4276b60; to 'JaxprTracer' at 0x7ffcd4275300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49befd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706777e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0599c60; to 'JaxprTracer' at 0x7ffc106cf7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66d3e860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb903827e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9064cc20; to 'JaxprTracer' at 0x7ffc9064fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x490c0c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10187a30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9066dc10; to 'JaxprTracer' at 0x7ffb9066ed40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b32d940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128046d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca1bc0; to 'JaxprTracer' at 0x7ff713ca3650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f295e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653630>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30177c40; to 'JaxprTracer' at 0x7ffa30174400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc6ec03c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4290770>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50395c10; to 'JaxprTracer' at 0x7ffa50397420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3260cde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cd080>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709adde90; to 'JaxprTracer' at 0x7ffbf0600810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51d91ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0626030>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145d4130; to 'JaxprTracer' at 0x7ffab0382c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fbd1a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055ec50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90230ea0; to 'JaxprTracer' at 0x7ffc902318f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61d30ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88645940>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb084dce50; to 'JaxprTracer' at 0x7ffb084dfa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc60e69a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bb90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd44d1800; to 'JaxprTracer' at 0x7ffcd44d1ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83cffe40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90383740>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6e87c0; to 'JaxprTracer' at 0x7ff70c6ebf60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf950f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128052e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd076ca40; to 'JaxprTracer' at 0x7ffbd076dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c21c130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306524c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05646d0; to 'JaxprTracer' at 0x7ffbf0565670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4cfdb0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62830>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8867ac50; to 'JaxprTracer' at 0x7ffc30330400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55587690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417a10>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0625490; to 'JaxprTracer' at 0x7ff9d0626070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3289880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0240>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134ec900; to 'JaxprTracer' at 0x7ffa102dd210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb73138b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08666fa0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90397970; to 'JaxprTracer' at 0x7ffb90396d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c057f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41fa40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902965c0; to 'JaxprTracer' at 0x7ffc90296750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x881f9a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263000>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71464fc40; to 'JaxprTracer' at 0x7ff712fc8630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x429f4360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da5c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0636750; to 'JaxprTracer' at 0x7ff9d0637ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6794e5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6d00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06924d0; to 'JaxprTracer' at 0x7ffcb06922f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa662550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1900>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713001580; to 'JaxprTracer' at 0x7ff713002b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c527d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
39, epoch_train_loss=3.2796184744785317
Epoch 40
Epoch 40 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022cd40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08442d40; to 'JaxprTracer' at 0x7ffbf01515d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97e55c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b6c00>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705471a0; to 'JaxprTracer' at 0x7ffa10509350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e4a3110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ffe0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcad620; to 'JaxprTracer' at 0x7ff70bcacc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b91bf00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d8e30>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30302200; to 'JaxprTracer' at 0x7ffc303013a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7d054c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708556950>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8d5440; to 'JaxprTracer' at 0x7ff70b8d4b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44260f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414570>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c15bd80; to 'JaxprTracer' at 0x7ff70b8fed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2df2d580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b150>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b49d50; to 'JaxprTracer' at 0x7ff712b481d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x127a7c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50138160>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145a9ad0; to 'JaxprTracer' at 0x7ff7145a9300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa76dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807cc0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98620630; to 'JaxprTracer' at 0x7ffa98620540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5b7fd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057c180>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048c090; to 'JaxprTracer' at 0x7ffa3048c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x137a5260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0343230>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06af5b0; to 'JaxprTracer' at 0x7ffcb06ac310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x821d8ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473cb60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106b4ea0; to 'JaxprTracer' at 0x7ffc106b42c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3db8ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7c50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab013aca0; to 'JaxprTracer' at 0x7ffab0139a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dd62030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718970>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d9b330; to 'JaxprTracer' at 0x7ff712d982c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x382dd350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086664d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504dcdb0; to 'JaxprTracer' at 0x7ff70bace570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x418594b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284146a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08796c50; to 'JaxprTracer' at 0x7ffa087955d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20520f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013bfa0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120a1b70; to 'JaxprTracer' at 0x7ff7120a23e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3157b040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62c80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7075fb50; to 'JaxprTracer' at 0x7ffb7075c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x779dbf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c1370>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd055c7c0; to 'JaxprTracer' at 0x7ffbd055f1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xdd3d570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0340ed0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3072dee0; to 'JaxprTracer' at 0x7ffb3072df80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fd9100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c260240>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab078cef0; to 'JaxprTracer' at 0x7ffab078fba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33cd9c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c29c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05089f0; to 'JaxprTracer' at 0x7ff9d050ab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b2a5dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2eb0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0478ef0; to 'JaxprTracer' at 0x7ffcb0478720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83de67a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bf270>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0734270; to 'JaxprTracer' at 0x7ffbd0734630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27a58150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7146724f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905c4900; to 'JaxprTracer' at 0x7ff70ceafd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97738bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5300>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70721df0; to 'JaxprTracer' at 0x7ffa70720ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fccd5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057f880>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4b6070; to 'JaxprTracer' at 0x7ff70c212700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb64f6470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
40, epoch_train_loss=3.2796184744785317
Epoch 41
Epoch 41 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5310>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788864630; to 'JaxprTracer' at 0x7ff788865120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dd5a5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5450>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ccc1c60; to 'JaxprTracer' at 0x7ff70ccc1300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc43d040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055cdb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702a6200; to 'JaxprTracer' at 0x7ffb702a7330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33f10400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055cd80>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102a7c40; to 'JaxprTracer' at 0x7ffa102a6bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x520127f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41e2b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c758b30; to 'JaxprTracer' at 0x7ff70c758770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x600ebb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c14d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb059dee0; to 'JaxprTracer' at 0x7ffbb059e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4809a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289510>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c225530; to 'JaxprTracer' at 0x7ffd2c226e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x979d1930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289820>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05717b0; to 'JaxprTracer' at 0x7ffbb05705e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b0143e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807190>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bfb67f0; to 'JaxprTracer' at 0x7ff70bfb62a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabaf5270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b0190>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303fb9c0; to 'JaxprTracer' at 0x7ffa303fba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cd2c7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d91f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105327f0; to 'JaxprTracer' at 0x7ffa10531ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6eb0830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cf5a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc886daca0; to 'JaxprTracer' at 0x7ffb907a31a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b17de20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b99a0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b7ddf0; to 'JaxprTracer' at 0x7ff712b7c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1eb54440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01278f0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c15bf60; to 'JaxprTracer' at 0x7ffd2c15b150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c7d5d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644cb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad052be70; to 'JaxprTracer' at 0x7ffad0529f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb68e17b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b6c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6e9cb0; to 'JaxprTracer' at 0x7ff70c6ea840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd253f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00667e0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc500b1170; to 'JaxprTracer' at 0x7ffc500b2ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47d8b2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128077c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0836e700; to 'JaxprTracer' at 0x7ffa0836dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd0fda2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4540>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123708b0; to 'JaxprTracer' at 0x7ff712373100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b0f2980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8850>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05c1b20; to 'JaxprTracer' at 0x7ff9d04abe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x264c8120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671070>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139b00e0; to 'JaxprTracer' at 0x7ffc10197dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f709800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d3630>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501c2e80; to 'JaxprTracer' at 0x7ffb501c3ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33ed62c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768c10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0771080; to 'JaxprTracer' at 0x7ffbf0770e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4856fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70674990>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026eb60; to 'JaxprTracer' at 0x7ffb3026ca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x517d0b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1470>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0478e50; to 'JaxprTracer' at 0x7ffcb047aac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabed6ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dc840>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50193e20; to 'JaxprTracer' at 0x7ffb50190810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5feb57c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0222520>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b493a0; to 'JaxprTracer' at 0x7ff788b494e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0feff00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
41, epoch_train_loss=3.2796184744785317
Epoch 42
Epoch 42 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08666d30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb304d9d50; to 'JaxprTracer' at 0x7ffb304d9bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x666c98a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fed3a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ff7510; to 'JaxprTracer' at 0x7ff712ff5580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cff1fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707091b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bee5800; to 'JaxprTracer' at 0x7ff70bee6ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2019f0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d8970>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03acd60; to 'JaxprTracer' at 0x7ffbd03af970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43fe69a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708555530>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb001b100; to 'JaxprTracer' at 0x7ffcd4443920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb8343490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417ad0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c15b740; to 'JaxprTracer' at 0x7ffd2c159d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cb63110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013a490>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145d7060; to 'JaxprTracer' at 0x7ff7145d73d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30b0d080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139a30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c242a20; to 'JaxprTracer' at 0x7ff70c240400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c80d7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804f90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1ea4d0; to 'JaxprTracer' at 0x7ff70c1ebf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa73ce890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650da0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa702d14e0; to 'JaxprTracer' at 0x7ffa702d2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b0054c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760490>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06ad990; to 'JaxprTracer' at 0x7ffcb044d530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6892eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0342e70>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71440f880; to 'JaxprTracer' at 0x7ffc50288e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bca59f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473cbf0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307022a0; to 'JaxprTracer' at 0x7ffb30702ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d8d1990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da480>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb059d0d0; to 'JaxprTracer' at 0x7ff70b8a5300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50959e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085569c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105c0310; to 'JaxprTracer' at 0x7ffa105c2020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ac83720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415fc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90439fd0; to 'JaxprTracer' at 0x7ffcb0749620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e808f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0dc0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4275850; to 'JaxprTracer' at 0x7ffcd42754e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x918d2790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62ee0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc500156c0; to 'JaxprTracer' at 0x7ffc500172e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d79f2e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a41b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad05bbf60; to 'JaxprTracer' at 0x7ffad05bb600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24473b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c2897c0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02b0cc0; to 'JaxprTracer' at 0x7ffcb02b2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45ee3a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2635d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb021c630; to 'JaxprTracer' at 0x7ffcb021c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc04d7c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647ba0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ec8400; to 'JaxprTracer' at 0x7ffbd037cae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c5d4170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec18c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70699d50; to 'JaxprTracer' at 0x7ffb7069a430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ef41960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be950>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501c3380; to 'JaxprTracer' at 0x7ffb501c18a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33f41340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670550>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102379c0; to 'JaxprTracer' at 0x7ffa10237bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x879f7a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5400>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5070e020; to 'JaxprTracer' at 0x7ffa5070c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6682ccc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e2bd0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04249a0; to 'JaxprTracer' at 0x7ff9d0424810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d16fdd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
42, epoch_train_loss=3.2796184744785317
Epoch 43
Epoch 43 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4293e90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504dd120; to 'JaxprTracer' at 0x7ffc504dff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x440b8df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e51a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107374c0; to 'JaxprTracer' at 0x7ffa10736fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fae9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055ee90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3072e340; to 'JaxprTracer' at 0x7ffb3072e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61113a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055e050>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5072fb00; to 'JaxprTracer' at 0x7ffb5072d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7fb4bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41efd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901cd940; to 'JaxprTracer' at 0x7ffb901ceca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b47f690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90383590>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bacce50; to 'JaxprTracer' at 0x7ff70bacc590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40dae260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5650>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98208770; to 'JaxprTracer' at 0x7ffa9820af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc4750a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4c80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0254400; to 'JaxprTracer' at 0x7ff9d02570b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11846910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804060>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714483060; to 'JaxprTracer' at 0x7ff714480770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x945ae570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c23e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5042d260; to 'JaxprTracer' at 0x7ffc5042f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x267986c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3de0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88519210; to 'JaxprTracer' at 0x7ffc8851a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c02c770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f9900>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70abcb150; to 'JaxprTracer' at 0x7ff70abca610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x447f8560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ba780>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28432ca0; to 'JaxprTracer' at 0x7ffb28431fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48aea90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876ae30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712580450; to 'JaxprTracer' at 0x7ff70ceaf150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ea3fbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706771a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b894450; to 'JaxprTracer' at 0x7ff70b897f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4860bf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bef0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1035eb60; to 'JaxprTracer' at 0x7ffc1035d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3019dc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10186860>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c729300; to 'JaxprTracer' at 0x7ff70c7281d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f1a7710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807430>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28184720; to 'JaxprTracer' at 0x7ffb28186e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaba70820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6df190>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcad990; to 'JaxprTracer' at 0x7ffbf059fb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55d592e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672db0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141029d0; to 'JaxprTracer' at 0x7ff714103ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57baece0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cbd10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ba9f740; to 'JaxprTracer' at 0x7ff70ba9e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30b7d2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bfc90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03fbe70; to 'JaxprTracer' at 0x7ffbb03fb6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81c81cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0126f90>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9011c130; to 'JaxprTracer' at 0x7ffc9011d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32213270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88646d90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02b2c50; to 'JaxprTracer' at 0x7ffcb02b0540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb309be00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c260ca0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05f85e0; to 'JaxprTracer' at 0x7ffbd05fb8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58927a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473f2b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080fe020; to 'JaxprTracer' at 0x7ffa30144ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc22c4260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057d920>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03c7b50; to 'JaxprTracer' at 0x7ffbb03c79c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x366358f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
43, epoch_train_loss=3.2796184744785317
Epoch 44
Epoch 44 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079f840>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3070de40; to 'JaxprTracer' at 0x7ffc3070d670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaba1d0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07625a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ba9d260; to 'JaxprTracer' at 0x7ff70ba9ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60b746c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341390>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3036aca0; to 'JaxprTracer' at 0x7ffc3036aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2dd5170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2fa0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788d704f0; to 'JaxprTracer' at 0x7ff788d700e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6127f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071a080>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71326fa60; to 'JaxprTracer' at 0x7ff71326fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x901cdd00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284155e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ceafe70; to 'JaxprTracer' at 0x7ff70ceaf9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac2407e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b240>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07f27a0; to 'JaxprTracer' at 0x7ff7145d7a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb85f8930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013a6b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce5ddf0; to 'JaxprTracer' at 0x7ff70ce5ed90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x199b7e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128072b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714853c90; to 'JaxprTracer' at 0x7ff714852c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58e2db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8dad10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eee980; to 'JaxprTracer' at 0x7ff713eeeb60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57198860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653790>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03c9fd0; to 'JaxprTracer' at 0x7ffbb03c9170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c3bf890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fed0d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d02553f0; to 'JaxprTracer' at 0x7ff9d0255e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ab0d470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70709b70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ae43b0; to 'JaxprTracer' at 0x7ff788ae7830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87ccb240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce15a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb059d760; to 'JaxprTracer' at 0x7ffbb059fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfe0dbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719ee0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105c1440; to 'JaxprTracer' at 0x7ffa105c2930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x904ba860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417720>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00d5bc0; to 'JaxprTracer' at 0x7ffcb00d7b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49e15a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6370>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981e3970; to 'JaxprTracer' at 0x7ffa981e3a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7370a340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101866a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085e1df0; to 'JaxprTracer' at 0x7ff7085e19e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10045040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d1500>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30459800; to 'JaxprTracer' at 0x7ffa3045b6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ea447e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262690>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904645e0; to 'JaxprTracer' at 0x7ffb08545300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3086b430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289c00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709b0bec0; to 'JaxprTracer' at 0x7ff709b08270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bd4e3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677940>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0219990; to 'JaxprTracer' at 0x7ffbd021a5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55b6e8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da7c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb301125c0; to 'JaxprTracer' at 0x7ffb301104a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72450fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708555680>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5044aa70; to 'JaxprTracer' at 0x7ff713ca3470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3dd3a3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c9b80>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70449440; to 'JaxprTracer' at 0x7ff788eca9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x459a420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ba060>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906f0cc0; to 'JaxprTracer' at 0x7ffc900dacf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x471ae580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0222640>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08772e30; to 'JaxprTracer' at 0x7ffa0840f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xca4ba160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
44, epoch_train_loss=3.2796184744785317
Epoch 45
Epoch 45 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4e00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd420e2f0; to 'JaxprTracer' at 0x7ffcd420d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0a5cc60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2d60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306d3a10; to 'JaxprTracer' at 0x7ffc306d2610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7736ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0625a60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb061c680; to 'JaxprTracer' at 0x7ffcb061f420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e256070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a7d10>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106cc950; to 'JaxprTracer' at 0x7ff70cc09a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6827730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769b40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1035fbf0; to 'JaxprTracer' at 0x7ffc1035ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3439d9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289490>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d86480; to 'JaxprTracer' at 0x7ff712d849a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x485711a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6def70>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0344d60; to 'JaxprTracer' at 0x7ffbf0344040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x115f4f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dd990>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5028b380; to 'JaxprTracer' at 0x7ffc5028a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f7fbb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6800>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90440090; to 'JaxprTracer' at 0x7ffc904421b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7c84090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce620e0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c18b150; to 'JaxprTracer' at 0x7ffd2c18b060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27725e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3030>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b935490; to 'JaxprTracer' at 0x7ff70b9346d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e8b1910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e50e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03ad080; to 'JaxprTracer' at 0x7ffbd03af560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7c2ce80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055ec60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90233650; to 'JaxprTracer' at 0x7ffc902323e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72693850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055f250>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71468b1f0; to 'JaxprTracer' at 0x7ff714144cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f9385b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706777a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf00400; to 'JaxprTracer' at 0x7ff70bf02890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcfe2f450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263f70>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90230b80; to 'JaxprTracer' at 0x7ffb90230220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc816f080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00659f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30300400; to 'JaxprTracer' at 0x7ffc30300900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb68daf10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5300>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500c01d0; to 'JaxprTracer' at 0x7ff70b6d50d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x138b74f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647610>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5024dc10; to 'JaxprTracer' at 0x7ffc5024d710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb51b3370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cb220>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07207c0; to 'JaxprTracer' at 0x7ffab0721300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x371516e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670920>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fcb2e0; to 'JaxprTracer' at 0x7ff712fcba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7e449f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557e70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712dc7e20; to 'JaxprTracer' at 0x7ff712dc6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d699b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0126c40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d017ff10; to 'JaxprTracer' at 0x7ff7143c8090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87938470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90383030>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50414130; to 'JaxprTracer' at 0x7ffb2812d580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xace29540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263900>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa986bdb70; to 'JaxprTracer' at 0x7ff70b69e9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb70de5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473cf40>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107a28e0; to 'JaxprTracer' at 0x7ffc107a13a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa37a4870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e3fa0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98405350; to 'JaxprTracer' at 0x7ffa98405bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x878362c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
45, epoch_train_loss=3.2796184744785317
Epoch 46
Epoch 46 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667880>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303faa20; to 'JaxprTracer' at 0x7ffa303fba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcef3700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651fc0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081d0fe0; to 'JaxprTracer' at 0x7ffb081d3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb857fa30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fed3c0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902fb5b0; to 'JaxprTracer' at 0x7ffc902f8ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x916d2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce30e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081513a0; to 'JaxprTracer' at 0x7ffb08150ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x175b9e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd610>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad052af70; to 'JaxprTracer' at 0x7ffad052b920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x375911a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c9280>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70a83d1c0; to 'JaxprTracer' at 0x7ff70a83d990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x354d2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c16c0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0711760; to 'JaxprTracer' at 0x7ffad0712e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e622180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0d20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301382c0; to 'JaxprTracer' at 0x7ffc30139bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3279f7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0064da0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c057290; to 'JaxprTracer' at 0x7ffd2c0541d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc4cdb780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41f360>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88706ed0; to 'JaxprTracer' at 0x7ffc88704360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e78fd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d9620>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280e1cb0; to 'JaxprTracer' at 0x7ffb280e2390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x246e5a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0761650>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9011fd30; to 'JaxprTracer' at 0x7ffc9011f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c56c930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0343520>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08768e00; to 'JaxprTracer' at 0x7ffa0876ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb77f1450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882dbb80>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50330ef0; to 'JaxprTracer' at 0x7ffa503323e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31d3ce60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888becf0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025eed0; to 'JaxprTracer' at 0x7ffcb025c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46788ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c98c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88277650; to 'JaxprTracer' at 0x7ffc88276840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x318ead20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c2de0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70cc0a3e0; to 'JaxprTracer' at 0x7ff70cc08b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60206720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10187b50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50016110; to 'JaxprTracer' at 0x7ffc50014720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f2a38f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070ba80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3045aac0; to 'JaxprTracer' at 0x7ffa3045b740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15f7e230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d8cd0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3072c130; to 'JaxprTracer' at 0x7ffb3072fce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x427309b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28ad70>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307a0270; to 'JaxprTracer' at 0x7ffb307a10d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2b6a5ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769680>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507860c0; to 'JaxprTracer' at 0x7ffb50787c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92d24560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec09e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701f6200; to 'JaxprTracer' at 0x7ffb90467d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32a73300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415c10>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1bc1d0; to 'JaxprTracer' at 0x7ff70c1be1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3224bcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b9cb0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca0ea0; to 'JaxprTracer' at 0x7ff713ca0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd1c6d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0627ae0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd424be70; to 'JaxprTracer' at 0x7ff70ceae2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39198990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057dab0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b1810d0; to 'JaxprTracer' at 0x7ff70b180f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4584d220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
46, epoch_train_loss=3.2796184744785317
Epoch 47
Epoch 47 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675780>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3058c360; to 'JaxprTracer' at 0x7ffc3058eed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd00ec1f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1b50>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd037ddf0; to 'JaxprTracer' at 0x7ffbd037e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60e36d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fba20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30458130; to 'JaxprTracer' at 0x7ffa30459b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa8707480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4260>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0755710; to 'JaxprTracer' at 0x7ffab07541d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4592a2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876af80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105c0770; to 'JaxprTracer' at 0x7ffa105c1170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f7dc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5470>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ae0680; to 'JaxprTracer' at 0x7ff712ae0040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x105a39a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644840>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0151030; to 'JaxprTracer' at 0x7ffbf0150c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d62e190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10185320>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304b8130; to 'JaxprTracer' at 0x7ffc304ba750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c08f930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128047c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06afce0; to 'JaxprTracer' at 0x7ffcb06af5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3147ac30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557610>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd47a6c50; to 'JaxprTracer' at 0x7ffcd47a6d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e278b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6290>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28167b00; to 'JaxprTracer' at 0x7ffb28167d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x19b8e830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b0e50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5075c4f0; to 'JaxprTracer' at 0x7ffb5075c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f35160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf06269d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5026b470; to 'JaxprTracer' at 0x7ffc5026a5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10dc4760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01265a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708504900; to 'JaxprTracer' at 0x7ff7085061b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x524155c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382d90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711faf240; to 'JaxprTracer' at 0x7ff711fae570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb29df4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c260110>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0360db0; to 'JaxprTracer' at 0x7ffbb0361df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91c26c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10186e40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5012f2e0; to 'JaxprTracer' at 0x7ffa5012ea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabe014d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804bf0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102df2e0; to 'JaxprTracer' at 0x7ffa102dca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87b59f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847f6a0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712040040; to 'JaxprTracer' at 0x7ff712041120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c68edc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca450>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e15490; to 'JaxprTracer' at 0x7ffbf07428e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51cd2160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414720>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd4cc70; to 'JaxprTracer' at 0x7ff70bd4d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6aa5a3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bf360>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05680e0; to 'JaxprTracer' at 0x7ffad0322700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3f64450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055ef30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03ff1a0; to 'JaxprTracer' at 0x7ff71285cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7f540c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c2889c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3036bd30; to 'JaxprTracer' at 0x7ffc303696c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d2af6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2607a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1be3e0; to 'JaxprTracer' at 0x7ffb70733a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x965cd170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e1d0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa702d0900; to 'JaxprTracer' at 0x7ffa702d35b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92c8c6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd02220e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b17ba0; to 'JaxprTracer' at 0x7ff788b17f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf7fad60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
47, epoch_train_loss=3.2796184744785317
Epoch 48
Epoch 48 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079e8e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712559a80; to 'JaxprTracer' at 0x7ff712559760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4a587d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08664ec0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ff5350; to 'JaxprTracer' at 0x7ff712ff6570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x836beb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651e40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083c8e00; to 'JaxprTracer' at 0x7ffa083c9df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58663510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473d820>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139509f0; to 'JaxprTracer' at 0x7ff713952020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c1f360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d80c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135a9a30; to 'JaxprTracer' at 0x7ff7135ab2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c3ebc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416740>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708507600; to 'JaxprTracer' at 0x7ff708505490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a26ca00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013bb00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01aba10; to 'JaxprTracer' at 0x7ffbd01a80e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1eb85c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013a040>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0473a60; to 'JaxprTracer' at 0x7ff9d0473150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ab71af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804500>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03bf060; to 'JaxprTracer' at 0x7ff7085309a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55e90030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4291330>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e3d080; to 'JaxprTracer' at 0x7ff788e3d210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x789df20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c2150>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501c2e30; to 'JaxprTracer' at 0x7ffb501c1bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x110da760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f670>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c225490; to 'JaxprTracer' at 0x7ffd2c224e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa257c3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b5d90>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0256750; to 'JaxprTracer' at 0x7ff70bd46f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd37dc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473dcc0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30701f30; to 'JaxprTracer' at 0x7ffb307003b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11639590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b720>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0816c4f0; to 'JaxprTracer' at 0x7ffa0816c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c310cc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414800>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4402f70; to 'JaxprTracer' at 0x7ff70bb21850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66d217e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d33d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132fd170; to 'JaxprTracer' at 0x7ff7132ffe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56cb5570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6f50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120a3970; to 'JaxprTracer' at 0x7ffc884498f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76ea5d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e0da0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd055ef20; to 'JaxprTracer' at 0x7ff7085927f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f05cba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c260310>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf058f830; to 'JaxprTracer' at 0x7ffbf058ef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc9f9d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dd3b0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08139ad0; to 'JaxprTracer' at 0x7ffa0813b240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88adb190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90383580>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb003f970; to 'JaxprTracer' at 0x7ffcb003ebb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72f7040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2820>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c189800; to 'JaxprTracer' at 0x7ffd2c188400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54ace120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2810>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd4e6b0; to 'JaxprTracer' at 0x7ff70bd4f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32217490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7146733f0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98299f30; to 'JaxprTracer' at 0x7ff788e7c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5728730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055d2c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50415260; to 'JaxprTracer' at 0x7ffb504176a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69791530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057db40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713003650; to 'JaxprTracer' at 0x7ff713003790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42fcfc40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
48, epoch_train_loss=3.2796184744785317
Epoch 49
Epoch 49 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b1430>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0674450; to 'JaxprTracer' at 0x7ff9d0677010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43621c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9ee0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70448fe0; to 'JaxprTracer' at 0x7ffb70448e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78bbb860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5a10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50015490; to 'JaxprTracer' at 0x7ffc50015710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44c10060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a6a70>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70cc08e00; to 'JaxprTracer' at 0x7ff70cc08950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6460fbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876b5c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306528e0; to 'JaxprTracer' at 0x7ffa306504a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46413570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4980>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500ff740; to 'JaxprTracer' at 0x7ffa500fc360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d4d9bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647670>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03fb380; to 'JaxprTracer' at 0x7ffbf03f9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f2a94d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ed40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb001ab60; to 'JaxprTracer' at 0x7ffcb0019f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83edb8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712806c40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01a13f0; to 'JaxprTracer' at 0x7ffc90442250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36bb7350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184ee0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500c0270; to 'JaxprTracer' at 0x7ff70b72b600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71d2a780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708556680>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03bc450; to 'JaxprTracer' at 0x7ffab03bda30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52977790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5ed0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30524360; to 'JaxprTracer' at 0x7ffad0710e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ab5a4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f9500>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd478f970; to 'JaxprTracer' at 0x7ffcd478e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cd83050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bc20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125818a0; to 'JaxprTracer' at 0x7ff712581080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88468480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28bce0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b36fc0; to 'JaxprTracer' at 0x7ff788b36250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b3dbfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6de7a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01eac00; to 'JaxprTracer' at 0x7ff70cc9bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x697d0030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847d3c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5047f4c0; to 'JaxprTracer' at 0x7ffb5047d030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c83ea40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128069c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc886d9cb0; to 'JaxprTracer' at 0x7ffc886da020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e5397e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd350>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa704d49a0; to 'JaxprTracer' at 0x7ffa704d4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2dea4850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013abf0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb082062f0; to 'JaxprTracer' at 0x7ff712371670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60677df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8310>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07234c0; to 'JaxprTracer' at 0x7ffab07204a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32f7cdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415bb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9069e8e0; to 'JaxprTracer' at 0x7ffc9069c130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d0ec7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0126830>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888b3330; to 'JaxprTracer' at 0x7ff7888b24d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ecf490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90381130>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0280270; to 'JaxprTracer' at 0x7ff71413cd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a008990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6ddad0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd4e250; to 'JaxprTracer' at 0x7ff70bd4ea20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6077b120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067040>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888e5300; to 'JaxprTracer' at 0x7ff7888e6d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66387050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd02223f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f1170; to 'JaxprTracer' at 0x7ffa983f2700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7facde70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
49, epoch_train_loss=3.2796184744785317
Epoch 50
Epoch 50 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055c290>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71229f790; to 'JaxprTracer' at 0x7ff71229d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69e94620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c3480>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab078f5b0; to 'JaxprTracer' at 0x7ffab078e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x114452e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022c0b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa705354e0; to 'JaxprTracer' at 0x7ffa70536520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86f9e040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fef290>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c1b5940; to 'JaxprTracer' at 0x7ffd2c1b5030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb78ce830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882dabd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711faca40; to 'JaxprTracer' at 0x7ff711fac040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1000dec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672f90>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b7c590; to 'JaxprTracer' at 0x7ffc886ab920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51d52ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70709840>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102a4630; to 'JaxprTracer' at 0x7ffbb0201bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bc90da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070bf50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507f39c0; to 'JaxprTracer' at 0x7ffb507f1a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dc4c380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066b10>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5044b380; to 'JaxprTracer' at 0x7ff712006660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77182320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675dd0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8847a070; to 'JaxprTracer' at 0x7ffc884794e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fe530e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41da80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab05a1d50; to 'JaxprTracer' at 0x7ffab05a10d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e49d7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08666df0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d017fec0; to 'JaxprTracer' at 0x7ff9d017fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77a01ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650ef0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714453e20; to 'JaxprTracer' at 0x7ff714451120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd1c5e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e190>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981acd10; to 'JaxprTracer' at 0x7ff9d050a020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc0616900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882dab00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01db600; to 'JaxprTracer' at 0x7ffbd01d87c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcfebcfd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673dc0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4493920; to 'JaxprTracer' at 0x7ffcd4492c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cc95d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d2d70>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa085c7010; to 'JaxprTracer' at 0x7ffa085c6b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54c75580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bee60>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05eac50; to 'JaxprTracer' at 0x7ffbb05e9210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x919d3990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb507189b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900462f0; to 'JaxprTracer' at 0x7ffc90046070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56c46ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2634d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3072d490; to 'JaxprTracer' at 0x7ffb3072cfe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29cea1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f65d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa984b1490; to 'JaxprTracer' at 0x7ffa107341d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d686430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb087687f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fc91c0; to 'JaxprTracer' at 0x7ff712fcb060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2100d690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce22b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3058e570; to 'JaxprTracer' at 0x7ffc3058f3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x381907e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec3a70>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71285f1f0; to 'JaxprTracer' at 0x7ff71285e020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46375730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b980>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301a9e90; to 'JaxprTracer' at 0x7ffa301a81d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e4b51e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e58f0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05f9710; to 'JaxprTracer' at 0x7ffbd05f99e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96f090b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057e2b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01d4f90; to 'JaxprTracer' at 0x7ffbb01d52b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabd9db20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
50, epoch_train_loss=3.2796184744785317
Epoch 51
Epoch 51 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90383f40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c2ac0; to 'JaxprTracer' at 0x7ffc102c0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x693fd610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce636a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9069e160; to 'JaxprTracer' at 0x7ffbd037f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51855a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c04a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085e0680; to 'JaxprTracer' at 0x7ff7085e1cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2746de10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a61f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd42761b0; to 'JaxprTracer' at 0x7ffcd4276110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x16200d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28ab10>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c454680; to 'JaxprTracer' at 0x7ffd2c454d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77580370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dec70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0876af70; to 'JaxprTracer' at 0x7ffa0876abb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x324d7eb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bf7d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce5d350; to 'JaxprTracer' at 0x7ffc5049c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59141b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066420>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0018c20; to 'JaxprTracer' at 0x7ffcb001b6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1206f430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070bd80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08620c70; to 'JaxprTracer' at 0x7ffa08620bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd01ff240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079d5c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb044fa10; to 'JaxprTracer' at 0x7ffcb044fec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d47c120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0761650>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07244a0; to 'JaxprTracer' at 0x7ffcb0724540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd484a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085548d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca53f0; to 'JaxprTracer' at 0x7ff70bd7f060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5eec80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e67b0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02009a0; to 'JaxprTracer' at 0x7ffbb02002c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaabde830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0125120>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb043a7f0; to 'JaxprTracer' at 0x7ffcb0439440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56665240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5020>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce21d00; to 'JaxprTracer' at 0x7ff70ce21210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cee69b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644740>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0382ac0; to 'JaxprTracer' at 0x7ffbf0380ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x459c4480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00677a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00ac040; to 'JaxprTracer' at 0x7ffcb00aff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45518cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e3670>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28184360; to 'JaxprTracer' at 0x7ffb28184400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x569c1090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7660>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0173420; to 'JaxprTracer' at 0x7ffbd0171620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44e6a2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cab40>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50785ee0; to 'JaxprTracer' at 0x7ffb50784d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b19c210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da330>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304ef470; to 'JaxprTracer' at 0x7ffc304ef5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cc2ee50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341a20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07f0f40; to 'JaxprTracer' at 0x7ffab07f1210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58cdd300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055f0d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0214ae0; to 'JaxprTracer' at 0x7ffcd4402d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bb9f590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c260c00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e16250; to 'JaxprTracer' at 0x7ff788e15030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51cd6a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847fef0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7022d1c0; to 'JaxprTracer' at 0x7ffb7022f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f6265e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08665e30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10196d90; to 'JaxprTracer' at 0x7ffc10194450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87ec0100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0220d00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125a49f0; to 'JaxprTracer' at 0x7ff7125a4860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29fcfee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
51, epoch_train_loss=3.2796184744785317
Epoch 52
Epoch 52 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4291110>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c56a7f0; to 'JaxprTracer' at 0x7ff70c5680e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b0e9f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b8060>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1039c360; to 'JaxprTracer' at 0x7ffb302a41d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ad74030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d8c10>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083cbb00; to 'JaxprTracer' at 0x7ffa083cbdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4dea120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fec620>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505ed1c0; to 'JaxprTracer' at 0x7ffb505ef290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78ac99b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0342690>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cef1f0; to 'JaxprTracer' at 0x7ff9d01a71f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7ebdbf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c9620>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50269300; to 'JaxprTracer' at 0x7ffc50268c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91303ab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e3180>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8829ec50; to 'JaxprTracer' at 0x7ffc8829e3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x619f62e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1820>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c18bfb0; to 'JaxprTracer' at 0x7ffd2c189a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b3c7840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071b980>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141ae660; to 'JaxprTracer' at 0x7ff7141ad490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4d44de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac348370>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf013c900; to 'JaxprTracer' at 0x7ffbf013c4f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4187f080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677cd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf063b2e0; to 'JaxprTracer' at 0x7ff70bce7bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55f4a480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41c810>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00198a0; to 'JaxprTracer' at 0x7ffcb001ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd922b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667160>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10566980; to 'JaxprTracer' at 0x7ffa10566e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92493690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feec00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c8a070; to 'JaxprTracer' at 0x7ff713c8a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2926c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882dbf20>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712346890; to 'JaxprTracer' at 0x7ff712347c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20620590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8160>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3063b1a0; to 'JaxprTracer' at 0x7ffa10766c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3581850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070b990>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0616de0; to 'JaxprTracer' at 0x7ffab0617ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2fdf6680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5d00>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc884e9d50; to 'JaxprTracer' at 0x7ffc884e9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7de0d9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557370>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98653ba0; to 'JaxprTracer' at 0x7ffab0754f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fb88bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847dc50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3045ac50; to 'JaxprTracer' at 0x7ffbd055d8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4604e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dc770>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50014310; to 'JaxprTracer' at 0x7ffc50014a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbdf6150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c260530>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50566a20; to 'JaxprTracer' at 0x7ffa505653f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc97e310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce0de0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788cef290; to 'JaxprTracer' at 0x7ff788cede40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f11bc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1f60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0171580; to 'JaxprTracer' at 0x7ffbd01730b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa772b410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672f00>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122e54e0; to 'JaxprTracer' at 0x7ff7122e5170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x21fef480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e7ed0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca17b0; to 'JaxprTracer' at 0x7ff713ca35b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96f0b9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac34bb00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0433290; to 'JaxprTracer' at 0x7ff6ac39e3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1794e730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
52, epoch_train_loss=3.2796184744785317
Epoch 53
Epoch 53 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184d70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148460c0; to 'JaxprTracer' at 0x7ff7148451c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xfae1280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62270>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07431a0; to 'JaxprTracer' at 0x7ffbf0743880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2687d350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3df0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd055f380; to 'JaxprTracer' at 0x7ffbd055f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1830a710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4490>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50599080; to 'JaxprTracer' at 0x7ffa50599170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42566140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28a000>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148289f0; to 'JaxprTracer' at 0x7ff71482a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58d521e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847fea0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7144534c0; to 'JaxprTracer' at 0x7ff7144524d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d1f0890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067a30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888b2d90; to 'JaxprTracer' at 0x7ff7888b1710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x453853d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6b40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb001a0c0; to 'JaxprTracer' at 0x7ffcb0019d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x656e100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804520>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d1e90; to 'JaxprTracer' at 0x7ffb302d2250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bd096b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876b5a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145a8130; to 'JaxprTracer' at 0x7ff7145a97b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11fab9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3240>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd44d3fb0; to 'JaxprTracer' at 0x7ffcd44d1990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25f68d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302db530>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8829fa10; to 'JaxprTracer' at 0x7ffc8829e660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d80c8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e41d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bce5c10; to 'JaxprTracer' at 0x7ff70bce5490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cd84b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055dd40>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01cfbf0; to 'JaxprTracer' at 0x7ffbf01ce4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8397a630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f7590>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce21030; to 'JaxprTracer' at 0x7ff70ce20b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c383910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644f20>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c9690d0; to 'JaxprTracer' at 0x7ff70c9689f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b7bd490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7340>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00aea20; to 'JaxprTracer' at 0x7ffcb00af470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ba68fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804980>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10784e00; to 'JaxprTracer' at 0x7ffc10786b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x420ada00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b7be0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901926b0; to 'JaxprTracer' at 0x7ffb90190b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fe3fe30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cb9e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907f1580; to 'JaxprTracer' at 0x7ffb907f05e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcdb74300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1ab0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714102200; to 'JaxprTracer' at 0x7ff714103c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd8291e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0340ca0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30112f70; to 'JaxprTracer' at 0x7ffa30111530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb867ff50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124620>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5686d0; to 'JaxprTracer' at 0x7ff70c56a9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71b71d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6de510>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50394180; to 'JaxprTracer' at 0x7ffa50397dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52c3aa60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644f40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080ff560; to 'JaxprTracer' at 0x7ffa080fe340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x428a0ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382640>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0616070; to 'JaxprTracer' at 0x7ff7122e7420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2b25f6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057e340>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1023ed90; to 'JaxprTracer' at 0x7ffa1023e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb324b750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
53, epoch_train_loss=3.2796184744785317
Epoch 54
Epoch 54 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2980>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5012f4c0; to 'JaxprTracer' at 0x7ff7122a98a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ac68120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055ec40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06c4900; to 'JaxprTracer' at 0x7ff9d06c6610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76f90820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41d7b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70496c50; to 'JaxprTracer' at 0x7ffa704976f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c2a6820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f510>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10785760; to 'JaxprTracer' at 0x7ffb08150400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f061260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473fee0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ab1670; to 'JaxprTracer' at 0x7ff788ab3420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b9f3c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d8460>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106b5300; to 'JaxprTracer' at 0x7ffc106b6c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30de69d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672200>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8d77e0; to 'JaxprTracer' at 0x7ff70bce50d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x840e4610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417850>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2835c6d0; to 'JaxprTracer' at 0x7ffb2835c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e0d3cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070ae40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4274f90; to 'JaxprTracer' at 0x7ffcd42754e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x303ede00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e13d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30176bb0; to 'JaxprTracer' at 0x7ffc30670450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ad948a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d22c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc884794e0; to 'JaxprTracer' at 0x7ffc88478220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90b8250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847e8d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03fc630; to 'JaxprTracer' at 0x7ffab03fcc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e5c5870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8dba40>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888b3970; to 'JaxprTracer' at 0x7ff7888b1080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b67d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652970>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101367a0; to 'JaxprTracer' at 0x7ffc10136e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x752dc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0343940>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0876bbf0; to 'JaxprTracer' at 0x7ffab00d33d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4850b5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8e60>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30638860; to 'JaxprTracer' at 0x7ffc30638680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c958bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414df0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5062e750; to 'JaxprTracer' at 0x7ffb5062d440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c32b3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707097d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88274ae0; to 'JaxprTracer' at 0x7ffa702840e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcec9cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263c10>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa982625c0; to 'JaxprTracer' at 0x7ffa98261490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47d993d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be5f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712aa8810; to 'JaxprTracer' at 0x7ff712aaa2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7158fb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5220>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107ce3e0; to 'JaxprTracer' at 0x7ffcb077aa70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x530c3b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6ddda0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb019a700; to 'JaxprTracer' at 0x7ffbb019a570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10f21ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fed000>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c22f0; to 'JaxprTracer' at 0x7ffc102c0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e529c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec26d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106ce700; to 'JaxprTracer' at 0x7ffc106cd300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2a01c000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cae70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712578a40; to 'JaxprTracer' at 0x7ffb30521d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x243abfd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2b40>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048dd50; to 'JaxprTracer' at 0x7ffa3048d8f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3346b640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0222c40>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b3dcb0; to 'JaxprTracer' at 0x7ff712b3ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1aaef60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
54, epoch_train_loss=3.2796184744785317
Epoch 55
Epoch 55 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079d870>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9043b0b0; to 'JaxprTracer' at 0x7ffb90438d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a653890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0761710>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306d4a90; to 'JaxprTracer' at 0x7ffb30527ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf494d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302dba70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07544a0; to 'JaxprTracer' at 0x7ffab0757bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3bf48b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cc570>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701f7c40; to 'JaxprTracer' at 0x7ffb701f4db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57092fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0125640>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01538d0; to 'JaxprTracer' at 0x7ffbf01510d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f1c41c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f49c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137ca0c0; to 'JaxprTracer' at 0x7ff708591d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e65a4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88646a30>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080967a0; to 'JaxprTracer' at 0x7ffa08095940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44cf7770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00667e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab05a0950; to 'JaxprTracer' at 0x7ffab05a06d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cf25450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719420>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f5a80; to 'JaxprTracer' at 0x7ffa983f44a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaba91e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4890>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148514e0; to 'JaxprTracer' at 0x7ff7122aa430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86d88c80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876b6a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd7cd60; to 'JaxprTracer' at 0x7ff70bd7c720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49832a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b13e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708532ca0; to 'JaxprTracer' at 0x7ff708530cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5aaf1fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3bb0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01ebf60; to 'JaxprTracer' at 0x7ff9d01e9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6decb2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4760>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf75800; to 'JaxprTracer' at 0x7ff70bf75440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x449a7000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055ffb0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0217ba0; to 'JaxprTracer' at 0x7ff9d0216e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5853db10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847d330>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506818a0; to 'JaxprTracer' at 0x7ffc50681a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30c28f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066360>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00af330; to 'JaxprTracer' at 0x7ff70b8d6660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cb0a7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718fb0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709e62e30; to 'JaxprTracer' at 0x7ffd2c1b6b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cf17300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28b340>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa704d5ad0; to 'JaxprTracer' at 0x7ffa704d56c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dab20d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672b70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01064d0; to 'JaxprTracer' at 0x7ffab0107740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c9f81e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b4d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c533290; to 'JaxprTracer' at 0x7ff70c532250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18a848c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d92e0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707322f0; to 'JaxprTracer' at 0x7ffb70731b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1825e850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a6d40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0836fc40; to 'JaxprTracer' at 0x7ffb300dba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c2ba5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dd2f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5012f330; to 'JaxprTracer' at 0x7ffa5012e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6dd0c1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847faf0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90089940; to 'JaxprTracer' at 0x7ffc90089300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9214c9b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41d7c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712578b80; to 'JaxprTracer' at 0x7ffc1070c630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x307411e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac34aad0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad03441d0; to 'JaxprTracer' at 0x7ffa3048ff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4656ba60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
55, epoch_train_loss=3.2796184744785317
Epoch 56
Epoch 56 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fadc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4d7f60; to 'JaxprTracer' at 0x7ff70c4d7ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d4849e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4290c10>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc886ab330; to 'JaxprTracer' at 0x7ffc886a83b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e014930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bb440>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506a9210; to 'JaxprTracer' at 0x7ffc506a8bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e750420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667be0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf03c40; to 'JaxprTracer' at 0x7ff70bf01e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x729f6560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651160>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b37b00; to 'JaxprTracer' at 0x7ff788b36fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b5dff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da870>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa507c0cc0; to 'JaxprTracer' at 0x7ffa507c24d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12404820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670960>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30112700; to 'JaxprTracer' at 0x7ffb30111fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36a4b9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2614a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ec8400; to 'JaxprTracer' at 0x7ff788ecb560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x196dc0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071b3b0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eec810; to 'JaxprTracer' at 0x7ff713eefd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbc98740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8da320>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f5760; to 'JaxprTracer' at 0x7ffa983f54e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd16fe660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf06257f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03447c0; to 'JaxprTracer' at 0x7ffbf0346c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d797800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847f6b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50395ee0; to 'JaxprTracer' at 0x7ffa50396bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x585531c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c1fa0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c2f7420; to 'JaxprTracer' at 0x7ffc107a1c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59cd0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022c130>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a09df0; to 'JaxprTracer' at 0x7ff71397e980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fa55870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec0c10>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab00d28e0; to 'JaxprTracer' at 0x7ffa0816e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x324eebb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139280>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ae25c0; to 'JaxprTracer' at 0x7ff712ae0950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d0e8080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c260b80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f95d50; to 'JaxprTracer' at 0x7ff713f96ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12273ea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071bb90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8844a200; to 'JaxprTracer' at 0x7ffc88449030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59040cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473ecc0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712aaa610; to 'JaxprTracer' at 0x7ff712aa8ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1a725c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc886450a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3072cdb0; to 'JaxprTracer' at 0x7ffb3072d760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x575b6080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bf550>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08192fc0; to 'JaxprTracer' at 0x7ffb081913f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86f868d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4e20>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01a17b0; to 'JaxprTracer' at 0x7ffab01a3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a9c3440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fecfa0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab06159e0; to 'JaxprTracer' at 0x7ffab0616fc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbda5d8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0340900>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ceca90; to 'JaxprTracer' at 0x7ff788cee340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbc110910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013a4c0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0782750; to 'JaxprTracer' at 0x7ffbb0780860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57946770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d8bc0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad031ff10; to 'JaxprTracer' at 0x7ffad031f1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45b9aa40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057df00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0427560; to 'JaxprTracer' at 0x7ff9d0427ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x377d1ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
56, epoch_train_loss=3.2796184744785317
Epoch 57
Epoch 57 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6ddbc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0198400; to 'JaxprTracer' at 0x7ffc5021da30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x76b19a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079c0d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30526070; to 'JaxprTracer' at 0x7ffb30525e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ce3eec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3b60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712aab7e0; to 'JaxprTracer' at 0x7ff712aa9a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc0699000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4c50>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0692a20; to 'JaxprTracer' at 0x7ffcb0690220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cb82a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e42f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50332e80; to 'JaxprTracer' at 0x7ffa50330f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x87d92dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be710>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06ec860; to 'JaxprTracer' at 0x7ffbd06ef560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x612b0980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c2898d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa503966b0; to 'JaxprTracer' at 0x7ffa50394c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd021a110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c2885f0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707bda30; to 'JaxprTracer' at 0x7ffa707be610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cbce570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416fe0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88479df0; to 'JaxprTracer' at 0x7ffc8847a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x979738b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4690>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145a9ee0; to 'JaxprTracer' at 0x7ff7145aafc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4589b7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90380bf0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd7dd50; to 'JaxprTracer' at 0x7ff70bd7e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x93efcb50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101876b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5072f290; to 'JaxprTracer' at 0x7ff712578d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc53ac420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708554070>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03db1a0; to 'JaxprTracer' at 0x7ffbd03d8c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91c4fad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cf340>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b67ba10; to 'JaxprTracer' at 0x7ffbd03dbe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x174c62b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124880>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8d4130; to 'JaxprTracer' at 0x7ff70b8d5c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3312c5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847c0e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28430950; to 'JaxprTracer' at 0x7ff711fdacf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5316be80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70709b60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c33f0b0; to 'JaxprTracer' at 0x7ffd2c33c7c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4df254e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262380>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0352200; to 'JaxprTracer' at 0x7ffa10235620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc16c6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0f20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ced030; to 'JaxprTracer' at 0x7ff713ced7b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e9f7a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca760>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07116c0; to 'JaxprTracer' at 0x7ffad0711df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60427800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2720>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06c6480; to 'JaxprTracer' at 0x7ff9d06c4310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fe30d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651660>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280cde90; to 'JaxprTracer' at 0x7ffb280cdf30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c480160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a7510>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8851b880; to 'JaxprTracer' at 0x7ffc88519080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97b81180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055e450>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01a0ea0; to 'JaxprTracer' at 0x7ffab01a2a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57eeace0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88645170>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122e7060; to 'JaxprTracer' at 0x7ff7122e7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b3d6490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102baa40>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb008db20; to 'JaxprTracer' at 0x7ffcb008dbc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44520560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0223c00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280f2340; to 'JaxprTracer' at 0x7ffb280f2a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x248130b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
57, epoch_train_loss=3.2796184744785317
Epoch 58
Epoch 58 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d8110>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab06153f0; to 'JaxprTracer' at 0x7ffb90395580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37c57810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce0460>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb021e5c0; to 'JaxprTracer' at 0x7ffcb021de40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bda6030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0210>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05c2e30; to 'JaxprTracer' at 0x7ffbd05c1260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x174ee650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0030>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ab0f90; to 'JaxprTracer' at 0x7ff788ab3b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x669dd190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fee830>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70269df0; to 'JaxprTracer' at 0x7ffc304bb7e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46a3a190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec19d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888e75b0; to 'JaxprTracer' at 0x7ff7888e5a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83e17ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7146701d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01a8310; to 'JaxprTracer' at 0x7ffbd01abd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4c4aa70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473dee0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a0b30; to 'JaxprTracer' at 0x7ff70c1a3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5cf8030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071aa80>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505ee2f0; to 'JaxprTracer' at 0x7ffb505ecb80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ce974e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807e40>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa702d18f0; to 'JaxprTracer' at 0x7ffc8829c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23299120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e17e0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03476a0; to 'JaxprTracer' at 0x7ffc304faac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x500c9f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0625ad0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905c60c0; to 'JaxprTracer' at 0x7ffb905c6ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x439162d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675bc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce5d710; to 'JaxprTracer' at 0x7ff70ce5d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x663a2c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41d430>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04bea20; to 'JaxprTracer' at 0x7ffcb04bfa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6acd35d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022ce90>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa502bb2e0; to 'JaxprTracer' at 0x7ffa502bba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15630dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca710>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc502bf790; to 'JaxprTracer' at 0x7ffc502bf290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc94ddce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473d9b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71357c810; to 'JaxprTracer' at 0x7ff71357f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6bbeb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719270>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08795760; to 'JaxprTracer' at 0x7ffcb01f0a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x542edb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f7de0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30459cb0; to 'JaxprTracer' at 0x7ffa30459620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66ea4310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847f4e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507c6bb0; to 'JaxprTracer' at 0x7ffb507c7330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c347e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bc3f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c5698a0; to 'JaxprTracer' at 0x7ffc306add00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52aa0f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0126570>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70547e20; to 'JaxprTracer' at 0x7ffa70545cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61327be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08664780>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30144d10; to 'JaxprTracer' at 0x7ffa30146ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x120c7d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb03430a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf059ee80; to 'JaxprTracer' at 0x7ffbf059e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2d12cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5780>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30220090; to 'JaxprTracer' at 0x7ffb302222a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e848650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557f00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03bd260; to 'JaxprTracer' at 0x7ffab01a0ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b144480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac349820>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70cc72ca0; to 'JaxprTracer' at 0x7ff70cc727f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70b2b1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
58, epoch_train_loss=3.2796184744785317
Epoch 59
Epoch 59 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70709250>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1039e3e0; to 'JaxprTracer' at 0x7ffc1039e7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac47e930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382d70>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145fc590; to 'JaxprTracer' at 0x7ff7145fcd10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb702bad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62350>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad05bb920; to 'JaxprTracer' at 0x7ffad05ba110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd726de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4720>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd44925c0; to 'JaxprTracer' at 0x7ffcd44936a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xace4c320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5c70>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50330a40; to 'JaxprTracer' at 0x7ffa50332610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x840d5470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647980>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a09c60; to 'JaxprTracer' at 0x7ff713a09850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15d09080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2df0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5008cc70; to 'JaxprTracer' at 0x7ffc5008eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xff83ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1a60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa9844b290; to 'JaxprTracer' at 0x7ffa98448a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2feb5b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2619a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5035e750; to 'JaxprTracer' at 0x7ffb7078d620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b2a6280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306505a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01a21b0; to 'JaxprTracer' at 0x7ffbf01a0cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fa79bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b6350>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c900680; to 'JaxprTracer' at 0x7ff70c901c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c19ca70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079cb50>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a02c0; to 'JaxprTracer' at 0x7ffb307a18a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1897ccd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce60860>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b347ec0; to 'JaxprTracer' at 0x7ff70b3464d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e4c2a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93ba30>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500bd120; to 'JaxprTracer' at 0x7ffa500be9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x499d90e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055c9f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0773970; to 'JaxprTracer' at 0x7ffc5042e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e9c4370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847f1c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506445e0; to 'JaxprTracer' at 0x7ffc50644f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cfff7c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1490>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50744f40; to 'JaxprTracer' at 0x7ffa50747c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a78af50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e580>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd44424d0; to 'JaxprTracer' at 0x7ffcd44407c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f30cfa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb087699b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb047b790; to 'JaxprTracer' at 0x7ffa10594450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cd7e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec0110>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0711710; to 'JaxprTracer' at 0x7ffad07137e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac92adf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022ec70>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c96a20; to 'JaxprTracer' at 0x7ff713c941d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x872fa70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feed80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70af4f0b0; to 'JaxprTracer' at 0x7ff70af4e2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57b41d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904ce2c0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b895d00; to 'JaxprTracer' at 0x7ff70b896bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b756900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bcc80>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280e1fd0; to 'JaxprTracer' at 0x7ffb280e1530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a5df810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70674d30>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bee7740; to 'JaxprTracer' at 0x7ff70bee61b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c86f530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d2880>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281660c0; to 'JaxprTracer' at 0x7ffb281642c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29b249e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057e920>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701d1df0; to 'JaxprTracer' at 0x7ffb701d18f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcea8b3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
59, epoch_train_loss=3.2796184744785317
Epoch 60
Epoch 60 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6780>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907c9580; to 'JaxprTracer' at 0x7ffb907c9b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27c1fad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fa9a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07567f0; to 'JaxprTracer' at 0x7ffab0756d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd051f070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0624b90>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30333c90; to 'JaxprTracer' at 0x7ffc303320c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c22fb80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677530>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70268b80; to 'JaxprTracer' at 0x7ffa7026bfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7da59f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feea60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d047ad90; to 'JaxprTracer' at 0x7ff9d047b1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ac000c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2990>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7030a700; to 'JaxprTracer' at 0x7ffa703084f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x434b34b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672de0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712007ab0; to 'JaxprTracer' at 0x7ff712007470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59a8c850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473f4e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0781940; to 'JaxprTracer' at 0x7ffbb0781760>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ec38910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416b90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88705d00; to 'JaxprTracer' at 0x7ffc88707600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97a7e960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0223d10>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714853f10; to 'JaxprTracer' at 0x7ff714850c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49d86c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8dafd0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505a8310; to 'JaxprTracer' at 0x7ffb505a9f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f836fa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e06b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1035d8a0; to 'JaxprTracer' at 0x7ffc1035ecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb248d690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055ce50>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0705ad0; to 'JaxprTracer' at 0x7ffbf0706ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e5a5410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c3280>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab013b100; to 'JaxprTracer' at 0x7ffab013ac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xca4f7c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb03426f0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d05092b0; to 'JaxprTracer' at 0x7ff9d050bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d750420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b7b0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb9066f4c0; to 'JaxprTracer' at 0x7ffb9066e700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x431db320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473c710>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134d14e0; to 'JaxprTracer' at 0x7ff7134d0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59700a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284172f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0412fc0; to 'JaxprTracer' at 0x7ff714888220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55d7ff80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0126c90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc507c6e30; to 'JaxprTracer' at 0x7ffc507c6480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f4f7720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847d830>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad05baca0; to 'JaxprTracer' at 0x7ffad05b91c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf1e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88645910>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904c8ef0; to 'JaxprTracer' at 0x7ffc904c8f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61357320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7b10>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf755d0; to 'JaxprTracer' at 0x7ff70bf76cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83d3c9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08666960>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ccc10d0; to 'JaxprTracer' at 0x7ff712aa9210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6125f3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022fb20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90269cb0; to 'JaxprTracer' at 0x7ffb9026a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1d88c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da3b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907f3240; to 'JaxprTracer' at 0x7ffb907f0360>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9f8d4180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce61d30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900ada30; to 'JaxprTracer' at 0x7ffbb058b510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x394248c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac34ab00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71324ff10; to 'JaxprTracer' at 0x7ff71324f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d9edcc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
60, epoch_train_loss=3.2796184744785317
Epoch 61
Epoch 61 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055f030>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5012f330; to 'JaxprTracer' at 0x7ffa5012e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f9ca8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4e60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0705d50; to 'JaxprTracer' at 0x7ffad0706bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b1160a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079c6a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3045b060; to 'JaxprTracer' at 0x7ffa3045b240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55a01a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557cf0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0280810; to 'JaxprTracer' at 0x7ffcb0280a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52dab190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cf060>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb22110; to 'JaxprTracer' at 0x7ff70bb238d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd03e88a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00660f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10746890; to 'JaxprTracer' at 0x7ffc10746ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b5cc3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768120>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0749e40; to 'JaxprTracer' at 0x7ffcb074a480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36528c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769770>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28186ca0; to 'JaxprTracer' at 0x7ffb281871f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2b667f70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263460>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2840b740; to 'JaxprTracer' at 0x7ffb2840afc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x572f39e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41c350>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107ac2c0; to 'JaxprTracer' at 0x7ffc107af470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc6c376a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dc6c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd445eb60; to 'JaxprTracer' at 0x7ffcd445c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd00e5170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b7260>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0783ba0; to 'JaxprTracer' at 0x7ffb907a13f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb5168160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079fe10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c8bb50; to 'JaxprTracer' at 0x7ff713c8ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bb7a710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4d20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb061c3b0; to 'JaxprTracer' at 0x7ffcb061f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac84db20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bf350>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5042db70; to 'JaxprTracer' at 0x7ff9d0637d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x157e15e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847c7e0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03f8fe0; to 'JaxprTracer' at 0x7ffbb03f9e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1370e640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769ed0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50047560; to 'JaxprTracer' at 0x7ffc50045260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27725e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473d1c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04ab240; to 'JaxprTracer' at 0x7ff9d04a95d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5d2a00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da870>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b9367a0; to 'JaxprTracer' at 0x7ffb30462070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54af0380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca830>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50716ed0; to 'JaxprTracer' at 0x7ffb50715350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x267f8820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec3560>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0755940; to 'JaxprTracer' at 0x7ffab0756430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e0bf010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022ef90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081d1e40; to 'JaxprTracer' at 0x7ffa704d7470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37d44150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a6c80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132ffdd0; to 'JaxprTracer' at 0x7ff7132ff920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41d8390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647800>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7030ad90; to 'JaxprTracer' at 0x7ffc9064ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d91410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0590>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c242890; to 'JaxprTracer' at 0x7ff70c243bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59cd5d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4292df0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05660c0; to 'JaxprTracer' at 0x7ffab07d3bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90343540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057e6f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c783bf0; to 'JaxprTracer' at 0x7ff70c783a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2101bb10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
61, epoch_train_loss=3.2796184744785317
Epoch 62
Epoch 62 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0626200>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03827f0; to 'JaxprTracer' at 0x7ffbf0383290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d3dffb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d8210>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712dc45e0; to 'JaxprTracer' at 0x7ffb307746d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5631f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce0af0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5070c3b0; to 'JaxprTracer' at 0x7ffa5070e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27234e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086647d0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905c4f90; to 'JaxprTracer' at 0x7ffb905c5350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53af6bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341f80>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50463bf0; to 'JaxprTracer' at 0x7ffc504628e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d854560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139950>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1079b060; to 'JaxprTracer' at 0x7ffa10799300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d03d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473ebc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70972c180; to 'JaxprTracer' at 0x7ff70972ef70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33dda5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263590>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a3e70; to 'JaxprTracer' at 0x7ff70c1a2390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31a15ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d9700>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eedee0; to 'JaxprTracer' at 0x7ff713eeecf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46bf8790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651600>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302d02c0; to 'JaxprTracer' at 0x7ffb302d3ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc62cbc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feed00>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f6250; to 'JaxprTracer' at 0x7ffa983f5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x373e6f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d8760>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048d940; to 'JaxprTracer' at 0x7ffa3048c630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcc42d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1390>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902e2340; to 'JaxprTracer' at 0x7ffc902e0ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x581e41d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c3690>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148286d0; to 'JaxprTracer' at 0x7ff714829a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bd11130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec3d30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a08130; to 'JaxprTracer' at 0x7ff713a08270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x537fb640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673a70>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07a0770; to 'JaxprTracer' at 0x7ff70bb22bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x706b330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2601b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71229c950; to 'JaxprTracer' at 0x7ff71229c130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86ebc9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c14c0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50235670; to 'JaxprTracer' at 0x7ffb50235f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x735429f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ba9e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd096c0; to 'JaxprTracer' at 0x7ff70bd08590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x171c0820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bfc20>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc305218a0; to 'JaxprTracer' at 0x7ffc30523290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc861320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644d30>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c7bd8a0; to 'JaxprTracer' at 0x7ff70c7be070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4820980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4f10>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30700ea0; to 'JaxprTracer' at 0x7ffb30701e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa267fde0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022c7b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad02ede90; to 'JaxprTracer' at 0x7ffad02ecae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbdc798b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cb560>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa986bf5b0; to 'JaxprTracer' at 0x7ff712040860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaaaf1740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672860>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1011a700; to 'JaxprTracer' at 0x7ffc10119030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ac5b8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760750>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30521850; to 'JaxprTracer' at 0x7ffb30522070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd27eb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac3496b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03d6de0; to 'JaxprTracer' at 0x7ffbb03d6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1af0fcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
62, epoch_train_loss=3.2796184744785317
Epoch 63
Epoch 63 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876b660>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2812f6f0; to 'JaxprTracer' at 0x7ffb2812fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540d9b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055ec40>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145aac50; to 'JaxprTracer' at 0x7ff7145a8590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41400d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4d70>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981e2070; to 'JaxprTracer' at 0x7ffa981e0db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x19bb0730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0761a60>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3070f240; to 'JaxprTracer' at 0x7ffc3070f1f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d5471c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708555120>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04bc680; to 'JaxprTracer' at 0x7ffcb04bcf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x246106b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644980>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5076cae0; to 'JaxprTracer' at 0x7ffa5076c9a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab249080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ee00>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb06179c0; to 'JaxprTracer' at 0x7ffbb06164d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69e45d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847def0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300db100; to 'JaxprTracer' at 0x7ffb300dbfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd7ccae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415bf0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28408720; to 'JaxprTracer' at 0x7ffb2840b290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3314d2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805bd0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107ae980; to 'JaxprTracer' at 0x7ffc107ad5d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3c33c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0223870>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0840fa60; to 'JaxprTracer' at 0x7ffa502f9940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa00af390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41d850>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb008e520; to 'JaxprTracer' at 0x7ffcb008ee80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45e87d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382990>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709780d60; to 'JaxprTracer' at 0x7ff709781b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45a62440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079cb50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107994e0; to 'JaxprTracer' at 0x7ffa10798cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb66e6630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a7e00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd424bf60; to 'JaxprTracer' at 0x7ffcd4248900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20c35d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bcff0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb46de0; to 'JaxprTracer' at 0x7ff70bb44a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45b11ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1c50>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107753f0; to 'JaxprTracer' at 0x7ffcb00ae5c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39792e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719ca0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30462980; to 'JaxprTracer' at 0x7ffb30462d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c6f9780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b20e0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b345a30; to 'JaxprTracer' at 0x7ff70b345c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x917ffec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673880>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb021d940; to 'JaxprTracer' at 0x7ffcb021c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47168810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01279e0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9008a200; to 'JaxprTracer' at 0x7ffc9008a020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xccd028d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1f10>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb056b880; to 'JaxprTracer' at 0x7ffbb0569bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf777e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce63b60>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90610ef0; to 'JaxprTracer' at 0x7ffa080bc810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a82a000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cdd50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c7bd490; to 'JaxprTracer' at 0x7ffad04fdad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30afc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00662b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d9b5b0; to 'JaxprTracer' at 0x7ffa5012ef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bd4b8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675000>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0587d30; to 'JaxprTracer' at 0x7ff713238b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ce95f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057f690>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b6a5940; to 'JaxprTracer' at 0x7ff70b6a57b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x768a1cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
63, epoch_train_loss=3.2796184744785317
Epoch 64
Epoch 64 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10187390>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb044e7a0; to 'JaxprTracer' at 0x7ffcb044c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bd77d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d8770>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134d3560; to 'JaxprTracer' at 0x7ff7134d3ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b3a9640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce12b0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3448b0; to 'JaxprTracer' at 0x7ffa10734d10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3740abd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c1e90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c33c180; to 'JaxprTracer' at 0x7ffd2c33f420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7883fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2430>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ab1210; to 'JaxprTracer' at 0x7ff9d047a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ce1c340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672cd0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90728f40; to 'JaxprTracer' at 0x7ffb9072a8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bfddcb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719310>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c2965c0; to 'JaxprTracer' at 0x7ffd2c2970b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e42ecf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719320>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07d3330; to 'JaxprTracer' at 0x7ffab07d14e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d4b1770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b26a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5044b880; to 'JaxprTracer' at 0x7ffb50448ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31d61b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10cad0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122ab4c0; to 'JaxprTracer' at 0x7ff7122aad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x880b00c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6d70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5035fce0; to 'JaxprTracer' at 0x7ffa5035c950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d9088a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8830>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb074afc0; to 'JaxprTracer' at 0x7ffc5008f920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82265ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e35c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab078d0d0; to 'JaxprTracer' at 0x7ffb300daca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86c93ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341ca0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703fc400; to 'JaxprTracer' at 0x7ffb703fce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x813b3250>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139d30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788d70950; to 'JaxprTracer' at 0x7ff788d73560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb61602c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473f850>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b64450; to 'JaxprTracer' at 0x7ff788b65f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x389ea5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718dc0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb901cea70; to 'JaxprTracer' at 0x7ffb901cd300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10e13270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847cdb0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c3a5c10; to 'JaxprTracer' at 0x7ffd2c3a7ce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd00dbc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022d950>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd0b880; to 'JaxprTracer' at 0x7ff70bd08130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5215ae60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88645b90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca0040; to 'JaxprTracer' at 0x7ffbb05ea930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37bb65c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5eb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30115440; to 'JaxprTracer' at 0x7ffc30114400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88462800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085546c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714101080; to 'JaxprTracer' at 0x7ff714102890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1a9fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05caad0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd47198f0; to 'JaxprTracer' at 0x7ffcd47196c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c646980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0125ff0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1035fce0; to 'JaxprTracer' at 0x7ffc1035f0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbc109880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263fb0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71464da80; to 'JaxprTracer' at 0x7ff71464f240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bc71470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a49a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c7bf600; to 'JaxprTracer' at 0x7ff70c7bf6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x157b9580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10f960>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03ed710; to 'JaxprTracer' at 0x7ff70b714f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x626c9c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
64, epoch_train_loss=3.2796184744785317
Epoch 65
Epoch 65 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675e60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e14360; to 'JaxprTracer' at 0x7ff788e140e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf9f3620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0222150>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0816d620; to 'JaxprTracer' at 0x7ffa0816cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77527fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dfbd0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301393f0; to 'JaxprTracer' at 0x7ffc3013a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60af5640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760fc0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01db100; to 'JaxprTracer' at 0x7ffbd01db330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6eab45f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085579b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb283c4220; to 'JaxprTracer' at 0x7ffb283c76a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x25e1ddb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647b40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88317a60; to 'JaxprTracer' at 0x7ffc88315d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13eddf20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ee90>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5075dc10; to 'JaxprTracer' at 0x7ffb5075c1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bc23130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847fa70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101cd120; to 'JaxprTracer' at 0x7ffc101cd080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x671e3790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882daca0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505ec720; to 'JaxprTracer' at 0x7ffb505ef420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27a5df90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac349f70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71355e890; to 'JaxprTracer' at 0x7ff71355d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e068ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473d930>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca5bc0; to 'JaxprTracer' at 0x7ff713ca4680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xf8f9900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055c110>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120a1490; to 'JaxprTracer' at 0x7ff7120a2ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x613864e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6d60>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708531940; to 'JaxprTracer' at 0x7ff708531530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaabf9a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce62190>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ac7c900; to 'JaxprTracer' at 0x7ff70ac7c630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b50f3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cf6c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70cc9b1a0; to 'JaxprTracer' at 0x7ff70cc986d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x51c0ee40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067580>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71468bf10; to 'JaxprTracer' at 0x7ffd2c15b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e9687a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3620>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d064dd50; to 'JaxprTracer' at 0x7ff9d064f5b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xca1a6580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f260>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0150f40; to 'JaxprTracer' at 0x7ffbf0153830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44870a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6c50>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcae4d0; to 'JaxprTracer' at 0x7ff70bcae8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x764a6760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261da0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb504179c0; to 'JaxprTracer' at 0x7ffb50416a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x371f1590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673400>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709b0e700; to 'JaxprTracer' at 0x7ff709b0f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ac6e180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124d70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9064d260; to 'JaxprTracer' at 0x7ffc9064e430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7ac7570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079c8e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026f7e0; to 'JaxprTracer' at 0x7ffb3026c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbe4e4980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a7c50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5059b560; to 'JaxprTracer' at 0x7ff714101210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31571fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd800>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902f8090; to 'JaxprTracer' at 0x7ffc902f81d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29c056b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2f50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01a08b0; to 'JaxprTracer' at 0x7ffbd0599c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc72fd120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bfd0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03d6480; to 'JaxprTracer' at 0x7ffbb03d7c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1164fbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
65, epoch_train_loss=3.2796184744785317
Epoch 66
Epoch 66 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651bf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102a7880; to 'JaxprTracer' at 0x7ffa102a7b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ab8820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184a20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70547dd0; to 'JaxprTracer' at 0x7ffa70547f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x459a24a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8da050>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30701b70; to 'JaxprTracer' at 0x7ff712344d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac953e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4293cd0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb284088b0; to 'JaxprTracer' at 0x7ffb28409710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6efff8f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec25d0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06770b0; to 'JaxprTracer' at 0x7ff9d0677510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc476020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c260710>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709780cc0; to 'JaxprTracer' at 0x7ff709781fd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1982df40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f320>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c1530; to 'JaxprTracer' at 0x7ffc102c0f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c6ccd30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022d290>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10785a30; to 'JaxprTracer' at 0x7ffc10784810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e110e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284141c0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301a0450; to 'JaxprTracer' at 0x7ffc301a2a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4df9a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d3430>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd7fba0; to 'JaxprTracer' at 0x7ff70bd7c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc71c9fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4230>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc886da840; to 'JaxprTracer' at 0x7ffc886d8b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa62ce90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fee1e0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b716390; to 'JaxprTracer' at 0x7ff70b717470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf657600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2c00>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902e23e0; to 'JaxprTracer' at 0x7ffc902e0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b280c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c1ca0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106cf330; to 'JaxprTracer' at 0x7ffc106cd350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c436aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139f60>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708599b20; to 'JaxprTracer' at 0x7ff70c1bdee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44081990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473f890>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30302020; to 'JaxprTracer' at 0x7ffc30301080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e1574b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f960>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa085c57b0; to 'JaxprTracer' at 0x7ffa085c5c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38840b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6c40>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712f7a8e0; to 'JaxprTracer' at 0x7ff712f785e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9208e8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca360>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085910d0; to 'JaxprTracer' at 0x7ff712f7a160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd496dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0064ca0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306d37e0; to 'JaxprTracer' at 0x7ffc306d1b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36ff7ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88645d90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01cf600; to 'JaxprTracer' at 0x7ffbf01ce610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b957d60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4720>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01a0680; to 'JaxprTracer' at 0x7ffab01a1490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c91650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341ff0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30639670; to 'JaxprTracer' at 0x7ff7125fe750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d4a3c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673b30>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa102dfb50; to 'JaxprTracer' at 0x7ffa102dcc70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82071030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b99a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0528180; to 'JaxprTracer' at 0x7ffad0529490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fa31460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055d990>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd043d4e0; to 'JaxprTracer' at 0x7ffa0836da30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x46e8480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057f860>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff66c2ab420; to 'JaxprTracer' at 0x7ff66c2aaf20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7c19870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
66, epoch_train_loss=3.2796184744785317
Epoch 67
Epoch 67 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557a10>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5024ce50; to 'JaxprTracer' at 0x7ffc5024c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5068e6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675f80>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01ccef0; to 'JaxprTracer' at 0x7ffbf01cf420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86f972f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41eba0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fc83b0; to 'JaxprTracer' at 0x7ff70bcb1490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43addfc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6ddfe0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712faf100; to 'JaxprTracer' at 0x7ff712fac3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ccd5280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce63d00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b69c2c0; to 'JaxprTracer' at 0x7ff70b69c9f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a92b040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067100>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0218ef0; to 'JaxprTracer' at 0x7ffbd021ac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5183fd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2ef0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8a56c0; to 'JaxprTracer' at 0x7ff70b8a45e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2b393590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3860>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135c4c70; to 'JaxprTracer' at 0x7ff7135c7ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b3c15b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b1f40>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e3c310; to 'JaxprTracer' at 0x7ff70c212200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f04370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f9f80>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ecb470; to 'JaxprTracer' at 0x7ffc107ad440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0288d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128072c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ae2020; to 'JaxprTracer' at 0x7ff712ae29d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcdbd5e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5fd0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c1df0; to 'JaxprTracer' at 0x7ffc102c0630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3d95650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055dbc0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081922f0; to 'JaxprTracer' at 0x7ffb08193dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x18a22e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07608e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90232200; to 'JaxprTracer' at 0x7ffb902318f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x978ce730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4930>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28177f60; to 'JaxprTracer' at 0x7ff788d3ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x560cafa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066220>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50413c90; to 'JaxprTracer' at 0x7ffb50411350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8739ff10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5270>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d047b510; to 'JaxprTracer' at 0x7ff9d04785e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60150080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b0d20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4b4090; to 'JaxprTracer' at 0x7ff70c4b4180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72bcd580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4f90>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507c5a30; to 'JaxprTracer' at 0x7ffb507c75b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62e2e150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473ee00>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081d28e0; to 'JaxprTracer' at 0x7ffb081d0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x17305610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50138830>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5021f650; to 'JaxprTracer' at 0x7ffc5021c090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2751de70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670f90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712e4c090; to 'JaxprTracer' at 0x7ff712e4f740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x781d3c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079e0d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10766390; to 'JaxprTracer' at 0x7ff7132393a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44bb0e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cfef0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bfb7560; to 'JaxprTracer' at 0x7ff70bfb4720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5399170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888beda0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e17d30; to 'JaxprTracer' at 0x7ffc3058e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x45cb4730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d96a0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd059ab10; to 'JaxprTracer' at 0x7ffbd059bd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8193f5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93be60>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb01d6570; to 'JaxprTracer' at 0x7ffbb01d63e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42303340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
67, epoch_train_loss=3.2796184744785317
Epoch 68
Epoch 68 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01249c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71285d850; to 'JaxprTracer' at 0x7ff71285cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2daab040>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d2ea0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1039d2b0; to 'JaxprTracer' at 0x7ffc1039de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x533e26f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4df0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281b4e00; to 'JaxprTracer' at 0x7ffb281b49f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5dea5680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce19f0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141443b0; to 'JaxprTracer' at 0x7ff7141453f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10d39e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2150>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90232b60; to 'JaxprTracer' at 0x7ff70b679940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4940cba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473cc60>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10517240; to 'JaxprTracer' at 0x7ff70bd468e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42eb8e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8350>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50136a20; to 'JaxprTracer' at 0x7ffa50134680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32df4610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cb090>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0254b30; to 'JaxprTracer' at 0x7ff9d0256f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb82e9c20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e7950>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa502b86d0; to 'JaxprTracer' at 0x7ffa502ba9d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ca29ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1ba0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505aade0; to 'JaxprTracer' at 0x7ffb505a9170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3032fe10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0625680>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70793830; to 'JaxprTracer' at 0x7ffa707903b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2fcda60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650ab0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb705d5c10; to 'JaxprTracer' at 0x7ffb7078ef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c72d610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302da920>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c240a90; to 'JaxprTracer' at 0x7ff70c240090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x673d710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4290280>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714853d30; to 'JaxprTracer' at 0x7ff714853060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cb2d6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7146723c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704a2480; to 'JaxprTracer' at 0x7ffd2c2f4950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2b42cdf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473dc70>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7143c8450; to 'JaxprTracer' at 0x7ffc5026bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa39dbed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca670>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04f3650; to 'JaxprTracer' at 0x7ff714453ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f241700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414880>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4403740; to 'JaxprTracer' at 0x7ffcd4403470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x187d36c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022efd0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301391c0; to 'JaxprTracer' at 0x7ffc30138090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e47b0c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c2884e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3036a0c0; to 'JaxprTracer' at 0x7ffc3036b790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13c7c8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bf850>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902f9080; to 'JaxprTracer' at 0x7ffc30523560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd0fdf5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88645950>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714101120; to 'JaxprTracer' at 0x7ff714101440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ce9fa20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0342cf0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4443600; to 'JaxprTracer' at 0x7ffcd4442f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd556970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b4a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2840a8e0; to 'JaxprTracer' at 0x7ffb2840bd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x65759b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b8850>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713508d60; to 'JaxprTracer' at 0x7ff71350af20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38665e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708620>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50746a20; to 'JaxprTracer' at 0x7ffb50747bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52d0f170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10c3e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30702bb0; to 'JaxprTracer' at 0x7ffb30701490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbb9ff7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
68, epoch_train_loss=3.2796184744785317
Epoch 69
Epoch 69 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce629b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07482c0; to 'JaxprTracer' at 0x7ffcb0749710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6f88aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805930>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05889f0; to 'JaxprTracer' at 0x7ffbb0588720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32a27f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0220260>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c987f10; to 'JaxprTracer' at 0x7ff70c987240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcfe89e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055cff0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bacc720; to 'JaxprTracer' at 0x7ff70bacc040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb291b860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760b50>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0615080; to 'JaxprTracer' at 0x7ff788da3330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x537e8790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066310>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0571df0; to 'JaxprTracer' at 0x7ffbb05733d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48881e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1f20>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888b3920; to 'JaxprTracer' at 0x7ff7888b2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc561d4f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1bf0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b7171a0; to 'JaxprTracer' at 0x7ff70b716c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d4f7380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e7660>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303f9c60; to 'JaxprTracer' at 0x7ffa303fb3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88aa2050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fee930>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb025fdd0; to 'JaxprTracer' at 0x7ffc50786a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x572294c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ce30>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5072fb50; to 'JaxprTracer' at 0x7ffb5072dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41132210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675c00>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0256ed0; to 'JaxprTracer' at 0x7ff9d0257650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c6a52e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41e160>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306d6fc0; to 'JaxprTracer' at 0x7ffa306d6520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb80175c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dfb20>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb304d9b70; to 'JaxprTracer' at 0x7ffc10195800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9458a300>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cf400>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd424a2f0; to 'JaxprTracer' at 0x7ffd2c1f4fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2c68bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0064410>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b678e50; to 'JaxprTracer' at 0x7ffc902325c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b4e4150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fa3c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf03ba0; to 'JaxprTracer' at 0x7ff70bf00c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58d18c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e7d70>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa704d7e20; to 'JaxprTracer' at 0x7ffa704d4810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2740ac70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086642f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30578040; to 'JaxprTracer' at 0x7ffc3057acf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa95fc500>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071b0e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa1027a660; to 'JaxprTracer' at 0x7ffa1027b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7daa5530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e620>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b72abb0; to 'JaxprTracer' at 0x7ff70b72a7f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b8bac70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2619a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080fff10; to 'JaxprTracer' at 0x7ffa080fd0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa25877d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079f4e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf059c040; to 'JaxprTracer' at 0x7ffbf059f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cd408c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a63a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30463f60; to 'JaxprTracer' at 0x7ffb30462c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcc70380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bf0b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eeefc0; to 'JaxprTracer' at 0x7ffa500bfbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2bd62b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4c90>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907a2de0; to 'JaxprTracer' at 0x7ffb907a3830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc083fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93ba60>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c474c70; to 'JaxprTracer' at 0x7ff68c474ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7e8e8e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
69, epoch_train_loss=3.2796184744785317
Epoch 70
Epoch 70 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671f70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03f9e40; to 'JaxprTracer' at 0x7ffbb03f9f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540b54b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055e420>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1039ec50; to 'JaxprTracer' at 0x7ffc1039fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75cbc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651270>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713952070; to 'JaxprTracer' at 0x7ff713951620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37dff230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0342af0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98688360; to 'JaxprTracer' at 0x7ffa9868b650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x171370a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013a4c0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0170bd0; to 'JaxprTracer' at 0x7ffbd0171a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8211bfe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022cc50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd08f40; to 'JaxprTracer' at 0x7ff70bd0a020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x423f4a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e7350>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50136750; to 'JaxprTracer' at 0x7ffb28430810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xca50ae50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e55e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507867a0; to 'JaxprTracer' at 0x7ffb50787060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49e91f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4410>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb056ae30; to 'JaxprTracer' at 0x7ffbb056af70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc364db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d9bf0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0412b60; to 'JaxprTracer' at 0x7ffa507c3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58569d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb903836a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03ffb00; to 'JaxprTracer' at 0x7ffab03fc3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d4da650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0626cd0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127ee110; to 'JaxprTracer' at 0x7ff71324cd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e2b8d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f55c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300dad40; to 'JaxprTracer' at 0x7ffb300d95d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab37e520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd42920b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5074c4f0; to 'JaxprTracer' at 0x7ff9d04a8810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b179160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473da00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab05a3bf0; to 'JaxprTracer' at 0x7ffab05a2ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2c16830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022fe90>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306a8130; to 'JaxprTracer' at 0x7ffa306a9260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92a21b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284153b0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083a16c0; to 'JaxprTracer' at 0x7ffa083a37e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53355630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667540>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f6020; to 'JaxprTracer' at 0x7ffa983f67a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cc5d050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c80b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98298720; to 'JaxprTracer' at 0x7ffa98299580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23e613b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067150>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b7cd10; to 'JaxprTracer' at 0x7ff712b7e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29aa2a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cfe90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc885186d0; to 'JaxprTracer' at 0x7ffc885195d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8e8e0350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5d80>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7123460c0; to 'JaxprTracer' at 0x7ff712345350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xba0ef1d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec3b50>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd420cf90; to 'JaxprTracer' at 0x7ff70ceafbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77983f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bbab0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080fcef0; to 'JaxprTracer' at 0x7ffa080ffa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x386db000>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d8400>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03fae30; to 'JaxprTracer' at 0x7ffbf03f9e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2bfa1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0221830>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713508e00; to 'JaxprTracer' at 0x7ff71350a660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d5e98a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057c8a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c477970; to 'JaxprTracer' at 0x7ff68c477a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2ca70b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
70, epoch_train_loss=3.2796184744785317
Epoch 71
Epoch 71 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9890>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713a08a40; to 'JaxprTracer' at 0x7ff713a090d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fba2e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac348250>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04784f0; to 'JaxprTracer' at 0x7ffcb047b6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47d6d9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706760f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcb0400; to 'JaxprTracer' at 0x7ff70bcb13a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf7850c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41dd40>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01d8a90; to 'JaxprTracer' at 0x7ff712fafdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2664a640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dd800>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0509530; to 'JaxprTracer' at 0x7ff9d05097b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf201e80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00676c0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71413fe70; to 'JaxprTracer' at 0x7ff71413e930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x913f1670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fee860>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0345490; to 'JaxprTracer' at 0x7ff70b7141d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x768c3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08664220>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127eecf0; to 'JaxprTracer' at 0x7ff7127eea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ade8da0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8d70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98449b20; to 'JaxprTracer' at 0x7ffa98448220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x264729f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101857a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03afa60; to 'JaxprTracer' at 0x7ffbd018c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89a5c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085553b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c0550d0; to 'JaxprTracer' at 0x7ffd2c055df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e1af1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847d820>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07b2e80; to 'JaxprTracer' at 0x7ffcb07b3dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ec0f160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e6b10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb03eeed0; to 'JaxprTracer' at 0x7ffcb03efc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b066310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055df80>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134ec180; to 'JaxprTracer' at 0x7ff7134efdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97802190>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07606b0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10508360; to 'JaxprTracer' at 0x7ffa1050ba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55d1c2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067480>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902315d0; to 'JaxprTracer' at 0x7ffc90231710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40a86230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08666350>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70496390; to 'JaxprTracer' at 0x7ffa70497d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc8157810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fa3b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048e2f0; to 'JaxprTracer' at 0x7ffa3048d2b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37d67e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3d00>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907cb0b0; to 'JaxprTracer' at 0x7ffb907cb330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x138d83e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022e340>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507c5710; to 'JaxprTracer' at 0x7ffc8829eac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x210b02c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473c980>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712dc7010; to 'JaxprTracer' at 0x7ff712dc5e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e765350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ba350>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa702d3830; to 'JaxprTracer' at 0x7ffa702d16c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcee85ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055f390>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70448770; to 'JaxprTracer' at 0x7ffb7044bce0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x346edd10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cd650>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71324e570; to 'JaxprTracer' at 0x7ff71324f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbe9e470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5830>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ff5300; to 'JaxprTracer' at 0x7ff712ff67a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c116df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652910>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30306e80; to 'JaxprTracer' at 0x7ffb30305990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54003880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10ed80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd04159e0; to 'JaxprTracer' at 0x7ffbd04168e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ffe1470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
71, epoch_train_loss=3.2796184744785317
Epoch 72
Epoch 72 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb903822b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0734d10; to 'JaxprTracer' at 0x7ffbd0734c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x211689a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf06241d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709b0f880; to 'JaxprTracer' at 0x7ff70ba9e6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b90e060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0342670>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05f9c60; to 'JaxprTracer' at 0x7ffbd05fac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d48b3e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b8fc0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70544d60; to 'JaxprTracer' at 0x7ffad0710a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa48e7e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022cbd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa084407c0; to 'JaxprTracer' at 0x7ffa084418a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b8dc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8980>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0780f90; to 'JaxprTracer' at 0x7ffbb0783380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41ad5050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3f60>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd06ef830; to 'JaxprTracer' at 0x7ffbd06efba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc51ef8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2680>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902f8040; to 'JaxprTracer' at 0x7ffc902fbfb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e0cd1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28aef0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb056b9c0; to 'JaxprTracer' at 0x7ffbb0569990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x824f280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2150>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd018cb80; to 'JaxprTracer' at 0x7ffbd018f650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1332fdb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055f8b0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107a3ce0; to 'JaxprTracer' at 0x7ffc107a3240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5de48440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b49b0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0362070; to 'JaxprTracer' at 0x7ffbb03604a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2651ce70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2a70>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3058dee0; to 'JaxprTracer' at 0x7ffc3058d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc0625b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e7a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506814e0; to 'JaxprTracer' at 0x7ffb3072c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf3c9010>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d9d80>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb283c7010; to 'JaxprTracer' at 0x7ffb283c4c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d7ad630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8340>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303020c0; to 'JaxprTracer' at 0x7ff9d0509a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xade1df60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fee390>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50787740; to 'JaxprTracer' at 0x7ffa30176ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e74a940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066c90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fae390; to 'JaxprTracer' at 0x7ffcd4274fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x327e63e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01279f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122e71f0; to 'JaxprTracer' at 0x7ffb302d3dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xad23b800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dfc90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30523380; to 'JaxprTracer' at 0x7ffc30523010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaeb8c590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079fa80>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30673510; to 'JaxprTracer' at 0x7ffc30673ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b4b0a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41c0d0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083cb3d0; to 'JaxprTracer' at 0x7ffa083c82c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d57f8b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719170>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0865a980; to 'JaxprTracer' at 0x7ffa08659c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32d4ddf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4570>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307777e0; to 'JaxprTracer' at 0x7ffb30777600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33dec700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415640>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07077e0; to 'JaxprTracer' at 0x7ffad07065c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbfde8210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085546e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1057ca40; to 'JaxprTracer' at 0x7ffc1057c4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x906a9650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bb90>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c161fd0; to 'JaxprTracer' at 0x7ff68c161f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6febc7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
72, epoch_train_loss=3.2796184744785317
Epoch 73
Epoch 73 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a58e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa702d2250; to 'JaxprTracer' at 0x7ffa702d1440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9fec56c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d9690>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5024f240; to 'JaxprTracer' at 0x7ffc5024c400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20b51170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10187ff0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c568130; to 'JaxprTracer' at 0x7ff70c56a340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86a05bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac349930>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb22520; to 'JaxprTracer' at 0x7ff70bb22020>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc7d89ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768280>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab00d31a0; to 'JaxprTracer' at 0x7ffab00d1b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x417fe390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079cbb0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0836ca40; to 'JaxprTracer' at 0x7ffa0836e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x334d5aa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cd0a0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c72a520; to 'JaxprTracer' at 0x7ff70c72b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cd030c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cc060>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4442430; to 'JaxprTracer' at 0x7ffcd4440310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x907f15d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28bf30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120044f0; to 'JaxprTracer' at 0x7ff712005580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12931b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714670a30>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70cc084f0; to 'JaxprTracer' at 0x7ff70cc08cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb976b2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262d70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0724a90; to 'JaxprTracer' at 0x7ffa5016f1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3c49e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086660a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712aaba60; to 'JaxprTracer' at 0x7ff712aa8f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x333b1830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9d00>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc882d49f0; to 'JaxprTracer' at 0x7ffc882d5cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab0762e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805d00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bce60c0; to 'JaxprTracer' at 0x7ffa306d4ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x537db550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677b10>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10197380; to 'JaxprTracer' at 0x7ffc10196070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52713f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079e320>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8d6070; to 'JaxprTracer' at 0x7ff70b8d7a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24479200>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760890>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd05c0b30; to 'JaxprTracer' at 0x7ff70cccaf70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x448619f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28a710>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e4400; to 'JaxprTracer' at 0x7ffb307e5300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xce669370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c3f60>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50448bd0; to 'JaxprTracer' at 0x7ffb504484a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36f747e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b32e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03832e0; to 'JaxprTracer' at 0x7ffab0380180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e212b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a7fc0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709b0e200; to 'JaxprTracer' at 0x7ff709b0e520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xca4c9b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284146a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2840b650; to 'JaxprTracer' at 0x7ffb28408630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f786bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847ce10>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5049fa60; to 'JaxprTracer' at 0x7ffc5049e840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57c773f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0223dd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134d27a0; to 'JaxprTracer' at 0x7ffc8864b830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7a4740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f750>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0282610; to 'JaxprTracer' at 0x7ffcb0281850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x342bda00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718c00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07051c0; to 'JaxprTracer' at 0x7ffad0705cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6db7890>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057de10>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03ece00; to 'JaxprTracer' at 0x7ffbd03ed0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x171a56b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
73, epoch_train_loss=3.2796184744785317
Epoch 74
Epoch 74 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382180>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c75ba60; to 'JaxprTracer' at 0x7ff70c758540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81da4d80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653c60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70505da0; to 'JaxprTracer' at 0x7ffa70506e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3374ef70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b8be0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10164810; to 'JaxprTracer' at 0x7ffc10165c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x279d3ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022e8e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506462f0; to 'JaxprTracer' at 0x7ffc50644450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6a8c2a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cb090>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709e63970; to 'JaxprTracer' at 0x7ff709e61800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52874690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1f10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1bd120; to 'JaxprTracer' at 0x7ff70c1bc0e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90149990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd380>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788ec96c0; to 'JaxprTracer' at 0x7ff788ec98f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x484785e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bdb60>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507878d0; to 'JaxprTracer' at 0x7ffb50787d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbe501260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0762e90>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01a6890; to 'JaxprTracer' at 0x7ff9d01a6b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91bd1ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7680>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98449440; to 'JaxprTracer' at 0x7ffa98449300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x525c3f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d3080>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7022cb80; to 'JaxprTracer' at 0x7ffb7022e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b24c490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b61a0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50044900; to 'JaxprTracer' at 0x7ffc500449f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54e30650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718ec0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148286d0; to 'JaxprTracer' at 0x7ff71482b600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x40103e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6dc0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0836e250; to 'JaxprTracer' at 0x7ffa0836d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf0bca40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fbb30>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70859a3e0; to 'JaxprTracer' at 0x7ff708598ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x454a5c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1730>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30301df0; to 'JaxprTracer' at 0x7ffc303020c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48307670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feeaa0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04f0c70; to 'JaxprTracer' at 0x7ff9d04f0cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2de66d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07617e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303317b0; to 'JaxprTracer' at 0x7ffc30332f70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c584c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070b230>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30117420; to 'JaxprTracer' at 0x7ffc30115440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37ad7670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055d910>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70742d90; to 'JaxprTracer' at 0x7ffa70742c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4720f130>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41e300>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5024cd10; to 'JaxprTracer' at 0x7ffc90265e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57e4f7b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876a050>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70a00c180; to 'JaxprTracer' at 0x7ff70a00ca90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc8a9490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882daa70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702a67a0; to 'JaxprTracer' at 0x7ffb702a5b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10354810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414e20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106b7420; to 'JaxprTracer' at 0x7ffc106b7b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1adc090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9560>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30672110; to 'JaxprTracer' at 0x7ffbb03cb560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78c7b6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce08e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8829c040; to 'JaxprTracer' at 0x7ffc8829e1b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x96c3e700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b3e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff64c334130; to 'JaxprTracer' at 0x7ff64c334540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa37b71e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
74, epoch_train_loss=3.2796184744785317
Epoch 75
Epoch 75 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88644a40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c289990; to 'JaxprTracer' at 0x7ff68c28be20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2559590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671120>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0749b70; to 'JaxprTracer' at 0x7ffcb074b600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24e28b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d88f0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c56b9c0; to 'JaxprTracer' at 0x7ff70c569a80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c1eaf60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101849c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9011d530; to 'JaxprTracer' at 0x7ffc9011cbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c9d6c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847f310>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30302390; to 'JaxprTracer' at 0x7ffc303004f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x24622020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055f770>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04bf470; to 'JaxprTracer' at 0x7ffb502359e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5609e740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c2b80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf059f8d0; to 'JaxprTracer' at 0x7ffbf059c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3086c290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0a00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981af8d0; to 'JaxprTracer' at 0x7ffa981ad530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29cde170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce632e0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70494720; to 'JaxprTracer' at 0x7ffa70496980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d64a5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2eb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08621cb0; to 'JaxprTracer' at 0x7ffa08620040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c425af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0222c90>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0534f90; to 'JaxprTracer' at 0x7ff7137923e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23f11df0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4cb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135500e0; to 'JaxprTracer' at 0x7ff713550040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a531450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4291db0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0741f30; to 'JaxprTracer' at 0x7ffbf0742a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xccd02820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9920>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07701d0; to 'JaxprTracer' at 0x7ffbb0772d40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61ab2a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876b9d0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280cd620; to 'JaxprTracer' at 0x7ffb280cd030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43dbf0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055e320>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704a0bd0; to 'JaxprTracer' at 0x7ffb704a3380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36c6d030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0763f00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788916f70; to 'JaxprTracer' at 0x7ff788914540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15582060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce613b0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf03600; to 'JaxprTracer' at 0x7ff70bf02750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x699b34f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708556c00>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01eb010; to 'JaxprTracer' at 0x7ff712d6f6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x405d09f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01251f0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad02ee4d0; to 'JaxprTracer' at 0x7ffad02edcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x381714b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5d10>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01a35b0; to 'JaxprTracer' at 0x7ff71440ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5691ee90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fbe30>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b729030; to 'JaxprTracer' at 0x7ff70b72ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c8cf590>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac348270>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301771a0; to 'JaxprTracer' at 0x7ffc30174130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39184c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41ee00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5061d800; to 'JaxprTracer' at 0x7ffc5061f380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4f56280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f940>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702a4cc0; to 'JaxprTracer' at 0x7ffb702a71a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa72f9080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473f950>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507859e0; to 'JaxprTracer' at 0x7ffb50787740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fdf0390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10eb00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff64c4a76a0; to 'JaxprTracer' at 0x7ff64c4a7b00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d467ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
75, epoch_train_loss=3.2796184744785317
Epoch 76
Epoch 76 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7128043a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70536840; to 'JaxprTracer' at 0x7ffa70536750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8be48c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382c30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd037f790; to 'JaxprTracer' at 0x7ffbd037f970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x383524a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4f30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10775030; to 'JaxprTracer' at 0x7ffc10777d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x783e2070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022d700>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c4554e0; to 'JaxprTracer' at 0x7ffd2c455580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60708b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05cb930>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90230090; to 'JaxprTracer' at 0x7ffb90233dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cc7cb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c38e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab05eee30; to 'JaxprTracer' at 0x7ffab05ecb30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b9ab610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bdbc0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0704680; to 'JaxprTracer' at 0x7ffbf0706750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa7417ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bc0d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd445d2b0; to 'JaxprTracer' at 0x7ffcd445c270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6818860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0761c30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0381170; to 'JaxprTracer' at 0x7ff70cc09d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x449262d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08665fb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70793fb0; to 'JaxprTracer' at 0x7ffa70791440>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcef09ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0540>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ac7c8b0; to 'JaxprTracer' at 0x7ff70ac7cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23b607b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0626570>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71440f0b0; to 'JaxprTracer' at 0x7ff712e4f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbe3d5b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bb5d0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b714e50; to 'JaxprTracer' at 0x7ff70b714b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc27fd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d8870>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71413c540; to 'JaxprTracer' at 0x7ff71413e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x449f4f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f98a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306a8b80; to 'JaxprTracer' at 0x7ffa306aa840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49bf8800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2dd0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71257a340; to 'JaxprTracer' at 0x7ffc10747d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x229b73a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708c00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71285d580; to 'JaxprTracer' at 0x7ff71285d940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd1b1680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0762c80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0816f060; to 'JaxprTracer' at 0x7ffa0816e8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13bbfd60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fedc40>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c530950; to 'JaxprTracer' at 0x7ffa70722a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f74a0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cff70>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714846840; to 'JaxprTracer' at 0x7ff714847470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6d7b0f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055d880>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa986210d0; to 'JaxprTracer' at 0x7ffa98620270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50262cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079f3f0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf008b0; to 'JaxprTracer' at 0x7ffd2c199f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ef7e60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e46e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc102c3420; to 'JaxprTracer' at 0x7ff788ec9350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bc5cf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415b20>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712580db0; to 'JaxprTracer' at 0x7ff712581cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf1d7de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127e20>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28409f80; to 'JaxprTracer' at 0x7ffb28408c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23a6eb40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd42907b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5076d6c0; to 'JaxprTracer' at 0x7ff713f96660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3ec77d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bff0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c7526b0; to 'JaxprTracer' at 0x7ff68c7527f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b134710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
76, epoch_train_loss=3.2796184744785317
Epoch 77
Epoch 77 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88647b00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08204400; to 'JaxprTracer' at 0x7ffb08205170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fba1bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50138a60>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b895cb0; to 'JaxprTracer' at 0x7ff70b896980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x41c71470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1d60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90266890; to 'JaxprTracer' at 0x7ffc90267100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4411e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10187940>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0722700; to 'JaxprTracer' at 0x7ffab0722ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3139f550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847f930>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fae840; to 'JaxprTracer' at 0x7ff712faca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3454af10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cc190>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0691c60; to 'JaxprTracer' at 0x7ffcb0693330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x56ef470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00658b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcad1c0; to 'JaxprTracer' at 0x7ff70bcaea70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c2882a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0763f00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc500b3150; to 'JaxprTracer' at 0x7ffc500b1670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbe95d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce60510>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7078f740; to 'JaxprTracer' at 0x7ffb7078eb10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ad98980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb03411c0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30112390; to 'JaxprTracer' at 0x7ffa301120c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90e7620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e210>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a2ed0; to 'JaxprTracer' at 0x7ff70c1a0d60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1c13fce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0222c40>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0256610; to 'JaxprTracer' at 0x7ff9d0254ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23878550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8db120>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0865a610; to 'JaxprTracer' at 0x7ffcd4492700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1f72b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac34b8a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50268fe0; to 'JaxprTracer' at 0x7ffc5026a110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83fdf270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876a810>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714161c60; to 'JaxprTracer' at 0x7ff714162930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c644800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cf0c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08193b00; to 'JaxprTracer' at 0x7ff7120a0ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ade2fe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07636f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506dd080; to 'JaxprTracer' at 0x7ffc506df600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x504e4a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce616f0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50744540; to 'JaxprTracer' at 0x7ffa507467f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c040350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce08f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70269620; to 'JaxprTracer' at 0x7ffa702684a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b5f12b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124880>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2812eca0; to 'JaxprTracer' at 0x7ffbf0151e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92958f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c31a0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905c5d50; to 'JaxprTracer' at 0x7ffb905c6e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd2f60f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f9190>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1039ef20; to 'JaxprTracer' at 0x7ffc1039f240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xad00b1a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302da420>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0773830; to 'JaxprTracer' at 0x7ffbf0772e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cc19880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055fd00>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5042c4f0; to 'JaxprTracer' at 0x7ffc5042dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c468a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c1620>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03dc4a0; to 'JaxprTracer' at 0x7ffbf03dff10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb634cd40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f45e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900d9ad0; to 'JaxprTracer' at 0x7ff70b3d8860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x316bd0d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057f660>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70a49fce0; to 'JaxprTracer' at 0x7ff70a49c860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3a2642d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
77, epoch_train_loss=3.2796184744785317
Epoch 78
Epoch 78 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8ae0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506ab8d0; to 'JaxprTracer' at 0x7ffc506a9530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13305bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706741d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb021f880; to 'JaxprTracer' at 0x7ffcb021ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd16c1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0624c20>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307e63e0; to 'JaxprTracer' at 0x7ffb307e6a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x224fdc70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4eb0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7889177e0; to 'JaxprTracer' at 0x7ffb90728540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc79d6800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d95e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c297f60; to 'JaxprTracer' at 0x7ffcd4235f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33314de0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2cf0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71464f650; to 'JaxprTracer' at 0x7ff71464ef20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32ebc2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd990>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ca4860; to 'JaxprTracer' at 0x7ff713ca5d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5880dd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd280>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281674c0; to 'JaxprTracer' at 0x7ffb281652b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53c61d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707091d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500c21b0; to 'JaxprTracer' at 0x7ffa500c1cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb30d7ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41d670>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd059b7e0; to 'JaxprTracer' at 0x7ffbd05987c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7815e5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e77d0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bfb6b60; to 'JaxprTracer' at 0x7ff70bfb42c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f2a09b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807a60>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0502660; to 'JaxprTracer' at 0x7ff9d05011c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e60e690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306510c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132a1df0; to 'JaxprTracer' at 0x7ff70ccca160>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11102610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ba950>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704a1ad0; to 'JaxprTracer' at 0x7ff9d04aa660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabc496e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28414740>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08797b50; to 'JaxprTracer' at 0x7ffa08797650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c5800b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2710>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71357f420; to 'JaxprTracer' at 0x7ff71357dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x944c9cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08665a80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30330c70; to 'JaxprTracer' at 0x7ffc303316c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58f9a320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070ae90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcb0540; to 'JaxprTracer' at 0x7ff70bcb2840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x59c67b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079fa20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7069a390; to 'JaxprTracer' at 0x7ffb70698220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5005e3b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c1900>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf74a40; to 'JaxprTracer' at 0x7ffc5028b330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77667f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cfcb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5012f0b0; to 'JaxprTracer' at 0x7ffa5012cf90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x974b25b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dd740>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff64c4eeb10; to 'JaxprTracer' at 0x7ff64c4effb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3df2bec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022fee0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8829f970; to 'JaxprTracer' at 0x7ffc8829cd60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97ef7570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fa480>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0813b290; to 'JaxprTracer' at 0x7ffa102a4e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac3da280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3470>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5042c9f0; to 'JaxprTracer' at 0x7ffc5042fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43194ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1ca0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4f7fb0; to 'JaxprTracer' at 0x7ff70c4f4450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34263b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93ba80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0690130; to 'JaxprTracer' at 0x7ffbf0600b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2d24b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
78, epoch_train_loss=3.2796184744785317
Epoch 79
Epoch 79 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768720>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0770400; to 'JaxprTracer' at 0x7ffbf0773100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbad11a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473ddf0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd4c130; to 'JaxprTracer' at 0x7ff70bd4d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cf24180>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671060>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303dbfb0; to 'JaxprTracer' at 0x7ffc303da390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf679020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10185f30>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707237e0; to 'JaxprTracer' at 0x7ffb307a00e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e62a8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055ddd0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4277560; to 'JaxprTracer' at 0x7ffcd42740e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c0646a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085549f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04a8310; to 'JaxprTracer' at 0x7ff9d04aa340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71ded60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760c40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0471260; to 'JaxprTracer' at 0x7ff9d0472520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9ebcaec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289530>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0200810; to 'JaxprTracer' at 0x7ffbb0202430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ae4c090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08664750>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2835e570; to 'JaxprTracer' at 0x7ffb2835fa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7311b690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4291c50>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132cd670; to 'JaxprTracer' at 0x7ff7132ce6b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c311750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719950>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd44027a0; to 'JaxprTracer' at 0x7ffcd44036f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81e97940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013bbf0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28409990; to 'JaxprTracer' at 0x7ffc304efdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b9b36d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e23c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904cbba0; to 'JaxprTracer' at 0x7ffc904cac00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b1ef320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302dae50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71418db70; to 'JaxprTracer' at 0x7ff71418d350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37276110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055fa10>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70449620; to 'JaxprTracer' at 0x7ff714163420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c1c60a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c2320>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c2963e0; to 'JaxprTracer' at 0x7ffc10197b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39567840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289f80>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71229c3b0; to 'JaxprTracer' at 0x7ff71229de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39c63620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08665f80>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10777b00; to 'JaxprTracer' at 0x7ffc10777f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27201b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0064990>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132cd8a0; to 'JaxprTracer' at 0x7ff7135a97b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37cc0730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bc6b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709b55440; to 'JaxprTracer' at 0x7ff709b55530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e8a50d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2eb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907c8360; to 'JaxprTracer' at 0x7ffb907ca110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e9b6980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417780>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa30145ad0; to 'JaxprTracer' at 0x7ffa30145170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7be1f730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8630>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5066a1b0; to 'JaxprTracer' at 0x7ffb5066b380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x301d9af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6deab0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714482020; to 'JaxprTracer' at 0x7ff7144820c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b90ae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0b40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ccc0f90; to 'JaxprTracer' at 0x7ff70ccc1580>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ff791f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306506b0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06c53a0; to 'JaxprTracer' at 0x7ff9d06c58f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x427c1560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10d900>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2839f790; to 'JaxprTracer' at 0x7ffb2839f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d5b0550>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
79, epoch_train_loss=3.2796184744785317
Epoch 80
Epoch 80 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055ca90>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505a8b30; to 'JaxprTracer' at 0x7ffb505a9d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b373730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676cb0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0321990; to 'JaxprTracer' at 0x7ffad03235b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6f9ef30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90381790>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713746480; to 'JaxprTracer' at 0x7ff713746d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8860ea90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f45e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b9370b0; to 'JaxprTracer' at 0x7ff70b934a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xce452540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fbd90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00d7830; to 'JaxprTracer' at 0x7ffcb00d7b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cecedd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1430>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10787380; to 'JaxprTracer' at 0x7ffc10786340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e4ed060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2611f0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb2865c720; to 'JaxprTracer' at 0x7ffb2865c3b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf2521b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079da40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507061b0; to 'JaxprTracer' at 0x7ffb507054e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f4816e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce606f0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0361030; to 'JaxprTracer' at 0x7ffa08621800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d8ba6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88645790>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981add50; to 'JaxprTracer' at 0x7ffa981ad7b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b90e470>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7020>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5075f060; to 'JaxprTracer' at 0x7ff70bfb6d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77542b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0fb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf03dfb50; to 'JaxprTracer' at 0x7ffbf03df880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f25d750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0624540>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c242160; to 'JaxprTracer' at 0x7ff70c242070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc539f1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022c690>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703fd350; to 'JaxprTracer' at 0x7ffb703ff060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49588d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fb870>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500ff560; to 'JaxprTracer' at 0x7ffa500fcea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91555610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127cb0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b668e0; to 'JaxprTracer' at 0x7ff788b67560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fdaf570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079e260>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bacce50; to 'JaxprTracer' at 0x7ff70bacc310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37e48280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce60840>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50015300; to 'JaxprTracer' at 0x7ffb307a3f10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x381a2a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b31d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc305211c0; to 'JaxprTracer' at 0x7ffc30522700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb63b8e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c05d0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d9a7f0; to 'JaxprTracer' at 0x7ff712d983b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab0cab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708557e70>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30579ad0; to 'JaxprTracer' at 0x7ff713eef740>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89423290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847d490>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8864b8d0; to 'JaxprTracer' at 0x7ffc886489f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f2ee60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d93d0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc504de8e0; to 'JaxprTracer' at 0x7ffc504dd0d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d977020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb284170b0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04ff290; to 'JaxprTracer' at 0x7ffad04fdfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1eac4580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124aa0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb507c5c10; to 'JaxprTracer' at 0x7ffb507c4040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23249090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b190>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280ccc70; to 'JaxprTracer' at 0x7ffb280cfc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60834a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b910>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b36e30; to 'JaxprTracer' at 0x7ff788b36b10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x499bdee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
80, epoch_train_loss=3.2796184744785317
Epoch 81
Epoch 81 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055d6a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304efc40; to 'JaxprTracer' at 0x7ffc304ecbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab1065b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec0500>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d02165c0; to 'JaxprTracer' at 0x7ffbd07971f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x612721b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0223190>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90265850; to 'JaxprTracer' at 0x7ffc902644a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20c08400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e0fe0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa983f55d0; to 'JaxprTracer' at 0x7ffa983f6340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c40e770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904ce120>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa085c6930; to 'JaxprTracer' at 0x7ffa085c6cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x445f6660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c3e50>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0638b30; to 'JaxprTracer' at 0x7ffbb059ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d454b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708070>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd043c630; to 'JaxprTracer' at 0x7ffbd043d3f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71048680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce63b70>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701f6f20; to 'JaxprTracer' at 0x7ffb701f6d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc862fa50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3760>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b716070; to 'JaxprTracer' at 0x7ff70b7170b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xca3fa090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8da410>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7122abb50; to 'JaxprTracer' at 0x7ff7122a8f40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d6c6a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6df3c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28167790; to 'JaxprTracer' at 0x7ffb28167f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75ec1dc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071ba80>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907f3d30; to 'JaxprTracer' at 0x7ffb907f2d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc4230c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139170>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141afa10; to 'JaxprTracer' at 0x7ff7141acbd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e63dc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184120>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904caa70; to 'JaxprTracer' at 0x7ffc904ca660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e8f2e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904ce110>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70449300; to 'JaxprTracer' at 0x7ff70c984400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd1324a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760690>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf05cdfd0; to 'JaxprTracer' at 0x7ffbf05cccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c0493a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce608c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888e72e0; to 'JaxprTracer' at 0x7ff7132fee30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1bd70210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2460>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1035e520; to 'JaxprTracer' at 0x7ffcb00afbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ae42120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28aec0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5012ed40; to 'JaxprTracer' at 0x7ffa5012ca40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd2b6310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bcda0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06aea70; to 'JaxprTracer' at 0x7ffcb06af560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xab785270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417110>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90193100; to 'JaxprTracer' at 0x7ffb90191cb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e5209b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06fa400>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4441350; to 'JaxprTracer' at 0x7ffcd4441ad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1927e5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac348260>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd47a7970; to 'JaxprTracer' at 0x7ffcd47a7290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa50bf850>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce09d0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c645260; to 'JaxprTracer' at 0x7ff68c645e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9e68a2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760a70>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50745670; to 'JaxprTracer' at 0x7ffb50746610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22a87270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30652b20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07783b0; to 'JaxprTracer' at 0x7ffcb07798a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ec2c410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057c9f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff66c4e51c0; to 'JaxprTracer' at 0x7ff66c4e5b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77e5aa50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
81, epoch_train_loss=3.2796184744785317
Epoch 82
Epoch 82 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41cc20>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c2891c0; to 'JaxprTracer' at 0x7ff68c28a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4a8a7e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055e660>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa105093f0; to 'JaxprTracer' at 0x7ffa1050a4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d3d4bf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805920>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713cef380; to 'JaxprTracer' at 0x7ff713cee480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x572ea610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0624f90>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd080e0; to 'JaxprTracer' at 0x7ff70bd08090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55fb8a20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d83f0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0573240; to 'JaxprTracer' at 0x7ffbb0571260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcdbaab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416aa0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026ee30; to 'JaxprTracer' at 0x7ffb3026f010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc73e1530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01269b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4f5710; to 'JaxprTracer' at 0x7ff70c4f6d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c185bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2631d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50707510; to 'JaxprTracer' at 0x7ffb50705530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x589c4170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fec090>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c414900; to 'JaxprTracer' at 0x7ffd2c414180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc15a6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302db560>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ac7ca40; to 'JaxprTracer' at 0x7ff70ac7c450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86dfa080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08664be0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c72b1f0; to 'JaxprTracer' at 0x7ffad031e750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f2ce5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6010>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701f5a30; to 'JaxprTracer' at 0x7ffb701f7c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf5e1db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d2f10>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c1b7b00; to 'JaxprTracer' at 0x7ff9d0502980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb86e5c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f5280>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98209760; to 'JaxprTracer' at 0x7ffa9820ae30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fb1dbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882daef0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712faf650; to 'JaxprTracer' at 0x7ff712fac400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86ccfe20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2d20>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125798f0; to 'JaxprTracer' at 0x7ffa085c66b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34343d20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2632d0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0816e840; to 'JaxprTracer' at 0x7ffa0816e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x185275d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fefe50>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70722570; to 'JaxprTracer' at 0x7ffa70722c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5da4e610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b52d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30368ef0; to 'JaxprTracer' at 0x7ff71351e700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x191bd0e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760040>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707eb830; to 'JaxprTracer' at 0x7ffa707eb240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d48c4b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066bd0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c3a7380; to 'JaxprTracer' at 0x7ffd2c3a6c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3662870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085555b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30112430; to 'JaxprTracer' at 0x7ff70c7591c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b964350>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b9fd0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad02ec810; to 'JaxprTracer' at 0x7ffad02ef9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ca7f8a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a4fe0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b3d9850; to 'JaxprTracer' at 0x7ff70b3db3d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34643b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3770>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981af150; to 'JaxprTracer' at 0x7ffa981ae480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9708de30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4580>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28409620; to 'JaxprTracer' at 0x7ffb2840bb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0105c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b7a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff66c3c94e0; to 'JaxprTracer' at 0x7ff66c3c9620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77e4c640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
82, epoch_train_loss=3.2796184744785317
Epoch 83
Epoch 83 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341050>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4443510; to 'JaxprTracer' at 0x7ffcd4440e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc7562d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb087694a0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0796c50; to 'JaxprTracer' at 0x7ffbd0794770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6cdc4080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718550>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50416570; to 'JaxprTracer' at 0x7ffb50415b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bd87b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1f50>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5049fe20; to 'JaxprTracer' at 0x7ffc5049fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x881088d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708555ce0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab00d1080; to 'JaxprTracer' at 0x7ffab00d06d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x916086f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760030>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132a1490; to 'JaxprTracer' at 0x7ff7132a0b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd08c9bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce61d50>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904657b0; to 'JaxprTracer' at 0x7ffc90464f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5724f30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079f220>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d017d080; to 'JaxprTracer' at 0x7ff9d017dd50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43b51b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5c60>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c1e0d10; to 'JaxprTracer' at 0x7ffd2c1e00e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x901fb680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847c270>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98703e70; to 'JaxprTracer' at 0x7ffa505afb50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f778f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d8170>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd7d210; to 'JaxprTracer' at 0x7ff70bd7e4d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77eb2060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2d00>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd478f1a0; to 'JaxprTracer' at 0x7ffcd478e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b990220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673120>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8844b010; to 'JaxprTracer' at 0x7ffc884499e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92e3220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac34a650>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888b1d50; to 'JaxprTracer' at 0x7ff7888b2980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c04b430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708554300>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134edee0; to 'JaxprTracer' at 0x7ff7134efc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a4939d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708580>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb00d4720; to 'JaxprTracer' at 0x7ffcb00d60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58f43e40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079d070>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab06158a0; to 'JaxprTracer' at 0x7ffab0616340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x97f8f980>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263860>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141004a0; to 'JaxprTracer' at 0x7ff714102e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c5129f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653570>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06c6520; to 'JaxprTracer' at 0x7ff9d06c7920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac201c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2e60>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10734c20; to 'JaxprTracer' at 0x7ffa10734040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75e51960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888be2f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb003f560; to 'JaxprTracer' at 0x7ffcb003e200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77d4ff90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8cc0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085336f0; to 'JaxprTracer' at 0x7ff7085313a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x73621c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10185e30>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf01504f0; to 'JaxprTracer' at 0x7ffbf0153830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60102f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0930>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713ebbb50; to 'JaxprTracer' at 0x7ff713eb8a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b179ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707098e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0257560; to 'JaxprTracer' at 0x7ff9d0256480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc51deab0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feea30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50706980; to 'JaxprTracer' at 0x7ffb50706cf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f93d790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10e300>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c184310; to 'JaxprTracer' at 0x7ff68c184450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62f2a570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
83, epoch_train_loss=3.2796184744785317
Epoch 84
Epoch 84 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d3040>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ccc0950; to 'JaxprTracer' at 0x7ff70ccc0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37eaa8c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086657b0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10508540; to 'JaxprTracer' at 0x7ffa10509990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5736d8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e7780>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713951bc0; to 'JaxprTracer' at 0x7ff7139520c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ea52940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b87e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127eda80; to 'JaxprTracer' at 0x7ff7127ede40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29e8efe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5270>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bce41d0; to 'JaxprTracer' at 0x7ff70bce4590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc574f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bff10>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa50792bb0; to 'JaxprTracer' at 0x7ffa507902c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6b21e310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b63d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08744c70; to 'JaxprTracer' at 0x7ffb087476f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x508bac30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473fb50>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712040310; to 'JaxprTracer' at 0x7ff712043ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb63f6600>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fece70>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ab9b70; to 'JaxprTracer' at 0x7ff712ab87c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9802af20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057db90>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30138540; to 'JaxprTracer' at 0x7ffc30139d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47069150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41fac0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c728270; to 'JaxprTracer' at 0x7ff70c729df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91cc4620>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055ead0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d017d9e0; to 'JaxprTracer' at 0x7ff9d017f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x19d26290>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805040>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4719f80; to 'JaxprTracer' at 0x7ffc904420c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x220357a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6720>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90294ef0; to 'JaxprTracer' at 0x7ffc902968e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3706d530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6fc0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb04bd530; to 'JaxprTracer' at 0x7ffcb04bd300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3359f5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c10a0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab00d32e0; to 'JaxprTracer' at 0x7ffab00d3d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8ccbfae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e7f0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0876b100; to 'JaxprTracer' at 0x7ff70b024ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x497215f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feca90>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713f3fab0; to 'JaxprTracer' at 0x7ff713f3d030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x664d2e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90381600>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301149a0; to 'JaxprTracer' at 0x7ffc301141d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x976be0b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708800>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0584cc0; to 'JaxprTracer' at 0x7ff70bd4d1c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x726d3960>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0762d40>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0479e40; to 'JaxprTracer' at 0x7ffcb047a980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a9512f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0066130>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70a00dc10; to 'JaxprTracer' at 0x7ff70a00fa60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x469836f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022fb70>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907c8a40; to 'JaxprTracer' at 0x7ffb907cb470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4c4d4240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac348de0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c1992b0; to 'JaxprTracer' at 0x7ffab07d3ec0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26260460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2f40>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7075d4e0; to 'JaxprTracer' at 0x7ffb7075e430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1927ee60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719e10>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301f5440; to 'JaxprTracer' at 0x7ffa301f5d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3b7a7650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b710>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c0d7790; to 'JaxprTracer' at 0x7ff64c6e7d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f9650f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
84, epoch_train_loss=3.2796184744785317
Epoch 85
Epoch 85 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079e1d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa703084a0; to 'JaxprTracer' at 0x7ffa70308810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ff44fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341670>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907a2480; to 'JaxprTracer' at 0x7ffb907a37e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70b4c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876b560>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ff78d0; to 'JaxprTracer' at 0x7ff712ff4ae0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x15553060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7146713e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6ea890; to 'JaxprTracer' at 0x7ff70c6ead40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10b2eb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac3496e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb059ffb0; to 'JaxprTracer' at 0x7ffbb059ec50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c0c8bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07602e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd043e6b0; to 'JaxprTracer' at 0x7ffbd043fbf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7eab4f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce617b0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c902110; to 'JaxprTracer' at 0x7ffa30651c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bc8aa70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653ce0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d067b420; to 'JaxprTracer' at 0x7ff9d0678090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd9785a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2615d0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b717380; to 'JaxprTracer' at 0x7ff70b7157b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38edf2d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139bc0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7022c810; to 'JaxprTracer' at 0x7ffb7022e570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbcebb670>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce0340>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03af0b0; to 'JaxprTracer' at 0x7ffbd03ae480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c31410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d8c30>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141ae570; to 'JaxprTracer' at 0x7ffc904f71a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x884b2cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb701d1800>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88449b20; to 'JaxprTracer' at 0x7ffc88448130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb78c0c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e3f60>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026f2e0; to 'JaxprTracer' at 0x7ffb3026c810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc5396a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cd710>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0573740; to 'JaxprTracer' at 0x7ffbb0570ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc06d2720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760720>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4235300; to 'JaxprTracer' at 0x7ffd2c15b290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77662050>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653fb0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120a0ae0; to 'JaxprTracer' at 0x7ff7120a39c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcfc45410>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a6030>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713c95e40; to 'JaxprTracer' at 0x7ff713c956c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ac870b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca9d0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7134d18f0; to 'JaxprTracer' at 0x7ff7134d2bb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2b49660>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4fa0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01e8720; to 'JaxprTracer' at 0x7ff9d01e84f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10b4e5a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01268d0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff64c4efe20; to 'JaxprTracer' at 0x7ffad0320950>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7715f20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8fb0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712579fd0; to 'JaxprTracer' at 0x7ff712579c10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11ff4a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10185c80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303c65c0; to 'JaxprTracer' at 0x7ffa303c5ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61db2230>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708554bd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712dc6570; to 'JaxprTracer' at 0x7ffc107ada80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5903fc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289530>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bcb0450; to 'JaxprTracer' at 0x7ff70bcb33d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82f472a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bbd30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0255080; to 'JaxprTracer' at 0x7ff9d0256390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd12ac120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10c1b0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff66c4e6e30; to 'JaxprTracer' at 0x7ff9d01a7bf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d094690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
85, epoch_train_loss=3.2796184744785317
Epoch 86
Epoch 86 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d8aa0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d6d7b0; to 'JaxprTracer' at 0x7ff712d6fa10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3cff3be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08665560>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0171f30; to 'JaxprTracer' at 0x7ffbd0173920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ebc22b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706743a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0624400; to 'JaxprTracer' at 0x7ff9d0627ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e06c320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022f970>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141024d0; to 'JaxprTracer' at 0x7ff7141004a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1270ca90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28415a40>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc105170b0; to 'JaxprTracer' at 0x7ffc10515e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x157aaf70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124210>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709780a40; to 'JaxprTracer' at 0x7ff70bd09d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8d4ae860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057e070>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3049eed0; to 'JaxprTracer' at 0x7ffb3049c900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b009db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e9c0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e17b50; to 'JaxprTracer' at 0x7ff788e15350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2ef37d10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feef30>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7145d5d50; to 'JaxprTracer' at 0x7ff7145d6e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91390bb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067bb0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0657510; to 'JaxprTracer' at 0x7ff9d0655bc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2db95840>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd02209f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712006f70; to 'JaxprTracer' at 0x7ffb7078ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e27140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e64c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b8fe520; to 'JaxprTracer' at 0x7ff70b8fccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91ded380>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e7070>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280cfec0; to 'JaxprTracer' at 0x7ffb280cc090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c657140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f72c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7143c9300; to 'JaxprTracer' at 0x7ff7143cbe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa6433f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8840>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b417560; to 'JaxprTracer' at 0x7ff70b414e00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44081970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c33d0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb302a52b0; to 'JaxprTracer' at 0x7ffb302a4630>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x49023880>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473ed70>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30220b30; to 'JaxprTracer' at 0x7ffb300d9f30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31df1f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306534a0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb501936f0; to 'JaxprTracer' at 0x7ffb501920c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7d87fe70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90381470>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb061f5b0; to 'JaxprTracer' at 0x7ffa304053f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f6109e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708490>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bfb50d0; to 'JaxprTracer' at 0x7ff70bfb5d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48b4fc30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0760400>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300a8180; to 'JaxprTracer' at 0x7ffb300a8400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x31845640>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c19b0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d81210; to 'JaxprTracer' at 0x7ff712d831a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ac42a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882db750>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4441030; to 'JaxprTracer' at 0x7ffa080fcc20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7aa15e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bca60>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50417880; to 'JaxprTracer' at 0x7ff7122e4e50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7d87cf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1090>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0412480; to 'JaxprTracer' at 0x7ffc50268770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x527427e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768150>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5072f650; to 'JaxprTracer' at 0x7ffb5072ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3fc5f3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93be30>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff62c7d1580; to 'JaxprTracer' at 0x7ff62c7d18f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x525e7820>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
86, epoch_train_loss=3.2796184744785317
Epoch 87
Epoch 87 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0627a80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04fd2b0; to 'JaxprTracer' at 0x7ffad04fc680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x209b9b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce0500>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ac7eb60; to 'JaxprTracer' at 0x7ff70ac7c590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4e83c440>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dd150>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e7c810; to 'JaxprTracer' at 0x7ff788e7f790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71b41800>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714671cf0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306aa9d0; to 'JaxprTracer' at 0x7ffa306aaed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2b884d90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904ce0b0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132a1120; to 'JaxprTracer' at 0x7ffbd01dbb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b17c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070b490>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713746020; to 'JaxprTracer' at 0x7ff713745350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1eece0a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8c40>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709adf600; to 'JaxprTracer' at 0x7ff709ade250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x37c0df10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30650540>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707a7e70; to 'JaxprTracer' at 0x7ffb707a6e30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd0b470e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473f010>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125a76a0; to 'JaxprTracer' at 0x7ff7125a6a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5de1d7d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3060>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98651c60; to 'JaxprTracer' at 0x7ffa98652d90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f1e1210>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847fc70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7120404f0; to 'JaxprTracer' at 0x7ffc504dce50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69560790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce25d0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b69f7e0; to 'JaxprTracer' at 0x7ff70b69f880>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83265540>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768620>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981e1620; to 'JaxprTracer' at 0x7ffbd03da700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c89260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101854d0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb45a80; to 'JaxprTracer' at 0x7ffb2865c220>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60ba7110>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cfb40>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bce4450; to 'JaxprTracer' at 0x7ff70bce7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e7682a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28b290>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c1f5a80; to 'JaxprTracer' at 0x7ffd2c1f7ab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44eb9f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306506a0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281748b0; to 'JaxprTracer' at 0x7ff70c1e85e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7b919910>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1e30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b72b380; to 'JaxprTracer' at 0x7ff70b729800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7e90480>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804be0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713953150; to 'JaxprTracer' at 0x7ff713953380>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43f26c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4ca0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70cccbb00; to 'JaxprTracer' at 0x7ff70ccc92b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82bc9940>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0125570>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d01eba10; to 'JaxprTracer' at 0x7ff9d01e9e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13ae39f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28417ae0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98621990; to 'JaxprTracer' at 0x7ffa98622840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4b65e70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e13a0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07107c0; to 'JaxprTracer' at 0x7ffad07138d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9bc7d2f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad07601c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3036ba60; to 'JaxprTracer' at 0x7ffc30369f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x70bef3a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c2885b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb307a2700; to 'JaxprTracer' at 0x7ffb307a1170>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2cffc6c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675a20>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07d0900; to 'JaxprTracer' at 0x7ffab07d3420>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1584cc20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10ccc0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb304610d0; to 'JaxprTracer' at 0x7ffb304633d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8200f6b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
87, epoch_train_loss=3.2796184744785317
Epoch 88
Epoch 88 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06faf40>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712580450; to 'JaxprTracer' at 0x7ff712581120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86d4ba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302dbe80>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ba9cf90; to 'JaxprTracer' at 0x7ff788e3c5e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e001030>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667840>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0603790; to 'JaxprTracer' at 0x7ffb2840ade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f16fd70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677880>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc506de070; to 'JaxprTracer' at 0x7ffc506df1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x35efc9c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f40e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306d7bf0; to 'JaxprTracer' at 0x7ffb704493a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc51b1cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127800>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb904653a0; to 'JaxprTracer' at 0x7ffb90465b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ce742a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057efa0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ae0cc0; to 'JaxprTracer' at 0x7ff712ae3c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48d91a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90380f80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb008ede0; to 'JaxprTracer' at 0x7ffcb008f9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ab91b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fedda0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904f7970; to 'JaxprTracer' at 0x7ffc101cdcb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x129cae40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a4870>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902e0220; to 'JaxprTracer' at 0x7ffc902e1a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77542870>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071a1f0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905c6c00; to 'JaxprTracer' at 0x7ffb905c67f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ae3c790>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d0fd0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa503308b0; to 'JaxprTracer' at 0x7ffa503336f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4dfbd450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055f9e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280e1a80; to 'JaxprTracer' at 0x7ffa083c8720>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x32053020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e7920>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132fc3b0; to 'JaxprTracer' at 0x7ff7132fe430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x418b6b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f50a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9064d800; to 'JaxprTracer' at 0x7ffc9064efc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4437db0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b6290>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132a06d0; to 'JaxprTracer' at 0x7ff7132a3d80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e1adee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90380310>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107453a0; to 'JaxprTracer' at 0x7ffc10747f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83ade0f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2614d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5016c860; to 'JaxprTracer' at 0x7ffa5016dc60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39157a90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c1c70>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50190d60; to 'JaxprTracer' at 0x7ffb501925c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d8b6bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c2897b0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5035d0d0; to 'JaxprTracer' at 0x7ffa5035ff60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8c55abc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce63f00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30138090; to 'JaxprTracer' at 0x7ffc3013bb00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x727bbcf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7085564c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce200e0; to 'JaxprTracer' at 0x7ff70ce21490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x22293610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022e210>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc50015d00; to 'JaxprTracer' at 0x7ffc50014a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd2bce10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bcd90>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc106b4b30; to 'JaxprTracer' at 0x7ffc106b62a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x48c3400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b5f80>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3036a340; to 'JaxprTracer' at 0x7ffc3036ba60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88129630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08768ac0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa085c76a0; to 'JaxprTracer' at 0x7ffa085c7650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2ebb810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b610>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff64c46fa10; to 'JaxprTracer' at 0x7ffa08139120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d7e5f50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
88, epoch_train_loss=3.2796184744785317
Epoch 89
Epoch 89 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bb2d0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d047b9c0; to 'JaxprTracer' at 0x7ff9d047aed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x881eec30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055f1f0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa502bb970; to 'JaxprTracer' at 0x7ffa502bad40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x305cae0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4292ac0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714480720; to 'JaxprTracer' at 0x7ffa7030bf10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1732f7e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e2ee0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce94b80; to 'JaxprTracer' at 0x7ff70ce958a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x204e91b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0763150>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132a0630; to 'JaxprTracer' at 0x7ff7132a0900>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d994a80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c2889e0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904419e0; to 'JaxprTracer' at 0x7ffc90440ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3619c490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263860>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301f5300; to 'JaxprTracer' at 0x7ffc5021e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3639a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261670>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb45440; to 'JaxprTracer' at 0x7ff70bb45990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf5ff860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90383ed0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5074cdb0; to 'JaxprTracer' at 0x7ffa5074fab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x905f2860>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff66c7a8160>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd018c900; to 'JaxprTracer' at 0x7ffbd018fc90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38322760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b1fb0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708593060; to 'JaxprTracer' at 0x7ff708593dd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9807a8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055fb20>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7132ccd60; to 'JaxprTracer' at 0x7ff7132ceac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8f568f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876b820>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7075c630; to 'JaxprTracer' at 0x7ffb7075e890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a64d970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10185a90>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7148530b0; to 'JaxprTracer' at 0x7ffc303d9080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43c08c90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708f70>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb08205c10; to 'JaxprTracer' at 0x7ffb08205940>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x129fe1b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8040>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf013dad0; to 'JaxprTracer' at 0x7ffbf013d620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b9f7120>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fedc60>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c7885e0; to 'JaxprTracer' at 0x7ff70c789800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2454750>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c0b20>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc88706f70; to 'JaxprTracer' at 0x7ffc88706890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x239c9710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6df260>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8829e750; to 'JaxprTracer' at 0x7ffc8829ce00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7e7997d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1fa0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90395a30; to 'JaxprTracer' at 0x7ffb90394180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x183becf0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab01264c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb281b71a0; to 'JaxprTracer' at 0x7ffb281b6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x445c4b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bf890>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05d8b30; to 'JaxprTracer' at 0x7ffbb05d9210>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa5a2cce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac349620>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907c9df0; to 'JaxprTracer' at 0x7ff788e3fd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x737f8510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce60c70>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30138680; to 'JaxprTracer' at 0x7ffc30139d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34492d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653330>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71229f920; to 'JaxprTracer' at 0x7ff71229f600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa32f5810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4a50>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0720db0; to 'JaxprTracer' at 0x7ffab07239c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x202f1c50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff66c7ab970>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff66c6856c0; to 'JaxprTracer' at 0x7ff66c686c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8139eb30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
89, epoch_train_loss=3.2796184744785317
Epoch 90
Epoch 90 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50138ae0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301467f0; to 'JaxprTracer' at 0x7ffa30146480>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2211390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302daf30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c51f420; to 'JaxprTracer' at 0x7ff68c51c4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2e4d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41e4a0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf77ab0; to 'JaxprTracer' at 0x7ff70bf74cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xce4a9270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706774a0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7889177e0; to 'JaxprTracer' at 0x7ff7889171f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x558dea50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f6250>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05ea480; to 'JaxprTracer' at 0x7ffbb05e9850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d652af0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124d80>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0411080; to 'JaxprTracer' at 0x7ffab0413470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x530fe8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057e740>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c055490; to 'JaxprTracer' at 0x7ffd2c0558a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x20d833c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8dbf00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083a03b0; to 'JaxprTracer' at 0x7ffa083a2250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x42a92d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fee980>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd478c4f0; to 'JaxprTracer' at 0x7ffcd478c770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xacc62d00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb701d0160>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712abaa70; to 'JaxprTracer' at 0x7ff712abb970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f6c420>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a7420>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707a73d0; to 'JaxprTracer' at 0x7ff709b0f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4727c30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302da920>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf059fec0; to 'JaxprTracer' at 0x7ffbf059ddf0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x503fd760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667fb0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb001aed0; to 'JaxprTracer' at 0x7ffcb001a2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5cc8f330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022d4a0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d017c860; to 'JaxprTracer' at 0x7ff9d017e700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2e0ac6f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f41a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab00d1260; to 'JaxprTracer' at 0x7ff709e62a20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9d4b8730>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0380>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd076dda0; to 'JaxprTracer' at 0x7ffbd076e390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b78dd50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8db130>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb283c4720; to 'JaxprTracer' at 0x7ffb283c4310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5558a330>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feef40>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb505ee700; to 'JaxprTracer' at 0x7ffb505ede90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ed88970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0064ab0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd41dfd80; to 'JaxprTracer' at 0x7ffcd41dc1d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fd72e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8040>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0439cb0; to 'JaxprTracer' at 0x7ffcb0439710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e04310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28a520>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9008bb00; to 'JaxprTracer' at 0x7ffc900897b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x785dd6a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce61300>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb702a6390; to 'JaxprTracer' at 0x7ffb702a5d50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x43b760f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e5d40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b6d78d0; to 'JaxprTracer' at 0x7ff70b6d4680>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa47bec80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a47a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0139ad0; to 'JaxprTracer' at 0x7ffb504175b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8b713920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3ac0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30174270; to 'JaxprTracer' at 0x7ffb305204f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7fa41e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd4290d30>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712041df0; to 'JaxprTracer' at 0x7ff712043240>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2f058c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b360>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff60c7aa110; to 'JaxprTracer' at 0x7ff60c7aa250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50390e00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
90, epoch_train_loss=3.2796184744785317
Epoch 91
Epoch 91 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff708554f00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff66c7c5a80; to 'JaxprTracer' at 0x7ff66c7c6de0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2e886b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079c110>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90089670; to 'JaxprTracer' at 0x7ffc9008a840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30f97be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055dd40>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd41de890; to 'JaxprTracer' at 0x7ffcd41dccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5d6ee610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e20e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c6eb650; to 'JaxprTracer' at 0x7ffbf01ccea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x208c3b70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce63370>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb305271a0; to 'JaxprTracer' at 0x7ffab078dee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4f767e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c8dc0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085e2520; to 'JaxprTracer' at 0x7ff7085e04a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7ba61f90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473cc80>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d050b880; to 'JaxprTracer' at 0x7ff9d050ae80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3d825510>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473fe80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4441030; to 'JaxprTracer' at 0x7ffcd4442660>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbbe6f6e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c31a0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709b0ef20; to 'JaxprTracer' at 0x7ffd2c225300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f623020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672170>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc886a89a0; to 'JaxprTracer' at 0x7ffc886aa0c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa9526360>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e57c0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb03609f0; to 'JaxprTracer' at 0x7ffd2c0a1e40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10b50c70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b1550>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1a1c10; to 'JaxprTracer' at 0x7ffc904f60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x30b852d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce3940>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc304ed260; to 'JaxprTracer' at 0x7ffc304ef6a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58603150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e2ad0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0262d90; to 'JaxprTracer' at 0x7ff9d02630b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcea093a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070bfa0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7135aa8e0; to 'JaxprTracer' at 0x7ff7135abc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x494ca740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651140>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05eb420; to 'JaxprTracer' at 0x7ffbb05ea700>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1b874bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712feeb00>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5061d300; to 'JaxprTracer' at 0x7ffc5061d3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47ff83a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8dbe30>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0737c40; to 'JaxprTracer' at 0x7ffbd0736ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc250fc80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263950>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d06c7f60; to 'JaxprTracer' at 0x7ff9d06c6390>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x473a2b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c3200>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08796c00; to 'JaxprTracer' at 0x7ffa08796200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x94594090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bef00>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c51fec0; to 'JaxprTracer' at 0x7ff68c51e250>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c2404c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a6160>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa702d1440; to 'JaxprTracer' at 0x7ffa702d0400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9b7f1d40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac34b380>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd0170a90; to 'JaxprTracer' at 0x7ffbd01703b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xccd90b50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28b5c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10278d10; to 'JaxprTracer' at 0x7ffc882d6980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11fef720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa086643e0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0138c70; to 'JaxprTracer' at 0x7ffab013ad90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ab919f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41d070>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c902700; to 'JaxprTracer' at 0x7ff70c900f90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x89a92ff0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10eb80>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff62c4f4180; to 'JaxprTracer' at 0x7ff62c4f59e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa228c310>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
91, epoch_train_loss=3.2796184744785317
Epoch 92
Epoch 92 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70674230>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71324e930; to 'JaxprTracer' at 0x7ff71324d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x11e52070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50718b70>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa984b39c0; to 'JaxprTracer' at 0x7ffa984b0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x596a6bd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0223f00>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc8829f560; to 'JaxprTracer' at 0x7ffc8829f100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69714be0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e47e0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff711fdb1a0; to 'JaxprTracer' at 0x7ff711fdaed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x61405400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5a00>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb5072c900; to 'JaxprTracer' at 0x7ffb5072dfd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3bd47280>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c0700>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4f50d0; to 'JaxprTracer' at 0x7ff70c4f4db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83ebea30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00671d0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900d9a80; to 'JaxprTracer' at 0x7ffc900db790>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x78c4e6d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d9180>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125a7bf0; to 'JaxprTracer' at 0x7ff7125a7970>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x23908140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90380d10>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7022dfd0; to 'JaxprTracer' at 0x7ffb7022fd80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x75e5900>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc904cf1a0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70abc88b0; to 'JaxprTracer' at 0x7ff70abca840>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ab78320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a5000>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf059cfe0; to 'JaxprTracer' at 0x7ffbf059dad0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3f7aeb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d9120>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30138860; to 'JaxprTracer' at 0x7ffc3013b9c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x279a13c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41f3e0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0257d30; to 'JaxprTracer' at 0x7ff9d0255ee0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x941b18a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022ea50>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085e1b20; to 'JaxprTracer' at 0x7ff7085e0310>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac981ec0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a54c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0636430; to 'JaxprTracer' at 0x7ff9d0637a10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6635ffc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057dc40>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90465670; to 'JaxprTracer' at 0x7ffc90467600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x91f422b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8db530>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb02b1e40; to 'JaxprTracer' at 0x7ffcb02b3c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbdd1fba0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262ab0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714845ee0; to 'JaxprTracer' at 0x7ff714845a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xccdf57e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127980>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7085afec0; to 'JaxprTracer' at 0x7ff7085ae8e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7ebf4c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651c90>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad05b8540; to 'JaxprTracer' at 0x7ffad05baf20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x66781a30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c84c0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb05343b0; to 'JaxprTracer' at 0x7ffbb0534540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33450ad0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c289a70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06916c0; to 'JaxprTracer' at 0x7ffcb0692a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f92b090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882d8f40>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71229ca40; to 'JaxprTracer' at 0x7ff71229de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x88453c60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b6280>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ce23ba0; to 'JaxprTracer' at 0x7ff70ce21b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5b9041d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057c930>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb22250; to 'JaxprTracer' at 0x7ff70bb22070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9c021970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055cfb0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7137c8d10; to 'JaxprTracer' at 0x7ff7137c8c70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x779a4080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b8f0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff60c53bb00; to 'JaxprTracer' at 0x7ff60c53bc40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x926bf160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
92, epoch_train_loss=3.2796184744785317
Epoch 93
Epoch 93 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0763f30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb02376f0; to 'JaxprTracer' at 0x7ffbb0234770>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57f0d490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e4290>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb081d0270; to 'JaxprTracer' at 0x7ffb081d3e20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10f0d430>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa9847da30>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc301a33d0; to 'JaxprTracer' at 0x7ffc301a1a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1318e370>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e0750>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714844bd0; to 'JaxprTracer' at 0x7ffa70741f80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5c6656e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce60f90>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb300d9710; to 'JaxprTracer' at 0x7ffb300dba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x761ef320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651c30>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083c9f80; to 'JaxprTracer' at 0x7ff70c212ca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x336039a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473e4e0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb28166480; to 'JaxprTracer' at 0x7ffb28167290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x12179e10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473c280>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50237510; to 'JaxprTracer' at 0x7ffb502351c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6c4d44a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8d8410>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303c54e0; to 'JaxprTracer' at 0x7ffa303c5080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9025b390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd42928f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98701a80; to 'JaxprTracer' at 0x7ffa987027a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fbdb990>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0627d80>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303e0a90; to 'JaxprTracer' at 0x7ffa303e2570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc883df80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b9010>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3072f4c0; to 'JaxprTracer' at 0x7ffa502f9300>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4004b530>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055d150>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712b4ab60; to 'JaxprTracer' at 0x7ff712b497b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4491da50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac34b3c0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3070d670; to 'JaxprTracer' at 0x7ffc3070eca0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x728c8e30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28b4c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d0413330; to 'JaxprTracer' at 0x7ff9d0413d30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x962dbf30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651860>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3026c5e0; to 'JaxprTracer' at 0x7ffc902f8c20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f7e4770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c2638c0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703ff5b0; to 'JaxprTracer' at 0x7ffc5021d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x82eb5a70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8da6d0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c1e80e0; to 'JaxprTracer' at 0x7ff70c1eba10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77431b10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139840>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0779f30; to 'JaxprTracer' at 0x7ffcb077a200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4506d5d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057ce50>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb0602480; to 'JaxprTracer' at 0x7ffcb0603060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3998d1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bda90>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d064fba0; to 'JaxprTracer' at 0x7ff9d064f010>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaa38c2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4a40>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30590cc0; to 'JaxprTracer' at 0x7ffc305913f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcc92b9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10185c80>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad04ffd80; to 'JaxprTracer' at 0x7ffad04fc4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ee4020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070b2f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc90046bb0; to 'JaxprTracer' at 0x7ffc90046890>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb77dcb90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712806190>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad02ed440; to 'JaxprTracer' at 0x7ffad02ec2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb9731c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08666aa0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa080d0360; to 'JaxprTracer' at 0x7ffa080d1990>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2f0fa90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff66c7a8e00>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff62c5ab1f0; to 'JaxprTracer' at 0x7ff62c5ab330>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa957c630>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
93, epoch_train_loss=3.2796184744785317
Epoch 94
Epoch 94 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a66a0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc900ade90; to 'JaxprTracer' at 0x7ffc900ae750>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e7e7c00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb5071a130>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7139b0a40; to 'JaxprTracer' at 0x7ff7139b2f20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33a9100>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0221eb0>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc887056c0; to 'JaxprTracer' at 0x7ffc88707600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6a90ff70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882da8c0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c294770; to 'JaxprTracer' at 0x7ffd2c295df0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2af00a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b66e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab04103b0; to 'JaxprTracer' at 0x7ffab0412e80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x68c8ce40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057f210>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb304d8ae0; to 'JaxprTracer' at 0x7ffb304d93a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8fc0dc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0341b10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab0411df0; to 'JaxprTracer' at 0x7ffad052bab0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cad48a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8dbb00>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7141ae6b0; to 'JaxprTracer' at 0x7ff7141af0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39d10b30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382960>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd018eb60; to 'JaxprTracer' at 0x7ffc107ad6c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57707d30>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c2890>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b347420; to 'JaxprTracer' at 0x7ffbf059f6f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xca1d76d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f89a0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc303d9d50; to 'JaxprTracer' at 0x7ffc303dac50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5fc85720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719770>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c986f20; to 'JaxprTracer' at 0x7ff70c987920>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5361f1e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41ea30>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07a3d30; to 'JaxprTracer' at 0x7ffbb07a09a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8cc6e1c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022ecd0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280e2020; to 'JaxprTracer' at 0x7ffb280e0ea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcf7f8c10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b70a0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788d72f70; to 'JaxprTracer' at 0x7ff788d71350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x600f89c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067ab0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788b67d80; to 'JaxprTracer' at 0x7ff788b642c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x26147e20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8daed0>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb061fdd0; to 'JaxprTracer' at 0x7ffcb061de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x81b99b90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013b9e0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712fc8130; to 'JaxprTracer' at 0x7ff714481620>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1976dea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c00f0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff64c4ec220; to 'JaxprTracer' at 0x7ffa50598270>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2c03b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306506a0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712e4da80; to 'JaxprTracer' at 0x7ff712e4df80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10ed2f10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c85f0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab07547c0; to 'JaxprTracer' at 0x7ffab07559e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x53431b80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70708d70>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c226980; to 'JaxprTracer' at 0x7ffd2c2265c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3f46b20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f79b0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0323380; to 'JaxprTracer' at 0x7ffad03223e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x695d2270>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec2ff0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc9069cb80; to 'JaxprTracer' at 0x7ffc9069d260>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7dd96ed0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00651a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c75a750; to 'JaxprTracer' at 0x7ff70c7589a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e72ea00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102b95e0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07a3880; to 'JaxprTracer' at 0x7ff713eb9530>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4aeac780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bfe0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff64c16e160; to 'JaxprTracer' at 0x7ff64c16e2a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbc071f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
94, epoch_train_loss=3.2796184744785317
Epoch 95
Epoch 95 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce60bc0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc906f3ce0; to 'JaxprTracer' at 0x7ffc906f0130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x534e5a60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714673da0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa7032bc40; to 'JaxprTracer' at 0x7ffa70328450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x368f3680>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e6950>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc30520f90; to 'JaxprTracer' at 0x7ffc30520040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x50349fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb0876b240>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ac7d7b0; to 'JaxprTracer' at 0x7ff70ac7f560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3453bd80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac349ae0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e17c90; to 'JaxprTracer' at 0x7ff788e15670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x58314140>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc306524f0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712aa8590; to 'JaxprTracer' at 0x7ff712aa9a30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f0034c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473f670>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa70286020; to 'JaxprTracer' at 0x7ffa702871a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d80e90>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcd473dd30>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb905c7d30; to 'JaxprTracer' at 0x7ffb905c7100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xd0a7d080>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262cb0>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712dc4720; to 'JaxprTracer' at 0x7ff712dc4130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1297f3c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce1e70>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5074c040; to 'JaxprTracer' at 0x7ffa5074e340>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5df1bbb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055fd70>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc107adb70; to 'JaxprTracer' at 0x7ffbd03ae520>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb790bda0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0624fa0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0361670; to 'JaxprTracer' at 0x7ffbb0362c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52a3e5e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ba060>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bd0aca0; to 'JaxprTracer' at 0x7ff70bd09e90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x592134f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e27b0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7125a43b0; to 'JaxprTracer' at 0x7ff712f8fe70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb60061a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070b050>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb058b380; to 'JaxprTracer' at 0x7ffc304ef100>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x60cd2fb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30651ce0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c242a70; to 'JaxprTracer' at 0x7ff70c2428e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbc7b2c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa50139370>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa981e2e80; to 'JaxprTracer' at 0x7ffa981e0bd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabb6f260>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262ac0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc5061e340; to 'JaxprTracer' at 0x7ff7132c5490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x69508690>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70676ea0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048e3e0; to 'JaxprTracer' at 0x7ffa3048c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e5cea0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0340430>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c33e3e0; to 'JaxprTracer' at 0x7ffd2c33d490>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc2e75a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0125800>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0782a20; to 'JaxprTracer' at 0x7ffbb0783470>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e16cc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bc150>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd47a7ce0; to 'JaxprTracer' at 0x7ffcd47a6b60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x54a276d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184570>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb059f650; to 'JaxprTracer' at 0x7ffbb059f830>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5bc43320>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28bbd0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4d4ef0; to 'JaxprTracer' at 0x7ff70c4d7600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2d4fb560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712807180>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf035b0; to 'JaxprTracer' at 0x7ff70bf02c50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x90212460>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41fdc0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bb23ec0; to 'JaxprTracer' at 0x7ff70bb21710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa4cb93e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10f370>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb70669b20; to 'JaxprTracer' at 0x7ffb70669c60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa0ee2f40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
95, epoch_train_loss=3.2796184744785317
Epoch 96
Epoch 96 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff9d06b4680>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1057e430; to 'JaxprTracer' at 0x7ffc1057e7a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd28d3d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb503a6c20>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30702e80; to 'JaxprTracer' at 0x7ffb30703f60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x10d1a710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb50719650>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc10515580; to 'JaxprTracer' at 0x7ffc10517c90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x44fab930>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41d860>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc884eb970; to 'JaxprTracer' at 0x7ffc884e9710>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb5261f00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a68e0>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab01a0ef0; to 'JaxprTracer' at 0x7ff788866a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x52015a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0124f70>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7143a5da0; to 'JaxprTracer' at 0x7ff7143a7b50>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4f2b6810>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b2720>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd4400680; to 'JaxprTracer' at 0x7ffcd44003b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1ebfc9d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b0ce0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712d85df0; to 'JaxprTracer' at 0x7ff712d876f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaae66070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712fede60>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ceafb50; to 'JaxprTracer' at 0x7ff70cead3a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29bfbbe0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab079c8f0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd01da5c0; to 'JaxprTracer' at 0x7ff713747150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5623ebb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302da190>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb907cb100; to 'JaxprTracer' at 0x7ffc3013ab10>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x629f2240>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb701d15c0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712347010; to 'JaxprTracer' at 0x7ff712344400>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xaabe3220>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d04f0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb07a1850; to 'JaxprTracer' at 0x7ffbb07a2ac0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x540edfa0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc882dbee0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb280e0cc0; to 'JaxprTracer' at 0x7ffb280e1350>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x194e6520>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec1780>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc3058e5c0; to 'JaxprTracer' at 0x7ffcd42745e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbe2d070>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb0067570>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30524310; to 'JaxprTracer' at 0x7ffb30524450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5ddd4a10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3a40>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714846ed0; to 'JaxprTracer' at 0x7ff714847fb0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6ae98390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013bad0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712ff5670; to 'JaxprTracer' at 0x7ff712ff5030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8a5ec80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6000>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4b5120; to 'JaxprTracer' at 0x7ffc90267600>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x38098760>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804340>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad0705800; to 'JaxprTracer' at 0x7ffa107cd120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7dd10e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dce50>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7093ce700; to 'JaxprTracer' at 0x7ff7093cc2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa2b49e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05c86c0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa502fb740; to 'JaxprTracer' at 0x7ffa502f8cc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc793bf00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f73f0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b897830; to 'JaxprTracer' at 0x7ff70b897650>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x303d58d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057e7f0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71285e610; to 'JaxprTracer' at 0x7ffbb0780db0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4bec07b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00667b0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7127ec3b0; to 'JaxprTracer' at 0x7ffb5047cef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xac0146c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102bb3c0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd44405e0; to 'JaxprTracer' at 0x7ffcd4441670>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6467e50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff66c7a84a0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4d4fe0; to 'JaxprTracer' at 0x7ff66c326570>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6e0eab20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
96, epoch_train_loss=3.2796184744785317
Epoch 97
Epoch 97 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb28416770>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffab03801d0; to 'JaxprTracer' at 0x7ffab0382610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4977ef70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0762e30>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc1035c4a0; to 'JaxprTracer' at 0x7ffc1035f8d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1968c090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0624460>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa107cfce0; to 'JaxprTracer' at 0x7ffa107cf290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x83234560>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055da00>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0638090; to 'JaxprTracer' at 0x7ffbf0638040>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x77407020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e1490>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff788e16e80; to 'JaxprTracer' at 0x7ff788e14ef0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1e5b9580>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dd020>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301f5e40; to 'JaxprTracer' at 0x7ffa301f4a40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa3042390>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675a10>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90231210; to 'JaxprTracer' at 0x7ff71229e2f0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5f0221d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb706773b0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10597fb0; to 'JaxprTracer' at 0x7ffa10594fe0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x72c0cc10>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c261290>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa085c6250; to 'JaxprTracer' at 0x7ffa085c60c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7860c160>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10c130>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa98700400; to 'JaxprTracer' at 0x7ffa98703c40>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7d56d70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff713ce2f40>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf07a2250; to 'JaxprTracer' at 0x7ffbf07a2c00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x79e1efc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672920>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc101cca40; to 'JaxprTracer' at 0x7ffc101cc2c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x566438a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e7960>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb3072f7e0; to 'JaxprTracer' at 0x7ffb3072c4a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x244b9740>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055c4e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc904f4ea0; to 'JaxprTracer' at 0x7ffc904f7060>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e498b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffd2c28b4c0>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb008c9a0; to 'JaxprTracer' at 0x7ffbf01a3560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xffd21d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dda30>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc306aea20; to 'JaxprTracer' at 0x7ffc306af4c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x33de8d50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90380360>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb703caca0; to 'JaxprTracer' at 0x7ffa981e2930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd814bc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c263480>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714853ba0; to 'JaxprTracer' at 0x7ffbd0796110>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3eb690c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08667e80>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048f330; to 'JaxprTracer' at 0x7ffc88706a70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcdbd8a40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00644e0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf76480; to 'JaxprTracer' at 0x7ff70bf75030>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x666241d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127cb0>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb701f52b0; to 'JaxprTracer' at 0x7ffb701f7a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x1873c170>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab057c3a0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc902e2ed0; to 'JaxprTracer' at 0x7ffc902e0180>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62f0b610>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc101849e0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb50714e50; to 'JaxprTracer' at 0x7ffb50715b20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2bebac00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707083a0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303c5b20; to 'JaxprTracer' at 0x7ffa5012e610>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x622d08d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712804fe0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff68c51d990; to 'JaxprTracer' at 0x7ff71417ccc0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x39b1ea00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb307d3610>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0773290; to 'JaxprTracer' at 0x7ffbf07723e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4648bfb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93b5e0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf061b560; to 'JaxprTracer' at 0x7ff66c4b3ba0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3327ddb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
97, epoch_train_loss=3.2796184744785317
Epoch 98
Epoch 98 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7888bd8e0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713eee750; to 'JaxprTracer' at 0x7ff713eec090>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x92184770>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb302d93d0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa707e97b0; to 'JaxprTracer' at 0x7ffa707eab60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x816f970>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc88645240>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa3048e160; to 'JaxprTracer' at 0x7ffa3048fd30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb7b0c700>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41d9b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c295fd0; to 'JaxprTracer' at 0x7ffd2c2956c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x47d974c0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7120a5a60>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5070e0c0; to 'JaxprTracer' at 0x7ffa5070fdd0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x27a97570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb0343f40>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd03eda30; to 'JaxprTracer' at 0x7ffbd03ed850>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4346ace0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e6cd0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb7022eb60; to 'JaxprTracer' at 0x7ffb7022c540>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x537ad780>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff7137e4ba0>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa303e32e0; to 'JaxprTracer' at 0x7ffa303e3150>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa50b7710>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb90382580>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa500c1350; to 'JaxprTracer' at 0x7ffa500c3a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf34150>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b8da3d0>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa306a8b30; to 'JaxprTracer' at 0x7ffa306a8a90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ced5020>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06f8760>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa10279260; to 'JaxprTracer' at 0x7ffa10278860>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x8bf19ca0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc504c1fb0>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70b7144f0; to 'JaxprTracer' at 0x7ff70b714b80>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3e97a2b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb701d27c0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712007150; to 'JaxprTracer' at 0x7ff712005d00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb6ba70b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa102f4b00>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa083c8bd0; to 'JaxprTracer' at 0x7ffa083c88b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc1cd6340>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff788ec0f00>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbf0347240; to 'JaxprTracer' at 0x7ffbf0344450>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x334ec8d0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb00646c0>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30521620; to 'JaxprTracer' at 0x7ffb305203b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x6da06f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262350>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb056be20; to 'JaxprTracer' at 0x7ffbb056b0b0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x13f485b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa08664dd0>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb90193ba0; to 'JaxprTracer' at 0x7ffcb074b560>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa1241a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd05ca8b0>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa5016ca90; to 'JaxprTracer' at 0x7ffa5016e3e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x36337570>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805b30>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc886db380; to 'JaxprTracer' at 0x7ffa502bbe20>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7174a5f0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc30653790>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa0816c1d0; to 'JaxprTracer' at 0x7ffa0816c810>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x5da53400>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb7070aa90>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30220720; to 'JaxprTracer' at 0x7ffb30223510>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x500efbd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbb022c550>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa301a82c0; to 'JaxprTracer' at 0x7ffa301aade0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x9aa43830>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffab0127a50>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff709addf30; to 'JaxprTracer' at 0x7ffad04fc130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xbd712f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c00a0>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffad07133d0; to 'JaxprTracer' at 0x7ffad0710b30>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabc199b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffcb03e5b00>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa08096a70; to 'JaxprTracer' at 0x7ffa08094130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4b1f5720>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff66c7a9ba0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff64c7af420; to 'JaxprTracer' at 0x7ff64c7af290>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x662962e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
98, epoch_train_loss=3.2796184744785317
Epoch 99
Epoch 99 :: Batch 1/1
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 170
0: Pred stats: pred_nans = 6320
0: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70ce61c80>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffd2c33d490; to 'JaxprTracer' at 0x7ffd2c33d4e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x34434c40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
0: Ref stats: shape=(6320,) mean=-0.869908343211423
eX.__call__, rho shape: (2, 5016, 15)
eX.__call__, rho nans: 0
1: Pred stats: pred_nans = 5016
1: Pred2 stats: shape=(5016,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc3055dba0>, in_tracers=(Traced<ShapedArray(float64[5016]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70c4d5940; to 'JaxprTracer' at 0x7ff70c4d78d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5016]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5016.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x581f0490>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
1: Ref stats: shape=(5016,) mean=-0.549587370539108
eX.__call__, rho shape: (2, 2440, 15)
eX.__call__, rho nans: 0
2: Pred stats: pred_nans = 2440
2: Pred2 stats: shape=(2440,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff714672b60>, in_tracers=(Traced<ShapedArray(float64[2440]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa502b81d0; to 'JaxprTracer' at 0x7ffa502bb2e0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[2440]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 2440.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7c53efd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
2: Ref stats: shape=(2440,) mean=-0.224300667559312
eX.__call__, rho shape: (2, 4592, 15)
eX.__call__, rho nans: 558
3: Pred stats: pred_nans = 4592
3: Pred2 stats: shape=(4592,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc102ba9b0>, in_tracers=(Traced<ShapedArray(float64[4592]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70ac7f420; to 'JaxprTracer' at 0x7ff70ac7cea0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4592]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4592.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb687d090>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
3: Ref stats: shape=(4592,) mean=-0.2787979801405202
eX.__call__, rho shape: (2, 5040, 15)
eX.__call__, rho nans: 0
4: Pred stats: pred_nans = 5040
4: Pred2 stats: shape=(5040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb08769930>, in_tracers=(Traced<ShapedArray(float64[5040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff714889580; to 'JaxprTracer' at 0x7ff714889080>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[5040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 5040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x435b1060>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
4: Ref stats: shape=(5040,) mean=-0.5923462951772553
eX.__call__, rho shape: (2, 6152, 15)
eX.__call__, rho nans: 6
5: Pred stats: pred_nans = 6152
5: Pred2 stats: shape=(6152,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6dc2d0>, in_tracers=(Traced<ShapedArray(float64[6152]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71413d530; to 'JaxprTracer' at 0x7ff71413e070>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6152]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6152.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86a7fc00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
5: Ref stats: shape=(6152,) mean=-0.9688613511017583
eX.__call__, rho shape: (2, 6088, 15)
eX.__call__, rho nans: 0
6: Pred stats: pred_nans = 6088
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
6: Pred2 stats: shape=(6088,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70677ac0>, in_tracers=(Traced<ShapedArray(float64[6088]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff71229e2f0; to 'JaxprTracer' at 0x7ff71229e930>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6088]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6088.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x306fc9e0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
6: Ref stats: shape=(6088,) mean=-0.7879135676257818
eX.__call__, rho shape: (2, 6320, 15)
eX.__call__, rho nans: 172
7: Pred stats: pred_nans = 6320
7: Pred2 stats: shape=(6320,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb70675870>, in_tracers=(Traced<ShapedArray(float64[6320]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcd44d2d90; to 'JaxprTracer' at 0x7ffcd44d1b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6320]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6320.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x67629b00>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
7: Ref stats: shape=(6320,) mean=-0.9051903642103989
eX.__call__, rho shape: (2, 4776, 15)
eX.__call__, rho nans: 0
8: Pred stats: pred_nans = 4776
8: Pred2 stats: shape=(4776,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c260720>, in_tracers=(Traced<ShapedArray(float64[4776]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70bf168e0; to 'JaxprTracer' at 0x7ff70bf16980>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[4776]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 4776.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x62c1d650>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
8: Ref stats: shape=(4776,) mean=-0.21039233028755258
eX.__call__, rho shape: (2, 9848, 15)
eX.__call__, rho nans: 0
9: Pred stats: pred_nans = 9848
9: Pred2 stats: shape=(9848,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa5013bd00>, in_tracers=(Traced<ShapedArray(float64[9848]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff708590900; to 'JaxprTracer' at 0x7ff708592ed0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9848]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9848.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x2c451f60>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
9: Ref stats: shape=(9848,) mean=-0.5593178341295877
eX.__call__, rho shape: (2, 9752, 15)
eX.__call__, rho nans: 0
10: Pred stats: pred_nans = 9752
10: Pred2 stats: shape=(9752,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff6ac348ca0>, in_tracers=(Traced<ShapedArray(float64[9752]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb704a02c0; to 'JaxprTracer' at 0x7ffb704a0590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9752]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9752.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3985f5b0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
10: Ref stats: shape=(9752,) mean=-0.47238995482001833
eX.__call__, rho shape: (2, 12256, 15)
eX.__call__, rho nans: 0
11: Pred stats: pred_nans = 12256
11: Pred2 stats: shape=(12256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffad0762430>, in_tracers=(Traced<ShapedArray(float64[12256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd018dda0; to 'JaxprTracer' at 0x7ffbd018de90>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xcd8f96a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
11: Ref stats: shape=(12256,) mean=-0.46951311270900437
eX.__call__, rho shape: (2, 14920, 15)
eX.__call__, rho nans: 0
12: Pred stats: pred_nans = 14920
12: Pred2 stats: shape=(14920,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbf0624ee0>, in_tracers=(Traced<ShapedArray(float64[14920]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffc500462f0; to 'JaxprTracer' at 0x7ffc50045b70>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[14920]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 14920.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xc4c04450>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
12: Ref stats: shape=(14920,) mean=-0.5723763513467679
eX.__call__, rho shape: (2, 12208, 15)
eX.__call__, rho nans: 0
13: Pred stats: pred_nans = 12208
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
13: Pred2 stats: shape=(12208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa7055e8e0>, in_tracers=(Traced<ShapedArray(float64[12208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbd018f240; to 'JaxprTracer' at 0x7ffbd03ed120>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x3f266920>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
13: Ref stats: shape=(12208,) mean=-0.977037612094241
eX.__call__, rho shape: (2, 9824, 15)
eX.__call__, rho nans: 0
14: Pred stats: pred_nans = 9824
14: Pred2 stats: shape=(9824,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc301e2790>, in_tracers=(Traced<ShapedArray(float64[9824]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb008cef0; to 'JaxprTracer' at 0x7ffcb008d800>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9824]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9824.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xa47da40>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
14: Ref stats: shape=(9824,) mean=-0.6811557696175137
eX.__call__, rho shape: (2, 9912, 15)
eX.__call__, rho nans: 0
15: Pred stats: pred_nans = 9912
15: Pred2 stats: shape=(9912,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c6de490>, in_tracers=(Traced<ShapedArray(float64[9912]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb07b29d0; to 'JaxprTracer' at 0x7ffcb07b2430>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9912]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9912.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x57b1bf70>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
15: Ref stats: shape=(9912,) mean=-0.6064987850174334
eX.__call__, rho shape: (2, 15208, 15)
eX.__call__, rho nans: 0
16: Pred stats: pred_nans = 15208
16: Pred2 stats: shape=(15208,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b10ed30>, in_tracers=(Traced<ShapedArray(float64[15208]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffbb0571490; to 'JaxprTracer' at 0x7ffbb05709a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15208]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15208.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xabb04cd0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
16: Ref stats: shape=(15208,) mean=-0.40179497500778755
eX.__call__, rho shape: (2, 10040, 15)
eX.__call__, rho nans: 0
17: Pred stats: pred_nans = 10040
17: Pred2 stats: shape=(10040,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70c262510>, in_tracers=(Traced<ShapedArray(float64[10040]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff7888e67a0; to 'JaxprTracer' at 0x7ff7888e76a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[10040]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 10040.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x86f13fc0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
17: Ref stats: shape=(10040,) mean=-0.5446240810941451
eX.__call__, rho shape: (2, 8552, 15)
eX.__call__, rho nans: 0
18: Pred stats: pred_nans = 8552
18: Pred2 stats: shape=(8552,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd0222e20>, in_tracers=(Traced<ShapedArray(float64[8552]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffa507c0400; to 'JaxprTracer' at 0x7ffa507c04a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[8552]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 8552.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7cb99cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
18: Ref stats: shape=(8552,) mean=-0.755140108823162
eX.__call__, rho shape: (2, 6936, 15)
eX.__call__, rho nans: 0
19: Pred stats: pred_nans = 6936
19: Pred2 stats: shape=(6936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa301b3eb0>, in_tracers=(Traced<ShapedArray(float64[6936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffcb06ac6d0; to 'JaxprTracer' at 0x7ffcb06aec00>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[6936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 6936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4d699a50>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
19: Ref stats: shape=(6936,) mean=-0.25027976492124226
eX.__call__, rho shape: (2, 11536, 15)
eX.__call__, rho nans: 0
20: Pred stats: pred_nans = 11536
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
/gpfs/projects/FernandezGroup/Alec/miniconda3/envs/pyscfad/lib/python3.10/site-packages/jax/_src/ops/scatter.py:96: FutureWarning: scatter inputs have incompatible types: cannot safely cast value from dtype=int64 to dtype=int32 with jax_numpy_dtype_promotion='standard'. In future JAX releases this will result in an error.
  warnings.warn(
20: Pred2 stats: shape=(11536,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffa505c2360>, in_tracers=(Traced<ShapedArray(float64[11536]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb707a75b0; to 'JaxprTracer' at 0x7ffb707a7a60>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[11536]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 11536.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x29c5eb20>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
20: Ref stats: shape=(11536,) mean=-0.7139930896365185
eX.__call__, rho shape: (2, 24512, 15)
eX.__call__, rho nans: 0
21: Pred stats: pred_nans = 24512
21: Pred2 stats: shape=(24512,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffbd06faca0>, in_tracers=(Traced<ShapedArray(float64[24512]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff713550950; to 'JaxprTracer' at 0x7ff713550590>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[24512]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 24512.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4ee28ce0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
21: Ref stats: shape=(24512,) mean=-0.9324880263797565
eX.__call__, rho shape: (2, 13096, 15)
eX.__call__, rho nans: 0
22: Pred stats: pred_nans = 13096
22: Pred2 stats: shape=(13096,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffc10184af0>, in_tracers=(Traced<ShapedArray(float64[13096]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff9d04113a0; to 'JaxprTracer' at 0x7ff9d0410130>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13096]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13096.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x4fa86ee0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
22: Ref stats: shape=(13096,) mean=-0.5372788058869408
eX.__call__, rho shape: (2, 12384, 15)
eX.__call__, rho nans: 0
23: Pred stats: pred_nans = 12384
23: Pred2 stats: shape=(12384,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffb707088c0>, in_tracers=(Traced<ShapedArray(float64[12384]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ffb30222de0; to 'JaxprTracer' at 0x7ffb302224d0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[12384]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 12384.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x55346ef0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
23: Ref stats: shape=(12384,) mean=-0.8376167987925418
eX.__call__, rho shape: (2, 13936, 15)
eX.__call__, rho nans: 0
24: Pred stats: pred_nans = 13936
24: Pred2 stats: shape=(13936,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff712805a80>, in_tracers=(Traced<ShapedArray(float64[13936]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70a83f290; to 'JaxprTracer' at 0x7ff70a83f1a0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[13936]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 13936.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0xb2855f80>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
24: Ref stats: shape=(13936,) mean=-0.3288088100933431
eX.__call__, rho shape: (2, 9656, 15)
eX.__call__, rho nans: 0
25: Pred stats: pred_nans = 9656
25: Pred2 stats: shape=(9656,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ff70b41ccf0>, in_tracers=(Traced<ShapedArray(float64[9656]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff712abb970; to 'JaxprTracer' at 0x7ff712aba200>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[9656]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 9656.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x7a4432a0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
25: Ref stats: shape=(9656,) mean=-0.36137147222490945
eX.__call__, rho shape: (2, 15256, 15)
eX.__call__, rho nans: 0
26: Pred stats: pred_nans = 15256
26: Pred2 stats: shape=(15256,) mean=Traced<ConcreteArray(nan, dtype=float64)>with<JVPTrace(level=2/0)> with
  primal = Array(nan, dtype=float64)
  tangent = Traced<ShapedArray(float64[])>with<JaxprTrace(level=1/0)> with
    pval = (ShapedArray(float64[]), None)
    recipe = JaxprEqnRecipe(eqn_id=<object object at 0x7ffe9c93bbb0>, in_tracers=(Traced<ShapedArray(float64[15256]):JaxprTrace(level=1/0)>,), out_tracer_refs=[<weakref at 0x7ff70a155fd0; to 'JaxprTracer' at 0x7ff70a1560c0>], out_avals=[ShapedArray(float64[])], primitive=pjit, params={'jaxpr': { lambda ; a:f64[15256]. let
    b:f64[] = reduce_sum[axes=(0,)] a
    c:f64[] = div b 15256.0
  in (c,) }, 'in_shardings': (UnspecifiedValue,), 'out_shardings': (UnspecifiedValue,), 'resource_env': None, 'donated_invars': (False,), 'name': '_mean', 'keep_unused': False, 'inline': True}, effects=set(), source_info=SourceInfo(traceback=<jaxlib.xla_extension.Traceback object at 0x71f28cb0>, name_stack=NameStack(stack=(Transform(name='jvp'),))))
26: Ref stats: shape=(15256,) mean=-0.4747357890581499
Batch Loss = 3.2796184744785317
99, epoch_train_loss=3.2796184744785317
